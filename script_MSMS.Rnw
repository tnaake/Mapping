<<prepare>>=
library(xcms)
library(CAMERA)
library (MetCirc)
setwd("/home/thomas/Documents/University/Master/MScArbeit/MSMS/")

## define colours for N. attenuata, N. obt, Nclev, Nquad, Nxobt1027, Nxobt57126
colours <- c("red", "blue", "orange","seagreen4", "plum2", "slateblue")

## xcms parameter settings as described in Patty et al. 2012, Nature Protocols
##xsetMSMS <- xcmsSet(file = "CDFs/MS", method="centWave", ppm=30, snthresh=10, peakwidth=c(5,20))
##classes <- c("attMSWOS72", "obtMSWOS72", "clevMSWOS72", "quadMSWOS72", "x1027MSWOS72", "x57126MSWOS72")
## classes <- c("att20evWOS72", "att30evWOS72", "att40evWOS72", "attMSWOS72",
##             "obt20evWOS72", "obt30evWOS72", "obt40evWOS72", "obtMSWOS72",
##              "clev20evWOS72", "clev30evWOS72", "clev40evWOS72", "clevMSWOS72",
##              "quad20evWOS72", "quad30evWOS72", "quad40evWOS72", "quadMSWOS72",
##              "x102720evWOS72", "x102730evWOS72", "x102740evWOS72", "x1027MSWOS72",
##              "x5712620evWOS72", "x5712630evWOS72", "x5712640evWOS72", "x57126MSWOS72",
##              "att20evCon", "att30evCon", "att40evCon", "attMSCon",
##              "att20evMJ72", "att30evMJ72", "att40evMJ72", "attMSMJ72",
##              "obt20evCon", "obt30evCon", "obt40evCon", "obtMSCon",
##              "obt20evMJ72", "obt30evMJ72", "obt40evMJ72", "obtMSMJ72",
##              "cle20evCon", "cle30evCon", "cle40evCon", "cleMSCon",
##              "cle20evMJ72", "cle30evMJ72", "cle40evMJ72", "cleMSMJ72",
##              "quad20evCon", "quad30evCon", "quad40evCon", "quadMSCon",
##              "quad20evMJ72", "quad30evMJ72", "quad40evMJ72", "quadMSMJ72",
##              "x102720evCon", "x102730evCon", "x102740evCon", "x1027MSCon",
##              "x102720evMJ72", "x102730evMJ72", "x102740evMJ72", "x1027MSMJ72",
##              "x5712620evCon", "x5712630evCon", "x5712640evCon", "x57126MSCon",
##              "x5712620evMJ72", "x5712630evMJ72", "x5712640evMJ72", "x57126MSMJ72")
## add classes
##sampclass(xsetMSMS) <- classes
## 
##xset2MSMS <- group(xsetMSMS, method="density", minfrac=0.5, minsamp=1, bw=2, mzwid=0.025)
##xset3MSMS <- retcor(xset2MSMS, family= "s", plottype= "m", missing=1, extra=1, span=1)
##xset4MSMS <- group(xset3MSMS, method="density", mzwid=0.025, minfrac=0.5, 
##               minsamp=1, bw=2)
##xset5MSMS <- fillPeaks(xset4MSMS, method = "chrom")
##save(xsetMSMS, xset2MSMS, xset3MSMS, xset4MSMS, file = "MSMS_xcms.RData")
load("MSMS_xcms.RData")

## CAMERA
load("MSMS_CAMERA.RData")
##anMSMS <- xsAnnotate(xset5MSMS)
##anFMSMS <- groupFWHM(anMSMS, perfwhm = 0.6)
##anIMSMS <- findIsotopes(anFMSMS, mzabs=0.01)
##anICMSMS <- groupCorr(anIMSMS, cor_eic_th=0.75, graphMethod = "lpc")
##anFAMSMS <- findAdducts(anICMSMS, polarity="positive")
#peaklistMSMS <- getPeaklist(anFAMSMS)

##anMSMS2 <- xsAnnotate(xset4MSMS)
##anFMSMS2 <- groupFWHM(anMSMS2, perfwhm = 0.6)
##anIMSMS2 <- findIsotopes(anFMSMS2, mzabs = 0.01)
##anICMSMS2 <- groupCorr(anIMSMS2, cor_eic_th=0.75, graphMethod = "lpc")
##anFAMSMS2 <- findAdducts(anICMSMS2, polarity="positive")
peaklistMSMS2 <- getPeaklist(anFAMSMS2)
##save(anMSMS2, anFMSMS2, anIMSMS2, anICMSMS2, anFAMSMS2, peaklistMSMS2, file = "MSMS_CAMERA.RData")


## re-create xcms combined peaklist for WOS and MeJA (shell)
setwd("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/WOS_MeJA_0h_72h/")
##xset <- xcmsSet(method="centWave", ppm=30, snthresh=10, peakwidth=c(5,20), BPPARAM = MulticoreParam(workers = 2))
##classes <- c(rep("att0", 5),  rep("att72WOS", 5),
##    rep("obt0", 5), rep("obt72WOS", 5),
##    rep("clev0", 5),  rep("clev72WOS", 5),
##    rep("quad0", 5), rep("quad72WOS", 5),
##    rep("x10270", 5),  rep("x102772WOS", 5),
##    rep("x570", 5), rep("x5772WOS", 5),
##    rep("att0", 5),  rep("att72MJ", 5),
##    rep("obt0", 5), rep("obt72MJ", 5),
##    rep("clev0", 5),  rep("clev72MJ", 5),
##    rep("quad0", 5), rep("quad72MJ", 5),
##    rep("x10270", 5),  rep("x102772MJ", 5),
##    rep("x570", 5), rep("x5772MJ", 5))
##sampclass(xset) <- classes
##xset2 <- group(xset, method="density", minfrac=0.5, minsamp=2, bw=2, mzwid=0.025) ## mzwid = 0.01
##xset3 <- retcor(xset2, family= "s", plottype= "m", missing=1, extra=1, span=1)
##xset4 <- group(xset3, method="density", bw=2, mzwid=0.025, minfrac=0.5, minsamp=2)
##cleanParallel()
##xset5 <- fillPeaks(xset4, method = "chrom")
##save(xset, xset2, xset3, xset4, xset5, file = "./metabolicProfiling.RData")
load("./metabolicProfiling.RData")


##an <- xsAnnotate(xset5)
##anF <- groupFWHM(an, perfwhm = 0.6)
##anI <- findIsotopes(anF, mzabs=0.01)
##anIC <- groupCorr(anI, cor_eic_th=0.75, graphMethod = "lpc")
##anFA <- findAdducts(anIC, polarity="positive")
#peaklist <- getPeaklist(anFA)
## get colnames of samples (min and max ind)
#colMin <- which(colnames(peaklist) == "X001_BA4_01_28001")
#colMax <- which(colnames(peaklist) == "X180_RD2_01_28200")
#cols <- colMin:colMax
#peaklist[, cols] <- peaklist[, cols] + 1
#peaklist[, cols] <- apply(peaklist[, cols], 2, FUN = function(x) (x / quantile(x, 0.75)))
# ## without peak filling (to get number of compounds)
# an2 <- xsAnnotate(xset4)
# anF2 <- groupFWHM(an2, perfwhm = 0.6)
# anI2 <- findIsotopes(anF2, mzabs = 0.01)
# anIC2 <- groupCorr(anI2, cor_eic_th = 0.75, graphMethod = "lpc")
# anFA2 <- findAdducts(anIC2, polarity = "positive")
#peaklist2 <- getPeaklist(anFA2)
#peaklist2[, cols] <- peaklist2[, cols] +1 
#peaklist2[, cols] <- apply(peaklist2[, cols], 2, FUN = function(x) (x / quantile(x, 0.75, na.rm = TRUE) ))
## write pcgroups of peaklist to peaklist2
#peaklist2[, "pcgroup"] <- peaklist[, "pcgroup"]
# save(an, anF, anI, anIC, anFA, peaklist, an2, anF2, anI2, anIC2, anFA2, peaklist2, file = "./CAMERA_complete.RData")
load("./CAMERA_complete.RData")
write.table(peaklist, file = "peaklist_xcms_CAMERA_C_WOS_MJ.csv", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = "\t")
@


<<MSMS>>=
MSMS <- read.csv("../../MSMS/idmsms_3_3_0.8_minCor_rmv50.csv")
MSMS_raw <- MSMS
MSMS <- MSMS[,c(2,3,4,8)]
colnames(MSMS)[which(colnames(MSMS) == "precursor")] <- "id"

## how many features were created? 
length(unique(MSMS[, "id"])) ## 793

## remove these entries from the MSMS which do not have the precursor ions (id) in the fragmentation
## start remove
uniqPrecMZRTPC <- unique(as.character(MSMS[, "id"]))
PrecMZRTPC <- as.character(MSMS[, "id"])
 
MSMS_mod <- cbind(MSMS, "check" = numeric(dim(MSMS)[1]))
for (i in 1:length(uniqPrecMZRTPC)) {
    mzPC <- as.numeric(cutUniquePrecursor(uniqPrecMZRTPC[i], splitPattern = "_", splitInd = 1))
    inds <- which(PrecMZRTPC == uniqPrecMZRTPC[i])
    mzGROUPS <- MSMS[inds, "mz"]
    if( any(abs(mzGROUPS - mzPC) < 0.02) ) MSMS_mod[inds, "check"] <- TRUE
}
## remove lines which have check == 0
MSMS <- MSMS[MSMS_mod[, "check"] == 1, ]
## end remove

## how many features are remaining? 
length(unique(MSMS[, "id"])) ## 575


## rename column inten to intensity
colnames(MSMS)[which(colnames(MSMS) == "inten")] <- "intensity"
##colnames(MSMS)[which(colnames(MSMS) == "id")] <- "pcgroup_precursorMZ"
# 
# ## truncate MSMS (after 40 min there is only isocratic 15% A and 85% B)
# ## truncate MSMS after 41 min = 60*41 s = 2460 s
# MSMS <- MSMS[which(as.numeric(MSMS[, "rt"]) < 2460), ]
@


<<mapping>>=
precursorMZRT <- as.character(MSMS[, "id"])
precursorMZRT_unique <- unique(precursorMZRT)
precursorMZ <- unlist(lapply(strsplit(as.character(MSMS[,"id"]), "_"), "[", 1))
precursorMZ <- as.numeric(precursorMZ)
precursorMZ_unique <- unique(precursorMZ)
precursorRT <- unlist(lapply(strsplit(as.character(MSMS[,"id"]), "_"), "[", 2))
precursorRT <- as.numeric(precursorRT)
precursorRT_unique <- unique(precursorRT)
uniqueMZRTPC <- as.character(unique(MSMS[, "id"]))
precursorRT_minute <- precursorRT / 60 - 1 ## minimum is now 0.027 minutes (in the gradient phase)
gradientMSMS <- numeric(length = length(precursorRT_minute))
gradientMSMS[which(precursorRT_minute <= 0)] <- 0.9
gradientMSMS[which(precursorRT_minute > 0)] <- 0.90 - 0.01923077 * precursorRT_minute[which(precursorRT_minute > 0)]
gradientMSMS[which(precursorRT_minute >= 39)] <- 0.15 ## between 1min and 40min there is gradient phase

## profiling data for W+OS
##load("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/WOS_0h_72h/metabolicProfiling.RData")
##load("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/WOS_0h_72h/CAMERA_complete.RData")
peaklist <- getPeaklist(anFA)
gradientProfiling <- numeric(length = length(peaklist[,"rt"]))
precursorRT_minute_profiling <- peaklist[,"rt"] / 60 - 1 ## 1 min isocratic
gradientProfiling[which(precursorRT_minute_profiling <= 0)] <- 0.9
gradientProfiling[which(precursorRT_minute_profiling > 0)] <- 0.9 - 0.072727272727272727272727 * precursorRT_minute_profiling[which(precursorRT_minute_profiling > 0)]
## from minute 12 (11) isocratic 0.1
gradientProfiling[which(precursorRT_minute_profiling > 11)] <- 0.1


## profiling data for MJ
#load("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/MeJa_0h_72h/metabolicProfilingMJ.RData")
#load("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/MeJa_0h_72h/CAMERA_completeMJ.RData")
# peaklistMJ <- getPeaklist(anFAMJ)
# gradientProfilingMJ <- numeric(length = length(peaklistMJ[,"rt"]))
# precursorRT_minute_profilingMJ <- peaklistMJ[,"rt"] / 60 - 1 ## 1 min isocratic
# gradientProfilingMJ[which(precursorRT_minute_profilingMJ <= 0)] <- 0.9
# gradientProfilingMJ[which(precursorRT_minute_profilingMJ > 0)] <- 0.9 - 0.0727272727272727 * precursorRT_minute_profilingMJ[which(precursorRT_minute_profilingMJ > 0)]
# ## from minute 12 (11) isocratic 0.1
# gradientProfilingMJ[which(precursorRT_minute_profilingMJ > 11)] <- 0.1

## prepare MSMS
## add column gradientWOS, gradientMJ and gradientMSMS
MSMS_mod <- cbind(MSMS, gradientWOS = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, gradientMJ = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, gradientMSMS = numeric(dim(MSMS)[1]))
MSMS_mod[, "gradientMSMS"] <- gradientMSMS
## add column mzWOS,rtWOS that is the mz and retention time of mapped features of peaklistWOS
MSMS_mod <- cbind(MSMS_mod, mzWOS = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, rtWOS = numeric(dim(MSMS)[1]))
## add column mzMJ,rtMJ that is the mz and retention time of mapped features of peaklistMJ
MSMS_mod <- cbind(MSMS_mod, mzMJ = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, rtMJ = numeric(dim(MSMS)[1]))
## add columns that have number of biological replicates that synthesise compound: 
## e.g. NattWOS72, NobtWOS72, ... NattMJ0, ... NattMJ72, ...
mm <- matrix(0, nrow = dim(MSMS)[1], ncol = 18)
colnames(mm) <-  c("att0", "obt0", "clev0", "quad0", "x10270", "x571260",
  "att72WOS", "obt72WOS", "clev72WOS", "quad72WOS", "x102772WOS", "x5712672WOS",
  "att72MJ", "obt72MJ", "clev72MJ", "quad72MJ", "x102772MJ", "x5712672MJ")
MSMS_mod <- cbind(MSMS_mod, mm)
## add column: mapped1WOS and mapped1MJ, i.e. was this feature mapped in the first round = mapped by deviance?
## add column: mapped2WOS and mapped2MJ, i.e. was this feature mapped in the second round = mapped by interval?
MSMS_mod <- cbind(MSMS_mod, mapped1WOS = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, mapped1MJ = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, mapped2WOS = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, mapped2MJ = numeric(dim(MSMS)[1]))
MSMS_mod[, "mapped1WOS"] <- factor(x = MSMS_mod[, "mapped1WOS"], levels = c(0,1))
MSMS_mod[, "mapped1MJ"] <- factor(x = MSMS_mod[, "mapped1MJ"], levels = c(0,1))
MSMS_mod[, "mapped2WOS"] <- factor(x = MSMS_mod[, "mapped2WOS"], levels = c(0,1))
MSMS_mod[, "mapped2MJ"] <- factor(x = MSMS_mod[, "mapped2MJ"], levels = c(0,1))

## add column pc_group_m that contains the pcgroup of the mapped feature in the peaklist
MSMS_mod <- cbind(MSMS_mod, pc_group_m = numeric(dim(MSMS)[1])) 

## W+OS
#devWOS <- numeric(length(precursorMZ))
#devMJ <- numeric(length(precursorMZ))

gradient <- 0.03 ## tolerated deviance in gradient, define greater deviance 
## since we use a "combined" peaklist of WOS and MeJA runs


## round 1: define deviance for gradient and deviance for mz and map based on
## these criteria
for (i in 1:length(precursorMZ)) {
    
    ## WOS+MJ
    ## shrink space of possible mapped features by gradient deviance
    ind <- which(abs(gradientMSMS[i] - gradientProfiling) <= gradient)
    ## get feature with minimum deviance to mz
    ind_minMZ <- ind[which.min(abs(precursorMZ[i] - peaklist[ind, "mz"] ))]
    minInPeaklist <- peaklist[ind_minMZ,]
    
    if (abs(minInPeaklist["mz"] - precursorMZ[i]) <= 0.01) { ## tolerated m/z deviance is 0.01
        ## set mapped1 to 1
        MSMS_mod[i, "mapped1WOS"] <- 1
        MSMS_mod[i, "mapped1MJ"] <- 1
        ## write gradient of profiling to column gradientWOS
        MSMS_mod[i, "gradientWOS"] <- MSMS_mod[i, "gradientMJ"] <- gradientProfiling[ind_minMZ]
        
        ## write mz of profiling to column mzWOS and mzMJ
        MSMS_mod[i, "mzWOS"] <- MSMS_mod[i, "mzMJ"] <- peaklist[ind_minMZ, "mz"]
        ## write retention time of profiling to column rtWOS and rtMJ
        MSMS_mod[i, "rtWOS"] <- MSMS_mod[i, "rtMJ"] <- peaklist[ind_minMZ, "rt"]
        
        ## write numbers of biological replicates where feature is present: C
        MSMS_mod[i, "att0"] <- peaklist[ind_minMZ, "att0"]
        MSMS_mod[i, "obt0"] <- peaklist[ind_minMZ, "obt0"]
        MSMS_mod[i, "clev0"] <- peaklist[ind_minMZ, "clev0"]
        MSMS_mod[i, "quad0"] <- peaklist[ind_minMZ, "quad0"]
        MSMS_mod[i, "x10270"] <- peaklist[ind_minMZ, "x10270"]
        MSMS_mod[i, "x571260"] <- peaklist[ind_minMZ, "x570"]
        
        ## write numbers of biological replicates where feature is present: WOS
        MSMS_mod[i, "att72WOS"] <- peaklist[ind_minMZ, "att72WOS"]
        MSMS_mod[i, "obt72WOS"] <- peaklist[ind_minMZ, "obt72WOS"]
        MSMS_mod[i, "clev72WOS"] <- peaklist[ind_minMZ, "clev72WOS"]
        MSMS_mod[i, "quad72WOS"] <- peaklist[ind_minMZ, "quad72WOS"]
        MSMS_mod[i, "x102772WOS"] <- peaklist[ind_minMZ, "x102772WOS"]
        MSMS_mod[i, "x5712672WOS"] <- peaklist[ind_minMZ, "x5772WOS"]
        
        ## write numbers of biological replicates where feature is present: MJ
        MSMS_mod[i, "att72MJ"] <- peaklist[ind_minMZ, "att72MJ"]
        MSMS_mod[i, "obt72MJ"] <- peaklist[ind_minMZ, "obt72MJ"]
        MSMS_mod[i, "clev72MJ"] <- peaklist[ind_minMZ, "clev72MJ"]
        MSMS_mod[i, "quad72MJ"] <- peaklist[ind_minMZ, "quad72MJ"]
        MSMS_mod[i, "x102772MJ"] <- peaklist[ind_minMZ, "x102772MJ"]
        MSMS_mod[i, "x5712672MJ"] <- peaklist[ind_minMZ, "x5772MJ"]
        
        ## write mapped pcgroup of peaklist
        MSMS_mod[i, "pc_group_m"] <- peaklist[ind_minMZ, "pcgroup"]
    }
}
## end of round 1

## how many features were mapped (round 1)?
length(unique(MSMS_mod[which(MSMS_mod[, "mapped1WOS"] == 1),"id"])) ## 163

msms <- MSMS_mod[which(MSMS_mod[, "mapped1WOS"] == 1), c("id","pc_group_m")]

map <- list()
for (i in 1:length(unique(msms[, 2]))) {
    uniq <- unique(msms[,2])[i]
    map[[i]] <- as.character(unique(msms[msms[, 2] == uniq,1]))
}
## round 2: use results from round 1 and define a retention time window 
## between already mapped features, check then in this window if other (not yet
## mapped) features can be mapped

for (i in 1:length(precursorMZ)) {
    
    ## for WOS
    ##mappedWOS <- which(MSMS_mod[, "mapped1WOS"] == 1 ) 
    indmapped <- which(MSMS_mod[, "mapped1WOS"] == 1)
    mappedGradients <- MSMS_mod[indmapped, "gradientMSMS"]
    mappedGradients_uni <- unique(mappedGradients)
    
    if (MSMS_mod[i,"mapped1WOS"] == 0) {
        
        ## get feature that has gradient of rank +-2 to calculated one
        devGradient <- MSMS_mod[i, "gradientMSMS"] - mappedGradients_uni
        ## upper and lower feature which is +-2
        devGradient_ind_u <- which( devGradient == sort(devGradient[devGradient >= 0])[3] )
        devGradient_ind_l <- which( -1 * devGradient == sort(abs(devGradient[devGradient <= 0]))[3] )
        
        ## retrieve respective mapped MSMS feature with lower and higher retention time
        ## that will use as a lower and upper bound for search space
        lower <- MSMS_mod[intersect(which(MSMS_mod[, "gradientMSMS"] ==  mappedGradients_uni[devGradient_ind_l]), indmapped), ]
        upper <- MSMS_mod[intersect(which(MSMS_mod[, "gradientMSMS"] ==  mappedGradients_uni[devGradient_ind_u]), indmapped), ]
        ## implement a rule for boundary values
        if (dim(upper)[1] == 0) {
            upper <- lower
            upper[,"rtWOS"] <- lower[,"rtWOS"] + 20
            upper[,"rtMJ"] <- lower[,"rtMJ"] + 20
        }
        if (dim(lower)[1] == 0) {
            lower <- upper
            lower[,"rtWOS"] <- upper[,"rtWOS"] - 20
            lower[,"rtMJ"] <- upper[,"rtMJ"] - 20
        }
    
        lowerRT <- min(lower[, "rtWOS"])
        upperRT <- max(upper[, "rtWOS"])
    
        ## it can happen that features with different retention times were selected as 
        ## "neighbours" that were mapped to the same feature in round 1,
        ## the retention time will be identical, therefore: 
        ## implement a rule that there is a certain range of at least 20s to look into
        ## when the range between upperRT and lowerRT is low
        if (upperRT - lowerRT < 40) {
            upperRT <- max(upperRT, lowerRT) + 40
            lowerRT <- min(lowerRT, upperRT) - 40
        }
        
        if (lowerRT >= upperRT) {
            print(i)
            lower <- lowerRT 
            lowerRT <- upperRT 
            upperRT <- lower
        }
        
        ind_tr <- intersect(which(peaklist[, "rt"] <= upperRT), which(peaklist[, "rt"] >= lowerRT))
        
        peaklist_tr <- peaklist[ind_tr, ]
        
        ind_mapped <- which.min(abs(peaklist_tr[, "mz"] - precursorMZ[i]))
        mapped <- peaklist_tr[ind_mapped, ]
        
        if (abs(mapped[, "mz"] - precursorMZ[i]) <= 0.01) { ## use deviance of 0.008
            
            ind_minMZ <- ind_tr[ind_mapped]
            
            ## set mapped2 to 1
            MSMS_mod[i, "mapped2WOS"] <- MSMS_mod[i, "mapped2MJ"] <- 1
            ## write gradient of profiling to column gradientWOS
            MSMS_mod[i, "gradientWOS"] <- MSMS_mod[i, "gradientMJ"] <- gradientProfiling[ind_minMZ]
            
            ## write mz of profiling to column mzWOS and mzMJ
            MSMS_mod[i, "mzWOS"] <- MSMS_mod[i, "mzMJ"] <- peaklist[ind_minMZ, "mz"]
            ## write retention time of profiling to column rtWOS and rtMJ
            MSMS_mod[i, "rtWOS"] <- MSMS_mod[i, "rtMJ"] <- peaklist[ind_minMZ, "rt"]
            
            ## write numbers of biological replicates where feature is present: C
            MSMS_mod[i, "att0"] <- peaklist[ind_minMZ, "att0"]
            MSMS_mod[i, "obt0"] <- peaklist[ind_minMZ, "obt0"]
            MSMS_mod[i, "clev0"] <- peaklist[ind_minMZ, "clev0"]
            MSMS_mod[i, "quad0"] <- peaklist[ind_minMZ, "quad0"]
            MSMS_mod[i, "x10270"] <- peaklist[ind_minMZ, "x10270"]
            MSMS_mod[i, "x571260"] <- peaklist[ind_minMZ, "x570"]
            
            ## write numbers of biological replicates where feature is present: WOS
            MSMS_mod[i, "att72WOS"] <- peaklist[ind_minMZ, "att72WOS"]
            MSMS_mod[i, "obt72WOS"] <- peaklist[ind_minMZ, "obt72WOS"]
            MSMS_mod[i, "clev72WOS"] <- peaklist[ind_minMZ, "clev72WOS"]
            MSMS_mod[i, "quad72WOS"] <- peaklist[ind_minMZ, "quad72WOS"]
            MSMS_mod[i, "x102772WOS"] <- peaklist[ind_minMZ, "x102772WOS"]
            MSMS_mod[i, "x5712672WOS"] <- peaklist[ind_minMZ, "x5772WOS"]
            
            ## write numbers of biological replicates where feature is present: MJ
            MSMS_mod[i, "att72MJ"] <- peaklist[ind_minMZ, "att72MJ"]
            MSMS_mod[i, "obt72MJ"] <- peaklist[ind_minMZ, "obt72MJ"]
            MSMS_mod[i, "clev72MJ"] <- peaklist[ind_minMZ, "clev72MJ"]
            MSMS_mod[i, "quad72MJ"] <- peaklist[ind_minMZ, "quad72MJ"]
            MSMS_mod[i, "x102772MJ"] <- peaklist[ind_minMZ, "x102772MJ"]
            MSMS_mod[i, "x5712672MJ"] <- peaklist[ind_minMZ, "x5772MJ"]
            
            ## write mapped pcgroup of peaklist
            MSMS_mod[i, "pc_group_m"] <- peaklist[ind_minMZ, "pcgroup"]
        }
    }
}

## how many features were mapped (round 2)?
length(unique(MSMS_mod[which(MSMS_mod[, "mapped2WOS"] == 1),"id"])) ## 103

## distribution along the chromatogramm for the mapped features
hist(as.numeric(unlist(lapply(strsplit(as.character(unique(MSMS_mod[which(MSMS_mod[, "mapped1WOS"] == 1),"id"])), "_"), "[", 2))), 
     ylim = c(0,120), main = "after mapping (round 1)", xlab = "retention time (s)")
hist(as.numeric(unlist(lapply(strsplit(as.character(unique(MSMS_mod[which(MSMS_mod[, "mapped2WOS"] == 1),"id"])), "_"), "[", 2))), 
     ylim = c(0,120), main = "after mapping (round 2)", xlab = "retention time (s)")

hist(as.numeric(unlist(lapply(strsplit(as.character(unique(MSMS_mod[,"id"])), "_"), "[", 2))), 
     ylim = c(0,120), main = "after mapping", xlab = "retention time (s)")
## distribution along the chromatogramm before mapping
hist(as.numeric(unlist(lapply(strsplit(as.character(unique(MSMS[,"id"])), "_"), "[", 2))), 
     ylim = c(0,120), main = "before mapping", xlab = "retention time (s)")

## round 3: map the features with intensity of 100 within the given gradient
head(MSMS_mod)
MSMS_mod <- cbind(MSMS_mod, mapped3MJ = numeric(dim(MSMS_mod)[1]))
MSMS_mod <- cbind(MSMS_mod, mapped3WOS = numeric(dim(MSMS_mod)[1]))
MSMS_mod <- cbind(MSMS_mod, pc_group_m3 = numeric(dim(MSMS_mod)[1]))

for (i in 1:length(precursorMZRT_unique)) {
    prec_group <- MSMS_mod[which(precursorMZRT_unique[i] == as.character(MSMS_mod[, "id"])),]
    ind_max <- which(prec_group[, "intensity"] == 100)[1]
    
    ## shrink space of possible mapped features by gradient deviance
    ## use more severe gradient
    ind <- which(abs(prec_group[ind_max, "gradientMSMS"] - gradientProfiling) <= gradient)
    ## get feature with minimum deviance to mz
    ind_minMZ <- ind[which.min(abs(prec_group[ind_max, "mz"] - peaklist[ind, "mz"] ))]
    minInPeaklist <- peaklist[ind_minMZ,]
    
    if (abs(minInPeaklist["mz"] - prec_group[ind_max, "mz"]) <= 0.01) {
        indMSMS <- which(MSMS_mod[, "id"] == precursorMZRT_unique[i])
        
        if (!(all(as.numeric(as.character(MSMS_mod[indMSMS, "mapped1WOS"])) == 1) | 
            all(as.numeric(as.character(MSMS_mod[indMSMS, "mapped2WOS"])) == 1))) {
                ## write gradient of profiling to column gradientWOS
                MSMS_mod[indMSMS, "gradientWOS"] <- MSMS_mod[indMSMS, "gradientMJ"] <- gradientProfiling[ind_minMZ]
            
                ## write mz of profiling to column mzWOS and mzMJ
                MSMS_mod[indMSMS, "mzWOS"] <- MSMS_mod[indMSMS, "mzMJ"] <- peaklist[ind_minMZ, "mz"]
                ## write retention time of profiling to column rtWOS and rtMJ
                MSMS_mod[indMSMS, "rtWOS"] <- MSMS_mod[indMSMS, "rtMJ"] <- peaklist[ind_minMZ, "rt"]
            
                ## write numbers of biological replicates where feature is present: C
                MSMS_mod[indMSMS, "att0"] <- peaklist[ind_minMZ, "att0"]
                MSMS_mod[indMSMS, "obt0"] <- peaklist[ind_minMZ, "obt0"]
                MSMS_mod[indMSMS, "clev0"] <- peaklist[ind_minMZ, "clev0"]
                MSMS_mod[indMSMS, "quad0"] <- peaklist[ind_minMZ, "quad0"]
                MSMS_mod[indMSMS, "x10270"] <- peaklist[ind_minMZ, "x10270"]
                MSMS_mod[indMSMS, "x571260"] <- peaklist[ind_minMZ, "x570"]
            
                ## write numbers of biological replicates where feature is present: WOS
                MSMS_mod[indMSMS, "att72WOS"] <- peaklist[ind_minMZ, "att72WOS"]
                MSMS_mod[indMSMS, "obt72WOS"] <- peaklist[ind_minMZ, "obt72WOS"]
                MSMS_mod[indMSMS, "clev72WOS"] <- peaklist[ind_minMZ, "clev72WOS"]
                MSMS_mod[indMSMS, "quad72WOS"] <- peaklist[ind_minMZ, "quad72WOS"]
                MSMS_mod[indMSMS, "x102772WOS"] <- peaklist[ind_minMZ, "x102772WOS"]
                MSMS_mod[indMSMS, "x5712672WOS"] <- peaklist[ind_minMZ, "x5772WOS"]
            
                ## write numbers of biological replicates where feature is present: MJ
                MSMS_mod[indMSMS, "att72MJ"] <- peaklist[ind_minMZ, "att72MJ"]
                MSMS_mod[indMSMS, "obt72MJ"] <- peaklist[ind_minMZ, "obt72MJ"]
                MSMS_mod[indMSMS, "clev72MJ"] <- peaklist[ind_minMZ, "clev72MJ"]
                MSMS_mod[indMSMS, "quad72MJ"] <- peaklist[ind_minMZ, "quad72MJ"]
                MSMS_mod[indMSMS, "x102772MJ"] <- peaklist[ind_minMZ, "x102772MJ"]
                MSMS_mod[indMSMS, "x5712672MJ"] <- peaklist[ind_minMZ, "x5772MJ"]
            
        
        }
        ## write number of pc_group and 1 to mapped3 
        MSMS_mod[indMSMS, "mapped3WOS"] <- MSMS_mod[indMSMS, "mapped3MJ"] <- 1
        MSMS_mod[indMSMS, "pc_group_m3"] <- peaklist[ind_minMZ, "pcgroup"]
        
    }
}

# ## round 4: map the features with the second highest intensity values within the given gradient
# head(MSMS_mod)
# MSMS_mod <- cbind(MSMS_mod, mapped4MJ = numeric(dim(MSMS_mod)[1]))
# MSMS_mod <- cbind(MSMS_mod, mapped4WOS = numeric(dim(MSMS_mod)[1]))
# MSMS_mod <- cbind(MSMS_mod, pc_group_m4 = numeric(dim(MSMS_mod)[1]))
# 
# for (i in 1:length(precursorMZRT_unique)) {
#     prec_group <- MSMS_mod[which(precursorMZRT_unique[i] == as.character(MSMS_mod[, "id"])),]
#     
#     if (length(prec_group[, "intensity"]) > 1) { ## only if length is 2 or higher
#     ind_max <- which(prec_group[, "intensity"] == sort(prec_group[, "intensity"], decreasing = TRUE)[2] )[1]
#     
#     ## shrink space of possible mapped features by gradient deviance
#     ## use more severe gradient
#     ind <- which(abs(prec_group[ind_max, "gradientMSMS"] - gradientProfiling) <= gradient)
#     ## get feature with minimum deviance to mz
#     ind_minMZ <- ind[which.min(abs(prec_group[ind_max, "mz"] - peaklist[ind, "mz"] ))]
#     minInPeaklist <- peaklist[ind_minMZ,]
#     
#     if (abs(minInPeaklist["mz"] - prec_group[ind_max, "mz"]) <= 0.01) {
#         indMSMS <- which(MSMS_mod[, "id"] == precursorMZRT_unique[i])
#         
#         if (!(all(as.numeric(as.character(MSMS_mod[indMSMS, "mapped1WOS"])) == 1) | 
#             all(as.numeric(as.character(MSMS_mod[indMSMS, "mapped2WOS"])) == 1) | 
#             all(as.numeric(as.character(MSMS_mod[indMSMS, "mapped3WOS"])) == 1))) {
#                 ## write gradient of profiling to column gradientWOS
#                 MSMS_mod[indMSMS, "gradientWOS"] <- MSMS_mod[indMSMS, "gradientMJ"] <- gradientProfiling[ind_minMZ]
#             
#                 ## write mz of profiling to column mzWOS and mzMJ
#                 MSMS_mod[indMSMS, "mzWOS"] <- MSMS_mod[indMSMS, "mzMJ"] <- peaklist[ind_minMZ, "mz"]
#                 ## write retention time of profiling to column rtWOS and rtMJ
#                 MSMS_mod[indMSMS, "rtWOS"] <- MSMS_mod[indMSMS, "rtMJ"] <- peaklist[ind_minMZ, "rt"]
#             
#                 ## write numbers of biological replicates where feature is present: C
#                 MSMS_mod[indMSMS, "att0"] <- peaklist[ind_minMZ, "att0"]
#                 MSMS_mod[indMSMS, "obt0"] <- peaklist[ind_minMZ, "obt0"]
#                 MSMS_mod[indMSMS, "clev0"] <- peaklist[ind_minMZ, "clev0"]
#                 MSMS_mod[indMSMS, "quad0"] <- peaklist[ind_minMZ, "quad0"]
#                 MSMS_mod[indMSMS, "x10270"] <- peaklist[ind_minMZ, "x10270"]
#                 MSMS_mod[indMSMS, "x571260"] <- peaklist[ind_minMZ, "x570"]
#             
#                 ## write numbers of biological replicates where feature is present: WOS
#                 MSMS_mod[indMSMS, "att72WOS"] <- peaklist[ind_minMZ, "att72WOS"]
#                 MSMS_mod[indMSMS, "obt72WOS"] <- peaklist[ind_minMZ, "obt72WOS"]
#                 MSMS_mod[indMSMS, "clev72WOS"] <- peaklist[ind_minMZ, "clev72WOS"]
#                 MSMS_mod[indMSMS, "quad72WOS"] <- peaklist[ind_minMZ, "quad72WOS"]
#                 MSMS_mod[indMSMS, "x102772WOS"] <- peaklist[ind_minMZ, "x1072WOS"]
#                 MSMS_mod[indMSMS, "x5712672WOS"] <- peaklist[ind_minMZ, "x5772WOS"]
#             
#                 ## write numbers of biological replicates where feature is present: MJ
#                 MSMS_mod[indMSMS, "att72MJ"] <- peaklist[ind_minMZ, "att72MJ"]
#                 MSMS_mod[indMSMS, "obt72MJ"] <- peaklist[ind_minMZ, "obt72MJ"]
#                 MSMS_mod[indMSMS, "clev72MJ"] <- peaklist[ind_minMZ, "clev72MJ"]
#                 MSMS_mod[indMSMS, "quad72MJ"] <- peaklist[ind_minMZ, "quad72MJ"]
#                 MSMS_mod[indMSMS, "x102772MJ"] <- peaklist[ind_minMZ, "x1072MJ"]
#                 MSMS_mod[indMSMS, "x5712672MJ"] <- peaklist[ind_minMZ, "x5772MJ"]
#             
#         }
#         
#             ## write number of pc_group and 1 to mapped4
#             MSMS_mod[indMSMS, "mapped4WOS"] <- MSMS_mod[indMSMS, "mapped4MJ"] <- 1
#             MSMS_mod[indMSMS, "pc_group_m4"] <- peaklist[ind_minMZ, "pcgroup"]
#         
#     }
#     }
# }

MSMS_mod <- cbind(MSMS_mod, mappedManualWOS = numeric(dim(MSMS_mod)[1]))
MSMS_mod <- cbind(MSMS_mod, mappedManualMJ = numeric(dim(MSMS_mod)[1]))
MSMS_mod <- cbind(MSMS_mod, pc_group_manual = numeric(dim(MSMS_mod)[1]))

## manually map DTGs and phenolamides that were not mapped by the rules
manually_map <- function(MSMS_mod = MSMS_mod, peaklist = peaklist, ind_in_peaklist, MSMS_feature) {
    ind_in_MSMS <- MSMS_mod[, "id"] == MSMS_feature
    MSMS_mod[ind_in_MSMS, "gradientWOS"] <- gradientProfiling[ind_in_peaklist]
    MSMS_mod[ind_in_MSMS, "gradientMJ"] <- gradientProfiling[ind_in_peaklist]
    MSMS_mod[ind_in_MSMS, "rtWOS"] <- peaklist[ind_in_peaklist, "rt"]
    MSMS_mod[ind_in_MSMS, "rtMJ"] <- peaklist[ind_in_peaklist, "rt"]
    MSMS_mod[ind_in_MSMS, "mzWOS" ] <- peaklist[ind_in_peaklist, "mz"]
    MSMS_mod[ind_in_MSMS, "mzMJ" ] <- peaklist[ind_in_peaklist, "mz"]
    MSMS_mod[ind_in_MSMS, "att0"] <- peaklist[ind_in_peaklist, "att0"]
    MSMS_mod[ind_in_MSMS, "obt0"] <- peaklist[ind_in_peaklist, "obt0"]
    MSMS_mod[ind_in_MSMS, "clev0"] <- peaklist[ind_in_peaklist, "clev0"]
    MSMS_mod[ind_in_MSMS, "quad0"] <- peaklist[ind_in_peaklist, "quad0"]
    MSMS_mod[ind_in_MSMS, "x10270"] <- peaklist[ind_in_peaklist, "x10270"]
    MSMS_mod[ind_in_MSMS, "x571260"] <- peaklist[ind_in_peaklist, "x570"]
    MSMS_mod[ind_in_MSMS, "att72WOS"] <- peaklist[ind_in_peaklist, "att72WOS"]
    MSMS_mod[ind_in_MSMS, "obt72WOS"] <- peaklist[ind_in_peaklist, "obt72WOS"]
    MSMS_mod[ind_in_MSMS, "clev72WOS"] <- peaklist[ind_in_peaklist, "clev72WOS"]
    MSMS_mod[ind_in_MSMS, "quad72WOS"] <- peaklist[ind_in_peaklist, "quad72WOS"]
    MSMS_mod[ind_in_MSMS, "x102772WOS"] <- peaklist[ind_in_peaklist, "x102772WOS"]
    MSMS_mod[ind_in_MSMS, "x5712672WOS"] <- peaklist[ind_in_peaklist, "x5772WOS"]
    MSMS_mod[ind_in_MSMS, "att72MJ"] <- peaklist[ind_in_peaklist, "att72MJ"]
    MSMS_mod[ind_in_MSMS, "obt72MJ"] <- peaklist[ind_in_peaklist, "obt72MJ"]
    MSMS_mod[ind_in_MSMS, "clev72MJ"] <- peaklist[ind_in_peaklist, "clev72MJ"]
    MSMS_mod[ind_in_MSMS, "quad72MJ"] <- peaklist[ind_in_peaklist, "quad72MJ"]
    MSMS_mod[ind_in_MSMS, "x102772MJ"] <- peaklist[ind_in_peaklist, "x102772MJ"]
    MSMS_mod[ind_in_MSMS, "x5712672MJ"] <- peaklist[ind_in_peaklist, "x5772MJ"]
    MSMS_mod[ind_in_MSMS, "mappedManualWOS"] <- 1
    MSMS_mod[ind_in_MSMS, "mappedManualMJ"] <- 1
    MSMS_mod[ind_in_MSMS, "pc_group_manual"] <- peaklist[ind_in_peaklist, "pcgroup"] 
    return(MSMS_mod)
}

## manually add the following metabolites
## Lyciomoside I
peaklist[order(abs(peaklist[, "mz"] - 653.34))[1],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 653.34))[1], "1026.516241_1120.95096_45")
## Nicotianoside XI
peaklist[order(abs(peaklist[, "mz"] - 901.40))[1],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 901.40))[1], "902.4113684_1042.403968_2513")
## Nicotianoside XIII
peaklist[order(abs(peaklist[, "mz"] - 1074.4042))[1],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 1074.4042))[1], "1095.383146_1100.705968_2423")
## Nicotianoside III
peaklist[order(abs(peaklist[, "mz"] - 945.4653))[1],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 945.4653))[1], "989.506952_1082.036944_2851")
## Attenoside 
peaklist[order(abs(peaklist[, "mz"] - 961.4601))[1],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 961.4601))[1], "961.4644333_996.928976_171")
## Nicotianoside VI
peaklist[order(abs(peaklist[, "mz"] - 1047.4525))[1],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 1047.4525))[1], "1047.466066_1036.689968_3442")
## Nicotianoside VII
peaklist[order(abs(peaklist[, "mz"] - 1133.4624))[2],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 1133.4624))[2], "1133.466791_1061.895456_116")
## Nicotianoside IX, Nicotianoside X, Lyciumoside II, Nicotianoside XII, lyciumoside IV, 
## Nicotianoside Ia iso1/2, Nicotianoside II, Nicotianoside IV, Nicotianoside V  were mapped by the rules
## nicotianoside VIII cannot be mapped manually (maybe due to the mz window used by dapeng) nor was it mapped by the rules

## N',N''-coumaroyl,caffeoylspermidine
peaklist[order(abs(peaklist[, "mz"] - 454.232))[1],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 454.232))[1], "454.2333533_493.319952_193")
## N-caffeoylspermidine 
peaklist[order(abs(peaklist[, "mz"] - 308.2))[2],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 308.2))[2], "308.1960639_423.60948_8")
## N-feruloylputrescine 
peaklist[order(abs(peaklist[, "mz"] - 265.13))[2],]
MSMS_mod <- manually_map(MSMS_mod, peaklist, order(abs(peaklist[, "mz"] - 265.13))[2], "265.1534798_249.80996_81")
## N-caffeoylputrescine 1/2, N'-N''-dicaffeoyl-spermidine, N'-N''-diferuloyl-spermidine, N'-N''-dihydrated-diferuloyl-spermidine,
## N'-N''-caffeoyl,feruloyl spermidine, N-feruloylspermidine 1/2, O-Coumaroylquinic acid 1/2, O-caffeoylquinic acid 1/2 were mapped by the rules
## N-coumaroylputrescine, N-coumaroylspermidine, cannot be mapped manually nor was it mapped by the rules

## truncate MSMS_mod: remove entries which have sum of 0 in the mentioned columns
## i.e. remove the ones that could not be mapped
MSMS_mod <- MSMS_mod[apply(data.matrix(MSMS_mod[, c("pc_group_m", "pc_group_m3", "pc_group_manual")]), 1, sum) > 0, ] ## pc_group_m4

## how many features were mapped (round 1, round 2, manual)?
length(unique(MSMS_mod[ ,"id"])) ## 309
## percentage: 
length(unique(MSMS_mod[ ,"id"])) / length(unique(MSMS[, "id"]))*100 ## 53.73%


## change entries of biological replicates to binary values:
## set the entries with less than 6 replicates to 0, 
## with more or equal than 6 replicates to 1
entriesC <- MSMS_mod[,which(colnames(MSMS_mod) == "att0"):which(colnames(MSMS_mod) == "x571260")]
entriesC[entriesC < 6] <- 0
entriesC[entriesC >= 6] <- 1
## set the entries with less than 3 replicates to 0, 
## with more or equal than 3 replicates to 1
entries72 <- MSMS_mod[,which(colnames(MSMS_mod) == "att72WOS"):which(colnames(MSMS_mod) == "x5712672MJ")]
entries72[entries72 < 3] <- 0
entries72[entries72 >= 3] <- 1

## write entries to MSMS_mod: replace by binary matrix entries
MSMS_mod[,which(colnames(MSMS_mod) == "att0"):which(colnames(MSMS_mod) == "x571260")] <- entriesC
MSMS_mod[,which(colnames(MSMS_mod) == "att72WOS"):which(colnames(MSMS_mod) == "x5712672MJ")] <- entries72

## write pc group of MSMS precursor group (id) in column pcgroup
MSMS_mod <- cbind(MSMS_mod, pc_group = unlist(lapply(strsplit(as.character(MSMS_mod[, "id"]), "_"), "[", 3)))

@

<<removeRedundantFeatures>>=
###########################################################
mappedPCGROUPS <- as.numeric(unique(c(MSMS_mod[, "pc_group_m"], MSMS_mod[, "pc_group_m3"], MSMS_mod[, "pc_group_manual"])))
mappedPCGROUPS <- mappedPCGROUPS[-which(mappedPCGROUPS == 0)]
mappedPCGROUPS_s <- sort(mappedPCGROUPS)

mapping_l <- setNames(as.list(rep(NA, length(mappedPCGROUPS_s))), mappedPCGROUPS_s)
## write to list names (mz_rt_pcgrou) of MSMS_mod
names(mapping_l)

for (i in names(mapping_l)) {
    mapping_l[[i]] <- as.character(unique(MSMS_mod[which(MSMS_mod[, c("pc_group_m", "pc_group_m3", "pc_group_manual")] == i, arr.ind = TRUE)[, "row"], "id"])) ## pc_group_m4
}

## reduce objects in mapping_l: calculate similarity and remove those objects which are highly
## similar to other objects, but have a lower precursor mz value
for (i in 1:length(mapping_l)) {
    print(i)
    entry <- mapping_l[[i]]
    ## maybe good example for publ: a_945.4703568/1083.689968 , a_989.506952/1082.036944 in pcgroup 5639

    if (length(entry) > 1 ) {
    msp <- convert2MSP(MSMS_mod[MSMS_mod[, "id"] %in% entry,], splitPattern = "_", rt = TRUE, splitIndRT = 2)
    binnedMSP <- binning(msp = msp, tol = 0.01)
    simMat <- createSimilarityMatrix(binnedMSP, m = 0, n = 2)
    diag(simMat) <- 0
    entry_nopcgroup <- lapply(strsplit(entry, "_"), function(x) paste(x[1], x[2], sep = "_"))

    while(max(simMat) >= 0.2 & length(msp) > 1) {
        max_combine <- which(simMat == max(simMat), arr.ind = TRUE)
        max_combine_rn <- rownames(max_combine)
        ## get the element with the higher m/z value
        max_combine_rn_cut <- unlist(lapply(strsplit(max_combine_rn, "_"), "[", 2))
        max_combine_rn_cut <- gsub("/", "_", max_combine_rn_cut) ## replace / by _
        max_combine_rn_ind <- which.max(unlist(lapply(strsplit(max_combine_rn_cut, split = "_"), "[", 1)))

        ## remove feature and write to entry
        entry <- entry[-which(entry_nopcgroup == max_combine_rn_cut[-max_combine_rn_ind])]
        entry_nopcgroup <- lapply(strsplit(entry, "_"), function(x) paste(x[1], x[2], sep = "_"))
        
        msp <- convert2MSP(MSMS_mod[MSMS_mod[, "id"] %in% entry,], splitPattern = "_", rt = TRUE, splitIndRT = 2)
        binnedMSP <- binning(msp = msp, tol = 0.1)
        if (length(msp) > 1) {
            simMat <- createSimilarityMatrix(binnedMSP, m = 0, n = 2)
            diag(simMat) <- 0
        }
    }
    mapping_l[[i]] <- entry
    }
}

mapping_l <- mapping_l[!names(mapping_l) == "4669"] ## remove, since same as 514 / "146.1646615_102.677472_21"
mapping_l[["55"]] <- mapping_l[["55"]][-5] ## remove, since same 839 / "149.1069172_73.855968_16"
mapping_l[["65"]] <- mapping_l[["65"]][-2] ## remove since same as 159 /  "248.0842095_1704.361952_3638"
mapping_l[["51"]] <- mapping_l[["51"]][-5] ## remove, since same as 31 /  "252.1411109_137.171944_12"
mapping_l <- mapping_l[!names(mapping_l) == "869"] ## remove, since same as 868 / "253.1532484_129.051952_2071" 
mapping_l[["148"]] <- mapping_l[["148"]][-2] ## remove, since same as 1423 / "280.8179863_67.744984_26" 
mapping_l[["9"]] <- mapping_l[["9"]][-2] ## remove, since same as 52 / "308.0906024_99.919984_6"   
mapping_l <- mapping_l[!names(mapping_l) == "2689"] ## remove, since same as 6 /  "308.1960639_423.60948_8"
mapping_l[["51"]] <- mapping_l[["51"]][-5] ## remove since same as 5274 / "322.2118106_133.303968_32"
mapping_l[["2"]] <- mapping_l[["2"]][-8] ## remove, since same as 337 / "322.9704645_81.080944_242" 
mapping_l <- mapping_l[!names(mapping_l) == "4237"] ## remove, since same as 144 / "361.0893436_485.004976_87"
mapping_l[["1673"]] <- mapping_l[["1673"]][-1] ## remove, since same as 553 / "365.1044469_71.277952_15"
mapping_l[["3"]] <- mapping_l[["3"]][-5] ## remove, since same as 3108 /  "377.0844229_393.85496_14"
mapping_l[["3"]] <- mapping_l[["3"]][-6] ## remove, since same as 5498 / "468.2134552_425.810976_3750"
mapping_l[["1673"]] <- mapping_l[["1673"]][-1] ## remove since same as 3270 / "482.0304547_70.702944_15"
mapping_l <- mapping_l[!names(mapping_l) == "149"] ## remove, since same as 57 / "539.1162839_640.079952_90" 
mapping_l[["55"]] <- mapping_l[["55"]][-4] ## remove, since same as 1683 / "582.9825077_71.292448_15"
mapping_l[["94"]] <- mapping_l[["94"]][-10] ## remove, since same as 5172 / "654.8120727_62.199984_1613"
mapping_l[["1630"]] <- mapping_l[["1630"]][-2] ## remove, since same as 4491 /  "659.2272162_2616.72348_111" 
mapping_l[["3"]] <- mapping_l[["3"]][-4] ## remove since same as 3114 / "731.181377_333.20896_20"
mapping_l[["4826"]] <- mapping_l[["4826"]][-2] ## remove, since same as 3224 / "792.5595991_2501.670488_2893"
mapping_l <- mapping_l[!names(mapping_l) == "1655"] ## remove, since same as 712 /  "800.5249389_2563.541496_84"
mapping_l <- mapping_l[!names(mapping_l) == "5529"] ## remove, since same as 74 /  "902.4113684_1042.403968_2513" 
mapping_l <- mapping_l[!names(mapping_l) == "5697"] ## remove since same as 3946 / "903.4145449_1044.230976_120"
mapping_l <- mapping_l[!names(mapping_l) == "5646"] ## remove as same as 2912 / "989.506952_1082.036944_2851" 


## write to new peaklist: peaklist_mapped
peaklist_mapped <- matrix(ncol = dim(peaklist)[2], nrow = 0); colnames(peaklist_mapped) <- colnames(peaklist)
for (i in names(mapping_l)) {
    newentry <- peaklist[which(peaklist[, "pcgroup"] == i),]
    mapped_feat_length <- length(mapping_l[[i]])
    newentry_rep <- apply(newentry, 2, rep, mapped_feat_length)
    ## modify column pcgroup: count from 1:mapped_feat_length and paste to pcgroup
    if (mapped_feat_length > 1) {
        newentry_rep[, "pcgroup"] <- unlist(
            lapply(1:mapped_feat_length, function(x) paste(newentry[, "pcgroup"], x, sep = "_")))}
    peaklist_mapped <- rbind(peaklist_mapped, newentry_rep)
}

peaklist_mapped2 <- matrix(ncol = dim(peaklist2)[2], nrow = 0); colnames(peaklist_mapped2) <- colnames(peaklist2)
for (i in names(mapping_l)) {
    newentry <- peaklist2[which(peaklist2[, "pcgroup"] == i),]
    mapped_feat_length <- length(mapping_l[[i]])
    newentry_rep <- apply(newentry, 2, rep, mapped_feat_length)
    ## modify column pcgroup: count from 1:mapped_feat_length and paste to pcgroup
    if (mapped_feat_length > 1) {
        newentry_rep[, "pcgroup"] <- unlist(
            lapply(1:mapped_feat_length, function(x) paste(newentry[, "pcgroup"], x, sep = "_")))}
    peaklist_mapped2 <- rbind(peaklist_mapped2, newentry_rep)
}

## truncate MSMS_mod 
MSMS_mod <- MSMS_mod[MSMS_mod[, "id"] %in% unlist(mapping_l),]


write.table(MSMS_mod[which(MSMS_mod[, "att0"] == 0 & MSMS_mod[, "obt0"] == 0 & MSMS_mod[, "att72WOS"] == 0 & MSMS_mod[, "obt72WOS"] == 0 & MSMS_mod[, "att72MJ"] == 0 & MSMS_mod[, "obt72MJ"] == 0 ), c("mz", "rt", "intensity", "id", "att0", "obt0", "clev0", "quad0", "x10270", "x571260", "att72WOS", 
         "obt72WOS", "clev72WOS", "quad72WOS", "x102772WOS", "x5712672WOS", "att72MJ", "obt72MJ", "clev72MJ",
         "quad72MJ", "x102772MJ", "x5712672MJ")], file = "metabolic_innovations.lst", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)

@


<<barplot>>=
setwd("/home/thomas/Documents/Publikationen/paper_allotetraploid/")
## how many metabolites are found in each species?
MSMS_mod_i <- MSMS_mod[, c("mapped1WOS", "mapped2WOS", "mapped3WOS", "mappedManualWOS")]
MSMS_mod_i <- matrix(as.numeric(c(as.character(MSMS_mod_i[,1]), as.character(MSMS_mod_i[,2]), as.character(MSMS_mod_i[,3]), as.character(MSMS_mod_i[,4]))), nrow = nrow(MSMS_mod_i))


uniquePrecursor <- unique(MSMS_mod[, "id"])

## get first row entries with unique precursor
indsMSMS <- match(uniquePrecursor, MSMS_mod[, "id"])

## how many metabolites are found in each species?
write.table(
rbind(
"control" = apply(data.matrix(MSMS_mod[indsMSMS, c("att0", "obt0","clev0","quad0","x10270","x571260")]), 2, sum),
"WOS72" = apply(data.matrix(MSMS_mod[indsMSMS, c("att72WOS", "obt72WOS", "clev72WOS", "quad72WOS", "x102772WOS", "x5712672WOS")]), 2, sum),
"MJ72" = apply(data.matrix(MSMS_mod[indsMSMS, c("att72MJ", "obt72MJ", "clev72MJ", "quad72MJ", "x102772MJ", "x5712672MJ")]), 2, sum)
), file = "number_mapped_metabolites.txt", sep = "\t", row.names = T, col.names = T, quote = FALSE)

## get pc_group for C, WOS and MeJA
## C
att0 <- unique(MSMS_mod[which(MSMS_mod[, "att0"] == 1), "id"])
obt0 <- unique(MSMS_mod[which(MSMS_mod[, "obt0"] == 1), "id"])
clev0 <- unique(MSMS_mod[which(MSMS_mod[, "clev0"] == 1), "id"])
quad0 <- unique(MSMS_mod[which(MSMS_mod[, "quad0"] == 1), "id"])
x10270 <- unique(MSMS_mod[which(MSMS_mod[, "x10270"] == 1), "id"])
x571260 <- unique(MSMS_mod[which(MSMS_mod[, "x571260"] == 1), "id"])
## WOS
att72WOS <- unique(MSMS_mod[which(MSMS_mod[, "att72WOS"] == 1), "id"])
obt72WOS <- unique(MSMS_mod[which(MSMS_mod[, "obt72WOS"] == 1), "id"])
clev72WOS <- unique(MSMS_mod[which(MSMS_mod[, "clev72WOS"] == 1), "id"])
quad72WOS <- unique(MSMS_mod[which(MSMS_mod[, "quad72WOS"] == 1), "id"])
x102772WOS <- unique(MSMS_mod[which(MSMS_mod[, "x102772WOS"] == 1), "id"])
x5712672WOS <- unique(MSMS_mod[which(MSMS_mod[, "x5712672WOS"] == 1), "id"])
## MJ
att72MJ <- unique(MSMS_mod[which(MSMS_mod[, "att72MJ"] == 1), "id"])
obt72MJ <- unique(MSMS_mod[which(MSMS_mod[, "obt72MJ"] == 1), "id"])
clev72MJ <- unique(MSMS_mod[which(MSMS_mod[, "clev72MJ"] == 1), "id"])
quad72MJ <- unique(MSMS_mod[which(MSMS_mod[, "quad72MJ"] == 1), "id"])
x102772MJ <- unique(MSMS_mod[which(MSMS_mod[, "x102772MJ"] == 1), "id"])
x5712672MJ <- unique(MSMS_mod[which(MSMS_mod[, "x5712672MJ"] == 1), "id"])


library(VennDiagram)
AttObtOverlap0h <- calculate.overlap(list("N. attenuata" = att0, "N. obtusifolia" =obt0))
NaNo0 <- length(AttObtOverlap0h$a3) ## shared with Na, No
Na0 <- length(AttObtOverlap0h$a1) - NaNo0 ## total number of N. attenuata
No0 <- length(AttObtOverlap0h$a2) - NaNo0 ## total number of N. obtusifolia
AttObtOverlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                           "N. obtusifolia" = obt72WOS))
NaNo72 <- length(AttObtOverlap72h$a3) ## shared with Na, No
Na72 <- length(AttObtOverlap72h$a1) - NaNo72 ## total number of N. attenuata
No72 <- length(AttObtOverlap72h$a2) - NaNo72 ## total number of N. obtusifolia
AttObtOverlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                             "N. obtusifolia" = obt72MJ))
NaNo72MJ <- length(AttObtOverlap72hMJ$a3) ## shared with Na, No
Na72MJ <- length(AttObtOverlap72hMJ$a1) - NaNo72MJ ## total number of N. attenuata
No72MJ <- length(AttObtOverlap72hMJ$a2) - NaNo72MJ ## total number of N. obtusifolia

## N. clev
AttObtClevOverlap0h <- calculate.overlap(list("N. attenuata" = att0, 
                                              "N. obtusifolia" = obt0,
                                              "N. clevelandii" = clev0,
                                              "N. quadrivalvis" = quad0
                                             ))
pdf("N_clev_control_venn.pdf"); grid.draw(venn.diagram(list("N. att" = att0, "N. obt" = obt0, "N.clev" = clev0, "N. quad" = quad0), filename = NULL) ); dev.off()
ClevNaNo0 <- length(AttObtClevOverlap0h$a6) + length(AttObtClevOverlap0h$a12) ## shared with Na, No
ClevNa0 <- length(AttObtClevOverlap0h$a5) + length(AttObtClevOverlap0h$a4) ## shared exclusively with Na
ClevNo0 <- length(AttObtClevOverlap0h$a7) + length(AttObtClevOverlap0h$a13) ## shared with No
ClevNq0 <- length(AttObtClevOverlap0h$a2) ## shared with Nq
ClevNovel0 <- length(AttObtClevOverlap0h$a1)  ## novel
AttObtClevOverlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                               "N. obtusifolia" = obt72WOS,
                                               "N. clevelandii" = clev72WOS,
                                               "N. quadrivalvis" = quad72WOS))
pdf("N_clev_WOS72_venn.pdf"); grid.draw(venn.diagram(list("N. att" = att72WOS, "N. obt" = obt72WOS, "N.clev" = clev72WOS, "N. quad" = quad72WOS), filename = NULL) ); dev.off()
ClevNaNo72 <- length(AttObtClevOverlap72h$a6) + length(AttObtClevOverlap72h$a12) ## shared with Na, No
ClevNa72 <- length(AttObtClevOverlap72h$a5) + length(AttObtClevOverlap72h$a4) ## shared with Na
ClevNo72 <- length(AttObtClevOverlap72h$a7) + length(AttObtClevOverlap72h$a13) ## shared with No
ClevNq72 <- length(AttObtClevOverlap72h$a2) ## shared with Nq
ClevNovel72 <-length(AttObtClevOverlap72h$a1) ## novel
AttObtClevOverlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                                 "N. obtusifolia" = obt72MJ, 
                                                 "N. clevelandii" = clev72MJ,
                                                 "N. quadrivalvis" = quad72MJ)) 
pdf("N_clev_MJ72_venn.pdf");  grid.draw(venn.diagram(list("N. att" = att72MJ, "N. obt" = obt72MJ, "N.clev" = clev72MJ, "N. quad" = quad72MJ), filename = NULL) ); dev.off()
ClevNaNo72MJ <- length(AttObtClevOverlap72hMJ$a6) + length(AttObtClevOverlap72hMJ$a12) ## shared with Na, No 
ClevNa72MJ <- length(AttObtClevOverlap72hMJ$a5) + length(AttObtClevOverlap72hMJ$a4) ## shared with Na 
ClevNo72MJ <- length(AttObtClevOverlap72hMJ$a7) + length(AttObtClevOverlap72hMJ$a13) ## shared with No 
ClevNq72MJ <- length(AttObtClevOverlap72hMJ$a2) ## shared with Nq
ClevNovel72MJ <- length(AttObtClevOverlap72hMJ$a1)  ## novel 

## N. quad
AttObtQuadOverlap0h <- calculate.overlap(list("N. attenuata" = att0, 
                                              "N. obtusifolia" = obt0,
                                              "N. quadrivalvis" = quad0,
                                              "N. clevelandii" = clev0))
pdf("N_quad_control_venn.pdf"); grid.draw(venn.diagram(list("N. att" = att0, "N. obt" = obt0, "N.clev" = clev0, "N. quad" = quad0), filename = NULL) ); dev.off()
QuadNaNo0 <- length(AttObtQuadOverlap0h$a6) + length(AttObtQuadOverlap0h$a12) ## shared with Na, No
QuadNa0 <- length(AttObtQuadOverlap0h$a5) + length(AttObtQuadOverlap0h$a4) ## shared with Na
QuadNo0 <- length(AttObtQuadOverlap0h$a7) + length(AttObtQuadOverlap0h$a13) ## shared with No
QuadNc0 <- length(AttObtQuadOverlap0h$a2) ## shared with Nc
QuadNovel0 <- length(AttObtQuadOverlap0h$a1)  ## novel
AttObtQuadOverlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                               "N. obtusifolia" = obt72WOS,
                                               "N. quadrivalvis" = quad72WOS,
                                                "N. clevelandii" = clev72WOS))
pdf("N_quad_WOS72_venn.pdf"); grid.draw(venn.diagram(list("N. att" = att72WOS, "N. obt" = obt72WOS, "N.clev" = clev72WOS, "N. quad" = quad72WOS), filename = NULL) ); dev.off()
QuadNaNo72 <- length(AttObtQuadOverlap72h$a6) + length(AttObtQuadOverlap72h$a12) ## shared with Na, No
QuadNa72 <- length(AttObtQuadOverlap72h$a4) + length(AttObtQuadOverlap72h$a5) ## shared with Na
QuadNo72 <- length(AttObtQuadOverlap72h$a7) + length(AttObtQuadOverlap72h$a13) ## shared with No
QuadNc72 <- length(AttObtQuadOverlap72h$a2) ## shared with Nc
QuadNovel72 <- length(AttObtQuadOverlap72h$a1) ## novel
AttObtQuadOverlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                                 "N. obtusifolia" = obt72MJ,
                                                 "N. quadrivalvis" = quad72MJ,
                                                 "N. clevelandii" = clev72MJ))
pdf("N_quad_MJ72_venn.pdf"); grid.draw(venn.diagram(list("N. att" = att72MJ, "N. obt" = obt72MJ, "N.clev" = clev72MJ, "N. quad" = quad72MJ), filename = NULL) ); dev.off()
QuadNaNo72MJ <- length(AttObtQuadOverlap72hMJ$a6) +  length(AttObtQuadOverlap72hMJ$a12) ## shared with Na, No
QuadNa72MJ <- length(AttObtQuadOverlap72hMJ$a4)+  length(AttObtQuadOverlap72hMJ$a5)  ## shared with Na
QuadNo72MJ <- length(AttObtQuadOverlap72hMJ$a7) +  length(AttObtQuadOverlap72hMJ$a13) ## shared with No
QuadNc72MJ <-  length(AttObtQuadOverlap72hMJ$a2) ## shared with Nc 
QuadNovel72MJ <- length(AttObtQuadOverlap72hMJ$a1) ## novel

## N. xobt1027
AttObtX1027Overlap0h <- calculate.overlap(list("N. attenuata" = att0, 
                                               "N. obtusifolia" = obt0,
                                               "N. x 1027" = x10270, 
                                               "N. x 57126" = x571260))
pdf("N_x1027_control_venn.pdf"); grid.draw(venn.diagram(list("N. att" = att0, "N. obt" = obt0, "N.x1027" = x10270, "N. x57126" = x571260), filename = NULL) ); dev.off()
X1027NaNo0 <- length(AttObtX1027Overlap0h$a6) + length(AttObtX1027Overlap0h$a12) ## shared with Na, No
X1027Na0 <- length(AttObtX1027Overlap0h$a4) + length(AttObtX1027Overlap0h$a5 )## shared with Na
X1027No0 <- length(AttObtX1027Overlap0h$a7) + length(AttObtX1027Overlap0h$a13)## shared with No
X1027571260 <- length(AttObtX1027Overlap0h$a2) ## shared with x57126 
X1027Novel0 <- length(AttObtX1027Overlap0h$a1) ## novel
AttObtX1027Overlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                                "N. obtusifolia" = obt72WOS,
                                                "N. x 1027" = x102772WOS,
                                                "N. x 57126" = x5712672WOS))
pdf("N_x1027_WOS72_venn.pdf");  grid.draw(venn.diagram(list("N. att" = att72WOS, "N. obt" = obt72WOS, "N.x1027" = x102772WOS, "N. x57126" = x5712672WOS), filename = NULL) ); dev.off()
X1027NaNo72 <- length(AttObtX1027Overlap72h$a6) + length(AttObtX1027Overlap72h$a12) ## shared with Na, No
X1027Na72 <- length(AttObtX1027Overlap72h$a4) + length(AttObtX1027Overlap72h$a5) ## shared with Na
X1027No72 <- length(AttObtX1027Overlap72h$a7) + length(AttObtX1027Overlap72h$a13)  ## shared with No
X10275712672 <- length(AttObtX1027Overlap72h$a2) ## shared with x57126 
X1027Novel72 <- length(AttObtX1027Overlap72h$a1) ## novel
AttObtX1027Overlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                                  "N. obtusifolia" = obt72MJ,
                                                  "N. x 1027" = x102772MJ,
                                                  "N. x 57126" = x5712672MJ))
pdf("N_x1027_MJ72_venn.pdf");  grid.draw(venn.diagram(list("N. att" = att72MJ, "N. obt" = obt72MJ, "N.x1027" = x102772MJ, "N. x57126" = x5712672MJ), filename = NULL) ); dev.off()
X1027NaNo72MJ <- length(AttObtX1027Overlap72hMJ$a6) + length(AttObtX1027Overlap72hMJ$a12) ## shared with Na, No
X1027Na72MJ <- length(AttObtX1027Overlap72hMJ$a4) + length(AttObtX1027Overlap72hMJ$a5) ## shared with Na
X1027No72MJ <- length(AttObtX1027Overlap72hMJ$a7) + length(AttObtX1027Overlap72hMJ$a13) ## shared with No
X10275712672MJ <- length(AttObtX1027Overlap72hMJ$a2) ## shared with x57126 
X1027Novel72MJ <- length(AttObtX1027Overlap72hMJ$a1) ## novel

## N. xobt57126
AttObtX57126Overlap0h <- calculate.overlap(list("N. attenuata" = att0, 
                                                "N. obtusifolia" = obt0,
                                                "N. x 57126" = x571260,
                                                "N. x 1027" = x10270))
pdf("N_x57126_control_venn.pdf"); grid.draw(venn.diagram(list("N. att" = att0, "N. obt" = obt0, "N.x1027" = x10270, "N. x57126" = x571260), filename = NULL) ); dev.off()
X57126NaNo0 <- length(AttObtX57126Overlap0h$a6) + length(AttObtX57126Overlap0h$a12) ## shared with Na, No
X57126Na0 <- length(AttObtX57126Overlap0h$a4) + length(AttObtX57126Overlap0h$a5)## shared with Na
X57126No0 <- length(AttObtX57126Overlap0h$a7) + length(AttObtX57126Overlap0h$a13) ## shared with No
X5712610270 <- length(AttObtX57126Overlap0h$a2) ## shared with x1027
X57126Novel0 <- length(AttObtX57126Overlap0h$a1) ## novel
AttObtX57126Overlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                                 "N. obtusifolia" = obt72WOS,
                                                 "N. x 57126" = x5712672WOS,
                                                 "N. x 1027" = x102772WOS))
pdf("N_x57126_WOS72_venn.pdf"); grid.draw(venn.diagram(list("N. att" = att72WOS, "N. obt" = obt72WOS, "N.x1027" = x102772WOS, "N. x57126" = x5712672WOS), filename = NULL) ); dev.off()
X57126NaNo72 <- length(AttObtX57126Overlap72h$a6) + length(AttObtX57126Overlap72h$a12) ## shared with Na, No
X57126Na72 <- length(AttObtX57126Overlap72h$a4) + length(AttObtX57126Overlap72h$a5)  ## shared with Na
X57126No72 <- length(AttObtX57126Overlap72h$a7) + length(AttObtX57126Overlap72h$a13) ## shared with No
X57126102772 <- length(AttObtX57126Overlap72h$a2) ## shared with x1027
X57126Novel72 <- length(AttObtX57126Overlap72h$a1) ## novel
AttObtX57126Overlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                                   "N. obtusifolia" = obt72MJ,
                                                   "N. x 57126" = x5712672MJ,
                                                   "N. x 1027" = x102772MJ))
pdf("N_x57126_MJ72_venn.pdf");  grid.draw(venn.diagram(list("N. att" = att72MJ, "N. obt" = obt72MJ, "N.x1027" = x102772MJ, "N. x57126" = x5712672MJ), filename = NULL) ); dev.off()
X57126NaNo72MJ <- length(AttObtX57126Overlap72hMJ$a6) + length(AttObtX57126Overlap72hMJ$a12) ## shared with Na, No
X57126Na72MJ <- length(AttObtX57126Overlap72hMJ$a4) + length(AttObtX57126Overlap72hMJ$a5)  ## shared with Na
X57126No72MJ <- length(AttObtX57126Overlap72hMJ$a7) + length(AttObtX57126Overlap72hMJ$a13) ## shared with No
X57126102772MJ <- length(AttObtX57126Overlap72hMJ$a2) ## shared with x1027
X57126Novel72MJ <- length(AttObtX57126Overlap72hMJ$a1) ## novel

df <- data.frame(metabolites = c(Na0, NaNo0, Na72, NaNo72, Na72MJ, NaNo72MJ,
                                 No0, NaNo0, No72, NaNo72, No72MJ, NaNo72MJ,
                                 ClevNovel0, ClevNq0, ClevNo0, ClevNa0, ClevNaNo0, 
                                 ClevNovel72, ClevNq72, ClevNo72, ClevNa72, ClevNaNo72,
                                 ClevNovel72MJ, ClevNq72MJ, ClevNo72MJ, ClevNa72MJ, ClevNaNo72MJ,
                                 QuadNovel0, QuadNc0, QuadNo0, QuadNa0, QuadNaNo0,
                                 QuadNovel72, QuadNc72, QuadNo72, QuadNa72, QuadNaNo72,
                                 QuadNovel72MJ, QuadNc72MJ, QuadNo72MJ, QuadNa72MJ, QuadNaNo72MJ,
                                 X1027Novel0, X1027571260, X1027No0, X1027Na0, X1027NaNo0,
                                 X1027Novel72, X10275712672, X1027No72, X1027Na72, X1027NaNo72,
                                 X1027Novel72MJ, X10275712672MJ, X1027No72MJ, X1027Na72MJ, X1027NaNo72MJ,
                                 X57126Novel0, X5712610270, X57126No0, X57126Na0, X57126NaNo0,
                                 X57126Novel72, X57126102772, X57126No72, X57126Na72, X57126NaNo72,
                                 X57126Novel72MJ, X57126102772MJ, X57126No72MJ, X57126Na72MJ, X57126NaNo72MJ), 
                 groups = c(rep(c("N. attenuata", "N. attenuata / N. obtusifolia"), 3),
                            rep(c("N. obtusifolia", "N. attenuata / N. obtusifolia"), 3),
                            rep(c("N. clevelandii (novel)", "N. quadrivalvis","N. obtusifolia", "N. attenuata", "N. attenuata / N. obtusifolia"),3),
                            rep(c("N. quadrivalvis (novel)", "N. clevelandii","N. obtusifolia", "N. attenuata", "N. attenuata / N. obtusifolia"),3),
                            rep(c("N. x obtusiata 10/27 (novel)", "N. x obtusiata 57/126","N. obtusifolia", "N. attenuata", "N. attenuata / N. obtusifolia"),3),
                            rep(c("N. x obtusiata 57/126 (novel)", "N. x obtusiata 10/27","N. obtusifolia", "N. attenuata", "N. attenuata / N. obtusifolia"),3)), 
                 treatment = c(rep(c(rep("C", 2), rep("W+OS", 2), rep("MJ", 2)), 2),
                               rep(c(rep("C",5), rep("W+OS",5), rep("MJ",5)), 4)),
                 species = c(rep("N. attenuata", 6), rep("N. obtusifolia", 6), rep("N. clevelandii", 15), rep("N. quadrivalvis", 15), rep("N. x obtusiata 10/27", 15), rep("N. x obtusiata 57/126", 15)))

#df.melt <- melt(df)
df$treatment <- factor(x = df$treatment, levels = c("C", "W+OS", "MJ"), ordered  = TRUE)
#df.melt$groups <- factor(x = df.melt$groups, levels = c("N. attenuata", "N. otusifolia", "N. attenuata / N. obtusifolia","novel"), ordered = TRUE)
df$species <- factor(x = df$species, levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"), ordered = TRUE)
df$groups <- factor(x = df$groups, levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126", "N. clevelandii (novel)", "N. quadrivalvis (novel)", "N. x obtusiata 10/27 (novel)", "N. x obtusiata 57/126 (novel)", "N. attenuata / N. obtusifolia"), ordered = TRUE)
##df <- transform(df, groups = factor(groups, levels = c("Na", "No", "NaNo","novel")))
##df$groups <- reorder(df$groups, X = sort(df$groups))#, FUN = function(x) sort(x))
##attributes(df$groups) <- list("No"= 2, "NaNo" = 3, "Na" = 1, "novel" = 4)
library(ggplot2)
library(dplyr)
p <- ggplot(arrange(df, groups), aes(y = metabolites, x = treatment, fill = groups)) + 
    geom_bar(stat="identity") + 
    scale_fill_manual(values = c(rep(c("red", "blue", "orange", "seagreen4", "plum2", "slateblue", "orange", "seagreen4", "plum2", "slateblue", "grey" ), 3))) + 
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    labs(x = "", y = "") + guides(fill = guide_legend(title="metabolites originating from")) + 
    theme(axis.text.y = element_text(size=12), axis.title = element_text(size=16), 
          axis.text.x = element_text(size = 8),
          legend.title = element_text(size = 12 ), strip.text=element_text(size=7), 
          legend.text = element_text(face = "italic", size = 12)) 

ggsave(filename = "barplot_control_WOS_MJ_shared_novel.pdf", plot = p, 
       device = "pdf", width = 10, height = 8.36)
@

<<inducibility>>=
## get inducibility for W+OS and MeJA

## function to get logical values that indicate if ion is found in spectra
Compounds_bin <- function(peaklist2, ind, cols, threshold) {
    features <- apply(peaklist2[, cols][, ind], 1, table, useNA = "always")
    #features <- peaklist[, paste0(spec, time, mode)]
    #features <- ifelse(features <= threshold, FALSE, TRUE)
    features_l <- lapply(1:length(features), function(x) as.vector(features[[x]][length(features[[x]])]))
    binary <- logical(dim(peaklist2)[1])
    indFeatures <- which(unlist(features_l) <= threshold)
    binary[indFeatures] <- TRUE
    return(binary)
}
## synthetised ones for att0
Compounds_bin(peaklist_mapped2, ind = 1:5, cols = 26:145, threshold = 2)
Compounds_bin(peaklist_mapped2, ind = 6:10, cols = 26:145, threshold = 2)


inducibility <- function(peaklist, peaklist2, ind0 = 1:5, ind72 = 6:10, cols = 26:145, paired = TRUE) {
    if (length(ind0) != 5) stop("length of ind0 not 5")
    if (length(ind72) != 5) stop("length of ind72 not 5")
    
    geno_bin_0 <- Compounds_bin(peaklist2, ind = ind0, cols = cols, threshold = 2)
    geno_bin_72 <- Compounds_bin(peaklist2, ind = ind72, cols = cols, threshold = 2)
    
    
    ## pc group for genotype
    pcgroupGenotype <- as.vector(peaklist2[, "pcgroup"])
    #PCGROUP <- unique(pcgroupGenotype)
    
    
    #pcgroup0 <- MSMS[which(MSMS[, paste0(spec, "0")] == 1), "pc_group"]
    #PCGROUP_uni_0 <- unique(pcgroup0)
    #pcgroup72 <- MSMS[which(MSMS[, paste0(spec, "72", mode)] == 1), "pc_group"]
    #PCGROUP_uni_72 <- unique(pcgroup72)
    pcgroup0 <- as.vector(peaklist[geno_bin_0, "pcgroup"])
    PCGROUP_uni_0 <- unique(pcgroup0)
    pcgroup72 <- as.vector(peaklist[geno_bin_72, "pcgroup"])
    PCGROUP_uni_72 <- unique(pcgroup72)
    
    ## truncate peaklist
    peaklist0 <- peaklist[, cols[ ind0 ]]
    mode(peaklist0) <- "numeric"
    peaklist72 <- peaklist[, cols [ind72 ]]
    mode(peaklist72) <- "numeric"
    
    
    # pcgroupGenotype <- as.numeric(pcgroupGenotype)
    
    ## create inducibilityGenotype, a vector to store if a metabolite (i.e. pcgroup) is induced
    # inducibilityGenotype <- numeric(length(PCGROUP))
    # pvalueGenotype <- numeric(length(PCGROUP))
    # fc <- numeric(length(PCGROUP))
   
    
     #times_pcgroup_uni_72 <- as.numeric(unlist(lapply(strsplit(PCGROUP_uni_72, split = "_"), "[", 1)))
   # times_pcgroupGenotype <- as.numeric(unlist(lapply(strsplit(pcgroupGenotype, split = "_"), "[", 1)))
    ##inducibilityGenotype_72 <- rep(NA, max(c(as.numeric(unique(pcgroupGenotype)), PCGROUP_uni_72)))
    
    
    ## combine pcs from two timepoints
    joined_pcs <- sort(union(PCGROUP_uni_0, PCGROUP_uni_72))
    
    inducibilityGenotype_72 <- rep(NA, length(joined_pcs))
    names(inducibilityGenotype_72) <- joined_pcs
    
    pvalueGenotype_72 <- rep(NA, length(joined_pcs))
    names(pvalueGenotype_72) <- joined_pcs
    
    fc <- rep(NA, length(joined_pcs)) 
    names(fc) <- joined_pcs
    
    #inducibilityGenotype_72 <- rep(NA, max(times_pcgroupGenotype))
    ## 
    #pvalueGenotype_72 <- rep(NA, length(inducibilityGenotype_72))
    #fc <- rep(NA, length(inducibilityGenotype_72))
    
    for (i in joined_pcs) { ## 1, 2, ... length(PCGROUP) ## was for(i in 1:length(PCGROUP))
        inds <- which(pcgroupGenotype == i) 
        ## truncate inds so that only those inds are used which actually show up in peaklist for
        ## 72 h time point
        inds <- inds[geno_bin_72[inds]] 
        
        pvalues <- numeric(length(inds))
        peak0 <- as.matrix(peaklist0[inds, ])
        peak72 <- as.matrix(peaklist72[inds, ])
            
        ## fold change
        meanPeak0 <- as.vector(apply(peak0, 1, mean, na.rm = TRUE))
        meanPeak0[meanPeak0 == 0] <- 0.00001
        meanPeak72 <- as.vector(apply(peak72, 1, mean, na.rm = TRUE))
        meanFoldChange <- mean(meanPeak72 / meanPeak0)
        fc[i] <- meanFoldChange
            
        if (length(inds) != 0) {
        test <- lapply(1:length(inds), FUN = function(x) {
            ## cond 1, test if we can do shapiro.test, if not assume that data is not normally-distributed
            cond1 <- if(inherits(try(shapiro.test(peak0[x,]), silent = TRUE), "try-error")) {0.01} else{shapiro.test(peak0[x,])$p.value}
            ## cond 2, test if we can do shapiro.test, if not assume that data is not normally-distributed
            cond2 <- if(inherits(try(shapiro.test(peak72[x,]), silent= TRUE), "try-error")) {0.01} else{shapiro.test(peak72[x,])$p.value}
            if (cond1 > 0.05 & cond2 > 0.05) {
                t.test(peak0[x,], peak72[x,], alternative = "less", paired = paired)$p.value
            } else {
                if(inherits(try(wilcox.test(as.numeric(peak0[x,]), as.numeric(peak72[x,]), alternative = "less", paired = paired, exact = TRUE), silent = TRUE), "try-error")) {0.5} else{wilcox.test(as.numeric(peak0[x,]), as.numeric(peak72[x,]), alternative = "less", paired = paired, exact = TRUE)$p.value}}
                
            })
            test_unlist <- unlist(test)
            pvalues[test_unlist <= 0.05] <- TRUE
            if (sum(pvalues) / length(pvalues) >= 0.66) {
                inducibilityGenotype_72[i] <- TRUE
            } else {
                inducibilityGenotype_72[i] <- FALSE}
                pvalueGenotype_72[i] <- mean(test_unlist)
        }
        
        if (length(inds) == 0) pvalueGenotype_72[i] <- 0.5
        if (length(inds) == 0) inducibilityGenotype_72[i] <- FALSE
            
    }
    
    ## how many compounds are induced? -1 because of remaining NA value
    return(list(
        "percentInduced" = sum(inducibilityGenotype_72, na.rm = TRUE) / (length(unique(PCGROUP_uni_72))), 
        "pcgroupGenotype_0" = sort(PCGROUP_uni_0),
        "pcgroupGenotype_72" = sort(PCGROUP_uni_72),
        "inducibility" = inducibilityGenotype_72,
        "p_values" = pvalueGenotype_72, 
        "fold_change" = fc))
}



# peaklistWOS <- truncatePeaklist(peaklist_mapped, MSMS_mod, mode = "WOS")
# dim(peaklistWOS)
# 
# peaklistMJ <- truncatePeaklist(peaklist, MSMS_mod, mode = "MJ")
# dim(peaklistMJ)
load("bootstrapping_WOS.RData")
cols <- 26:145
##inducedAtt <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 1:5, ind72 = 6:10, cols = cols, paired = TRUE)
inducedAtt[[1]]
numMetAttWOS <- length(unique(inducedAtt[[3]]))
##inducedObt <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 11:15, ind72 = 16:20, cols = cols, paired = TRUE)
inducedObt[[1]]
numMetObtWOS <- length(unique(inducedObt[[3]]))
##inducedClev <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 21:25, ind72 = 26:30, cols = cols, paired = TRUE)
inducedClev[[1]]
numMetClevWOS <- length(unique(inducedClev[[3]]))
##inducedQuad <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 31:35, ind72 = 36:40, cols = cols, paired = TRUE)
inducedQuad[[1]]
numMetQuadWOS <- length(unique(inducedQuad[[3]]))
##inducedX1027 <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 41:45, ind72 = 46:50, cols = cols, paired = TRUE)
inducedX1027[[1]]
numMetX1027WOS <- length(unique(inducedX1027[[3]]))
##inducedX57126 <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = c(51:54, 51), ind72 = c(56:59, 56), cols = cols, paired = TRUE) ## last was not induced
inducedX57126[[1]]
numMetX57126WOS <- length(unique(inducedX57126[[3]]))

## bootstrapping to check if number of metabolites correlates negatively with inducibility
bs15 <- lapply(1:100, function (x) sample(1:5, 5, replace = T))
bs610 <- lapply(bs15, function (x) x + 5)
indAttbs <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs15[[x]], ind72 = bs610[[x]], cols = cols, paired = TRUE))
indAttbs_numInd <- unlist(lapply(indAttbs, function(x) sum(x[[4]], na.rm = TRUE)))
indAttbs_numTot <- unlist(lapply(indAttbs, function(x) length(unique(x[[3]]))))

bs1115 <- lapply(1:100, function (x) sample(11:15, 5, replace = T))
bs1620 <- lapply(bs1115, function (x) x + 5)
indObtbs <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs1115[[x]], ind72 = bs1620[[x]], cols = cols, paired = TRUE))
indObtbs_numInd <- unlist(lapply(indObtbs, function(x) sum(x[[4]], na.rm = TRUE)))
indObtbs_numTot <- unlist(lapply(indObtbs, function(x) length(unique(x[[3]]))))

bs2125 <- lapply(1:100, function (x) sample(21:25, 5, replace = T))
bs2630 <- lapply(bs2125, function (x) x + 5)
indClevbs <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs2125[[x]], ind72 = bs2630[[x]], cols = cols, paired = TRUE))
indClevbs_numInd <- unlist(lapply(indClevbs, function(x) sum(x[[4]], na.rm = TRUE)))
indClevbs_numTot <- unlist(lapply(indClevbs, function(x) length(unique(x[[3]]))))

bs3135 <- lapply(1:100, function (x) sample(31:35, 5, replace = T))
bs3640 <- lapply(bs3135, function (x) x + 5)
indQuadbs <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs3135[[x]], ind72 = bs3640[[x]], cols = cols, paired = TRUE))
indQuadbs_numInd <- unlist(lapply(indQuadbs, function(x) sum(x[[4]], na.rm = TRUE)))
indQuadbs_numTot <- unlist(lapply(indQuadbs, function(x) length(unique(x[[3]]))))

bs4145 <- lapply(1:100, function (x) sample(41:45, 5, replace = T))
bs4650 <- lapply(bs4145, function (x) x + 5)
indX1027bs <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs4145[[x]], ind72 = bs4650[[x]], cols = cols, paired = TRUE))
indX1027bs_numInd <- unlist(lapply(indX1027bs, function(x) sum(x[[4]], na.rm = TRUE)))
indX1027bs_numTot <- unlist(lapply(indX1027bs, function(x) length(unique(x[[3]]))))

bs5155 <- lapply(1:100, function (x) sample(51:54, 5, replace = T)) ## last not induced
bs5660 <- lapply(bs5155, function (x) x + 5)
indX57126bs <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs5155[[x]], ind72 = bs5660[[x]], cols = cols, paired = TRUE))
indX57126bs_numInd <- unlist(lapply(indX57126bs, function(x) sum(x[[4]], na.rm = TRUE)))
indX57126bs_numTot <- unlist(lapply(indX57126bs, function(x) length(unique(x[[3]]))))

## save to bootstrapping_WOS.RData
save(inducedAtt, inducedObt, inducedClev, inducedQuad, inducedX1027, inducedX57126,
     indAttbs, indObtbs, indClevbs, indQuadbs, indX1027bs, indX57126bs,
     indAttbs_numInd, indObtbs_numInd, indClevbs_numInd, indQuadbs_numInd, indX1027bs_numInd, 
     indX57126bs_numInd, indAttbs_numTot, indObtbs_numTot, indClevbs_numTot, indQuadbs_numTot, 
     indX1027bs_numTot, indX57126bs_numTot, file = "bootstrapping_WOS.RData")

load("bootstrapping_WOS.RData")
## plotting

species <-  c("N. attenuata", "N. obtusifolia", "N. clevelandii", "N. quadrivalvis","N. x obtusiata 10/27", "N. x obtusiata 57/126")
dfWOS <- data.frame(species = species, 
                    total = c(numMetAttWOS, numMetObtWOS, numMetClevWOS, numMetQuadWOS, numMetX1027WOS, numMetX57126WOS),
                    induced = c(length(which(inducedAtt[[4]])), length(which(inducedObt[[4]])),
                                length(which(inducedClev[[4]])), length(which(inducedQuad[[4]])),
                                length(which(inducedX1027[[4]])), length(which(inducedX57126[[4]])))                               )
                    ##induced = c(inducedAtt[[1]], inducedObt[[1]], inducedClev[[1]], 
                    ##            inducedQuad[[1]], inducedX1027[[1]], inducedX57126[[1]]) * 100)
dfWOS$species <- factor(dfWOS$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
## plot
ggplot(dfWOS, aes(x=total, y = induced, color = species)) + 
    geom_point(shape = 1, size=5) + xlab("") + ylab("") +
    scale_colour_manual(values = colours) +  
    scale_y_continuous(limits = c(4, 45)) + scale_x_continuous(limits =  c(125, 155))+
    theme_bw() + 
    theme(legend.text = element_text(face = "italic"), 
          legend.title = element_blank(),
          legend.key = element_blank(),
          plot.background = element_blank(), 
          axis.text = element_text(size = 15)
          )


numberInducedWOS <- c(indAttbs_numInd, indObtbs_numInd, indClevbs_numInd, 
                      indQuadbs_numInd, indX1027bs_numInd, indX57126bs_numInd)
numberTotalWOS <- c(indAttbs_numTot, indObtbs_numTot, indClevbs_numTot, 
                    indQuadbs_numTot, indX1027bs_numTot, indX57126bs_numTot)


species <- c(rep("N. attenuata", 100), rep("N. obtusifolia", 100), rep("N. clevelandii", 100), 
             rep("N. quadrivalvis", 100), rep("N. x obtusiata 10/27", 100), rep("N. x obtusiata 57/126", 100))
dfWOSbs <- data.frame(species = species, total = numberTotalWOS, inducedPerc = numberInducedWOS) ## * 100)
dfWOSbs$species <- factor(dfWOSbs$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))


## plot
ggplot(dfWOSbs, aes(x=total, y = inducedPerc, color = species)) + 
    geom_point(shape = 1, size = 2) + 
    scale_y_continuous(limits = c(4, 80)) + scale_x_continuous(limits =  c(125, 155))+
    scale_colour_manual(values = colours) +
    theme_bw() + xlab("") + 
    ylab("") +
    theme(legend.text = element_text(face = "italic"), 
          legend.title = element_blank(),
          legend.key = element_blank(),
          plot.background = element_blank(), 
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.x = element_text(size = 15))

##plot(y = inducedTotal, x = numberTotalMJ, 
##     ylab = "number of induced / total metabolites", xlab = "number of total metabolites", 
##     col = c(rep("blue", 100), rep("red", 100), rep("green", 100), rep("yellow", 100), rep("darkgrey", 100), rep("lightgrey", 100)), main = "MJ bootstrapping", cex = 0.5, legend =)
dfWOSbs2 <- dfWOSbs

dfWOSbs2 <- cbind(dfWOSbs2, diploid = c(rep( "d", 200), rep("t" , 400)))
dfWOSbs2 <- cbind(dfWOSbs2, natural = c(rep( "d+n", 400), rep("s" , 200)))
dfWOSbs2 <- cbind(dfWOSbs2, synthetic = c(rep("d+s", 200), rep("n", 200), rep("d+s", 200)))

dfWOSbs2[, "species"] <- c(rep("diploid", 200), rep("natural", 200), rep("synthetic", 200))
##dfWOSbs2 <- cbind(dfWOSbs2, synthetic = rep( "d+s", 400)) 
dfWOSbs2 <- cbind(dfWOSbs2, pointshape = c(rep("c", 200), rep("b", 200), rep("a", 200)))
dfWOSbs2 <- cbind(dfWOSbs2, pointsize = rep(0.1, 600))
dfWOSbs2$species <- factor(dfWOSbs2$species)
colorPalette2 <- c("black", alpha("black", 0.8), alpha("darkolivegreen3", 1), alpha("purple1", 0.70), alpha("darkolivegreen3", 0.7), alpha("purple1", 0.60))
ggplot(dfWOSbs2, aes(x=total, y = inducedPerc, color=species)) + 
    geom_point(aes(shape=pointshape), show.legend = TRUE, size = 2) +
    theme_bw() + 
    xlab("") + 
    ylab("") +
    scale_colour_manual(values = colorPalette2) + 
    scale_shape_discrete(solid = FALSE, guide = FALSE) +
    scale_y_continuous(limits = c(4, 80)) + scale_x_continuous(limits =  c(125, 155))+
    geom_smooth(mapping = aes(x=total, y = inducedPerc, color = diploid), 
                method = lm, formula= y~x-1, data = dfWOSbs2[1:200, ], se =FALSE, size = 1.5) + 
    geom_smooth(mapping = aes(x=total, y=inducedPerc, color = natural), method = lm, formula= y~x-1, data = dfWOSbs2[1:400,], se = FALSE, size = 1.5) + 
    geom_smooth(mapping = aes(x=total, y=inducedPerc, color = synthetic), method = lm, formula= y~x-1, data = dfWOSbs2[c(1:200, 401:600),], se = FALSE, size = 1.5) + 
    scale_shape_manual(name = "species", labels = c( "synthetic", "natural", "diploid"), values = c(1, 2, 3)) +
    scale_colour_manual(values = colorPalette2, 
        guide =guide_legend(override.aes=list(labels = factor(c("d", "d+n", "d+s", "diploid", "natural", "synthetic"), levels = c("d", "d+n", "d+s", "diploid", "natural", "synthetic"), ordered=TRUE),  shape = c(NA, 0, NA, NA, 2, 1),
                                        linetype=c("solid", "blank", "solid","solid", "blank", "blank")))) +
    theme(legend.title = element_blank(),
          plot.background = element_blank(),
          legend.background = element_rect(colour=NA),
         legend.key.size =   unit(1.2, "lines"), 
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.x = element_text(size = 15))



##plot(x = numberTotalWOS, y = numberInducedWOS / numberTotalWOS, 
##     xlab = "number of total metabolites", ylab = "number of induced metabolites", main = "bootstrapping WOS",
##     col = c(rep("blue", 100), rep("red", 100), rep("green", 100), rep("yellow", 100), rep("darkgrey", 100), rep("lightgrey", 100)))
inducedTotal <- numberInducedWOS ##/ numberTotalWOS * 100
lmWOS_synthetic <- lm(inducedTotal[c(1:200, 401:600)] ~ numberTotalWOS[c(1:200, 401:600)] - 1)
lmWOS_natural <- lm(inducedTotal[1:400] ~ numberTotalWOS[1:400] - 1)
lmWOS_diploid <- lm(inducedTotal[1:200] ~ numberTotalWOS[1:200] - 1)


## do some statistical testing
indices200 <- lapply(1:100, function(x) sample(x = 1:200, size = 200, replace = TRUE))
##slopeAttObt <- lapply(indices200, function(x) lm(c(c(indAttbs_numInd, indObtbs_numInd)/c(indAttbs_numTot, indObtbs_numTot))[x] ~ c(indAttbs_numTot, indObtbs_numTot)[x] - 1)$coefficients)
slopeAttObt <- lapply(indices200, function(x) lm(c(indAttbs_numInd, indObtbs_numInd)[x] ~ c(indAttbs_numTot, indObtbs_numTot)[x] - 1)$coefficients)
indicesSynthetic <- lapply(1:100, function(x) sample(x = c(1:200, 401:600), size = 400, replace = TRUE))
indicesNatural <- lapply(1:100, function(x) sample(x = c(1:400), size = 400, replace = TRUE))
##slopeTotal <- lapply(indicesTotal, function(x) lm(c(numberInducedWOS / numberTotalWOS)[x] ~ numberTotalWOS[x] - 1)$coefficients)
slopeSynthetic <- lapply(indicesSynthetic, function(x) lm(c(numberInducedWOS)[x] ~ numberTotalWOS[x] - 1)$coefficients)
slopeNatural <- lapply(indicesNatural, function(x) lm(c(numberInducedWOS)[x] ~ numberTotalWOS[x] - 1)$coefficients)
##boxplot(unlist(slopeAttObt), unlist(slopeTotal))
ttestLM_diploid_synthetic <- t.test(unlist(slopeAttObt), unlist(slopeSynthetic), paired = FALSE, alternative = "two.sided")
ttestLM_diploid_natural <- t.test(unlist(slopeAttObt), unlist(slopeNatural), paired = FALSE, alternative = "two.sided")

@

<<inducibilityMJ,eval=TRUE,echo=FALSE, fig.show='hide',results='hide',warning=FALSE>>=
load("bootstrapping_MJ.RData")
## check genotypes for inducibility
##inducedAttMJ <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 61:65, ind72 = 66:70, cols = cols, paired = TRUE)
inducedAttMJ[[1]]
numMetAttMJ <- length(unique(inducedAttMJ[[3]]))
##inducedObtMJ <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 71:75, ind72 = 76:80, cols = cols, paired = TRUE)
inducedObtMJ[[1]]
numMetObtMJ <- length(unique(inducedObtMJ[[3]]))
##inducedClevMJ <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 81:85, ind72 = 86:90, cols = cols, paired = TRUE)
inducedClevMJ[[1]]
numMetClevMJ <- length(unique(inducedClevMJ[[3]]))
##inducedQuadMJ <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 91:95, ind72 = 96:100, cols = cols, paired = TRUE)
inducedQuadMJ[[1]]
numMetQuadMJ <- length(unique(inducedQuadMJ[[3]]))
##inducedX1027MJ <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 101:105, ind72 = 106:110, cols = cols, paired = TRUE)
inducedX1027MJ[[1]]
numMetX1027MJ <- length(unique(inducedX1027MJ[[3]]))
##inducedX57126MJ <- inducibility(peaklist_mapped, peaklist_mapped2, ind0 = 111:115, ind72 = 116:120, cols = cols, paired = TRUE)
inducedX57126MJ[[1]]
numMetX57126MJ <- length(unique(inducedX57126MJ[[3]]))

## bootstrapping to check if number of metabolites correlates negatively with inducibility
# bs6165 <- lapply(1:100, function (x) sample(61:65, 5, replace = T))
# bs6670 <- lapply(bs6165, function (x) x + 5)
# indAttbsMJ <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs6165[[x]], ind72 = bs6670[[x]], cols = cols, paired = TRUE))
# indAttbsMJ_numInd <- unlist(lapply(indAttbsMJ, function(x) sum(x[[4]], na.rm = TRUE)))
# indAttbsMJ_numTot <- unlist(lapply(indAttbsMJ, function(x) length(unique(x[[3]]))))
# 
# bs7175 <- lapply(1:100, function (x) sample(71:75, 5, replace = T))
# bs7680 <- lapply(bs7175, function (x) x + 5)
# indObtbsMJ <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs7175[[x]], ind72 = bs7680[[x]], cols = cols, paired = TRUE))
# indObtbsMJ_numInd <- unlist(lapply(indObtbsMJ, function(x) sum(x[[4]], na.rm = TRUE)))
# indObtbsMJ_numTot <- unlist(lapply(indObtbsMJ, function(x) length(unique(x[[3]]))))
# 
# bs8185 <- lapply(1:100, function (x) sample(81:85, 5, replace = T))
# bs8690 <- lapply(1:100, function (x) sample(86:90, 5, replace = T))
# indClevbsMJ <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs8185[[x]], ind72 = bs8690[[x]], cols = cols, paired = TRUE))
# indClevbsMJ_numInd <- unlist(lapply(indClevbsMJ, function(x) sum(x[[4]], na.rm = TRUE)))
# indClevbsMJ_numTot <- unlist(lapply(indClevbsMJ, function(x) length(unique(x[[3]]))))
# 
# bs9195 <- lapply(1:100, function (x) sample(91:95, 5, replace = T))
# bs96100 <- lapply(bs9195, function (x) x + 5)
# indQuadbsMJ <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs9195[[x]], ind72 = bs96100[[x]], cols = cols, paired = TRUE))
# indQuadbsMJ_numInd <- unlist(lapply(indQuadbsMJ, function(x) sum(x[[4]], na.rm = TRUE)))
# indQuadbsMJ_numTot <- unlist(lapply(indQuadbsMJ, function(x) length(unique(x[[3]]))))
# 
# bs101105 <- lapply(1:100, function (x) sample(101:105, 5, replace = T))
# bs106110 <- lapply(bs101105, function (x) x + 5)
# indX1027bsMJ <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs101105[[x]], ind72 = bs106110[[x]], cols = cols, paired = TRUE))
# indX1027bsMJ_numInd <- unlist(lapply(indX1027bsMJ, function(x) sum(x[[4]], na.rm = TRUE)))
# indX1027bsMJ_numTot <- unlist(lapply(indX1027bsMJ, function(x) length(unique(x[[3]]))))
# 
# bs111115 <- lapply(1:100, function (x) sample(111:115, 5, replace = T))
# bs116120 <- lapply(bs111115, function (x) x + 5)
# indX57126bsMJ <- lapply(1:100, function(x) inducibility(peaklist_mapped, peaklist_mapped2, ind0 = bs111115[[x]], ind72 = bs116120[[x]], cols = cols, paired = TRUE))
# indX57126bsMJ_numInd <- unlist(lapply(indX57126bsMJ, function(x) sum(x[[4]], na.rm = TRUE)))
# indX57126bsMJ_numTot <- unlist(lapply(indX57126bsMJ, function(x) length(unique(x[[3]]))))

## save to bootstrapping_MJ.RData
# save(inducedAttMJ, inducedObtMJ, inducedClevMJ, inducedQuadMJ, inducedX1027MJ, inducedX57126MJ,
#         indAttbsMJ_numInd, indAttbsMJ_numTot, indObtbsMJ_numInd, indObtbsMJ_numTot, 
#         indClevbsMJ_numInd, indClevbsMJ_numTot, indQuadbsMJ_numInd, indQuadbsMJ_numTot, 
#         indX1027bsMJ_numInd, indX1027bsMJ_numTot, indX57126bsMJ_numInd, indX57126bsMJ_numTot,
#     file = "bootstrapping_MJ.RData")

## plotting
species <-  c("N. attenuata", "N. obtusifolia", "N. clevelandii", "N. quadrivalvis","N. x obtusiata 10/27", "N. x obtusiata 57/126")
dfMJ <- data.frame(species = species, 
                    total = c(numMetAttMJ, numMetObtMJ, numMetClevMJ, numMetQuadMJ, numMetX1027MJ, numMetX57126MJ),
                   induced = c(length(which(inducedAttMJ[[4]])), length(which(inducedObtMJ[[4]])),
                               length(which(inducedClevMJ[[4]])), length(which(inducedQuadMJ[[4]])),
                               length(which(inducedX1027MJ[[4]])), length(which(inducedX57126MJ[[4]]))))
                    ##induced = c(inducedAttMJ[[1]], inducedObtMJ[[1]], inducedClevMJ[[1]], 
                    ##            inducedQuadMJ[[1]], inducedX1027MJ[[1]], inducedX57126MJ[[1]]) * 100)
dfMJ$species <- factor(dfMJ$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
## plot
ggplot(dfMJ, aes(x=total, y = induced, color = species)) + 
    geom_point(shape = 1,size = 5) + xlab("") + ylab("") + 
    scale_y_continuous(limits = c(4, 80)) + scale_x_continuous(limits = c(125, 165)) + 
    scale_colour_manual(values = colours) +
    theme_bw() + 
    theme(legend.text = element_text(face = "italic"), 
          legend.title = element_blank(),
          legend.key = element_blank(),
          plot.background = element_blank(), 
          axis.text = element_text(size = 15))

## bootstraping
numberInducedMJ <- c(indAttbsMJ_numInd, indObtbsMJ_numInd, indClevbsMJ_numInd, 
                      indQuadbsMJ_numInd, indX1027bsMJ_numInd, indX57126bsMJ_numInd)
numberTotalMJ <- c(indAttbsMJ_numTot, indObtbsMJ_numTot, indClevbsMJ_numTot, 
                    indQuadbsMJ_numTot, indX1027bsMJ_numTot, indX57126bsMJ_numTot)
inducedTotal <- (numberInducedMJ) ## / numberTotalMJ) * 100
species <- c(rep("N. attenuata", 100), rep("N. obtusifolia", 100), rep("N. clevelandii", 100), 
             rep("N. quadrivalvis", 100), rep("N. x obtusiata 10/27", 100), rep("N. x obtusiata 57/126", 100))
dfMJbs <- data.frame(species = species, total = numberTotalMJ, inducedPerc = inducedTotal)
dfMJbs$species <- factor(dfMJbs$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))


## plot
ggplot(dfMJbs, aes(x=total, y = inducedPerc, color = species)) + 
    geom_point(shape = 1, size=2) + 
    scale_colour_manual(values = colours) + 
    scale_x_continuous(limits = c(125, 195)) + scale_y_continuous(limits = c(4, 80)) + 
    theme_bw() + ylab("") + xlab("") + 
    theme(legend.text = element_text(face = "italic"), 
          legend.title = element_blank(), 
          legend.key = element_blank(), 
          plot.background = element_blank(), 
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.x = element_text(size = 15)) 

##plot(y = inducedTotal, x = numberTotalMJ, 
##     ylab = "number of induced / total metabolites", xlab = "number of total metabolites", 
##     col = c(rep("blue", 100), rep("red", 100), rep("green", 100), rep("yellow", 100), rep("darkgrey", 100), rep("lightgrey", 100)), main = "MJ bootstrapping", cex = 0.5, legend =)
dfMJbs2 <- dfMJbs
dfMJbs2[, "species"] <- c(rep("diploid", 200), rep("natural", 200), rep("synthetic", 200))
dfMJbs2 <- cbind(dfMJbs2, diploid = c(rep( "d", 200), rep("t" , 400)))
dfMJbs2 <- cbind(dfMJbs2, natural = c(rep( "d+n", 400), rep("s" , 200)))
dfMJbs2 <- cbind(dfMJbs2, synthetic = c(rep("d+s", 200), rep("n", 200), rep("d+s", 200)))
##dfWOSbs2 <- cbind(dfWOSbs2, synthetic = rep( "diploid+synthetic", 400)) 
dfMJbs2 <- cbind(dfMJbs2, pointshape = c(rep("c", 200), rep("b", 200), rep("a", 200)))
dfMJbs2 <- cbind(dfMJbs2, pointsize = c(rep(0.05, 200), rep(0.05, 400)))
dfMJbs2$species <- factor(dfMJbs2$species)


colorPalette2 <- c("black", alpha("black", 0.8), alpha("darkolivegreen3", 1), alpha("purple1", 0.70), alpha("darkolivegreen3", 0.7), alpha("purple1", 0.60))
ggplot(dfMJbs2, aes(x=total, y = inducedPerc, color=species)) + 
    geom_point(aes(shape=pointshape), show.legend = TRUE, size = 2) +
    theme_bw() + 
    xlab("") + 
    ylab("") +
    ##scale_colour_manual(values = colorPalette2) + 
    scale_shape_discrete(solid = FALSE, guide = FALSE) + 
    
    scale_y_continuous(limits = c(230, 850)) + scale_x_continuous(limits = c(4, 80))+
    geom_smooth(mapping = aes(x=total, y = inducedPerc, color = diploid), 
                method = lm, formula= y~x-1, data = dfMJbs2[1:200, ], se =FALSE, size = 1.5) + 
    geom_smooth(mapping = aes(x=total, y=inducedPerc, color = natural), method = lm, formula= y~x-1, data = dfMJbs2[1:400,], se = FALSE, size = 1.5) + 
    geom_smooth(mapping = aes(x=total, y=inducedPerc, color = synthetic), method = lm, formula= y~x-1, data = dfMJbs2[c(1:200, 401:600),], se = FALSE, size = 1.5) + 
    #scale_shape_manual(name = "species", labels = c( "synthetic", "natural", "diploid"), values = c(1, 2, 3)) +
    scale_colour_manual(values = colorPalette2, 
         guide =guide_legend(override.aes=list(labels = factor(c("d", "d+n", "d+s", "diploid", "natural", "synthetic"), levels = c("d", "d+n", "d+s", "diploid", "natural", "synthetic"), ordered=TRUE),  shape = c(NA, 0, NA, NA, 2, 1),
                                        linetype=c("solid", "blank", "solid","solid", "blank", "blank")))) +
    theme(legend.title = element_blank(),
          plot.background = element_blank(),
          legend.background = element_rect(colour=NA),
         legend.key.size =   unit(1.2, "lines"), 
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.x = element_text(size = 15))


    
##plot(y = inducedTotal[201:1600], x = numberTotalMJ[201:1600], 
##     ylab = "number of induced / total metabolites", xlab = "number of total metabolites", 
##     col = "darkgrey", main = "MJ bootstrapping", pch = ".", cex = 1.5, ylim = c(0.21, 0.62),
##     xlim = c(748, 1660))
inducedTotal <- numberInducedMJ ##/ numberTotalWOS * 100

lmMJ_diploid <- lm(inducedTotal[1:200] ~ numberTotalMJ[1:200] - 1)
lmMJ_natural <- lm(inducedTotal[1:400] ~ numberTotalMJ[1:400] - 1)
lmMJ_synthetic <- lm(inducedTotal[c(1:200, 401:600)] ~ numberTotalMJ[c(1:200, 401:600)] - 1)

## do some statistical testing
indices200 <- lapply(1:100, function(x) sample(x = 1:200, size = 100, replace = TRUE))
##slopeAttObt <- lapply(indices200, function(x) lm(c(c(indAttbsMJ_numInd, indObtbsMJ_numInd)/c(indAttbsMJ_numTot, indObtbsMJ_numTot))[x] ~ c(indAttbsMJ_numTot, indObtbsMJ_numTot)[x] - 1)$coefficients)
slopeAttObt <- lapply(indices200, function(x) lm(c(indAttbsMJ_numInd, indObtbsMJ_numInd)[x] ~ c(indAttbsMJ_numTot, indObtbsMJ_numTot)[x] - 1)$coefficients)
indicesNatural <- lapply(1:100, function(x) sample(x = c(1:400), size = 100, replace = TRUE))
indicesSynthetic <- lapply(1:100, function(x) sample(x = c(1:2, 401:600), size = 100, replace = TRUE))
##slopeTotal <- lapply(indicesTotal, function(x) lm(c(numberInducedMJ / numberTotalMJ)[x] ~ numberTotalMJ[x] - 1)$coefficients)
slopeNatural <- lapply(indicesNatural, function(x) lm(c(numberInducedMJ)[x] ~ numberTotalMJ[x] - 1)$coefficients)
slopeSynthetic <- lapply(indicesSynthetic, function(x) lm(c(numberInducedMJ)[x] ~ numberTotalMJ[x] - 1)$coefficients)
ttestLMMJ_diploid_natural <- t.test(unlist(slopeAttObt), unlist(slopeNatural), paired = FALSE, alternative = "two.sided")
ttestLMMJ_diploid_synthetic <- t.test(unlist(slopeAttObt), unlist(slopeSynthetic), paired = FALSE, alternative = "two.sided")


setwd("~/Documents/University/Master/MScArbeit/Report/")
@

<<identificationDTGs>>=
rtDTG <- c(5.55 * 60, 7.75 * 60) ## retention time of DTGs in seconds, include a security range of 0.5 min
## truncate peaklist to rt of DTGs 

## check pcgroup42 48 1154 114 

MSMS_raw[MSMS_raw[, "precursor"] == "paste here pc group",]
MSMS_mod[which(MSMS_mod[, "id"] == "paste here pc group"),]

peaklistDTG <- peaklist_mapped[ which(as.numeric(peaklist_mapped[,"rt"]) >= rtDTG[1] & as.numeric(peaklist_mapped[, "rt"]) <= rtDTG[2]), ]
## Lyciumoside I M+Na+ 653.3497
lycIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 653.3497))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 653.3497))[1:4],]
18    3.680693e-03 653.3516 1118.80597  39.9101303  [550][M]+ [M+Na]+ 630.362     109 1009.483641_1121.226976_2195 ## DTG
307   3.175606e-03 653.3516 1118.80597  39.9101303  [550][M]+ [M+Na]+ 630.362     109    1026.516241_1120.95096_45 ## DTG
386   4.513535e-03 653.3516 1118.80597  39.9101303  [550][M]+ [M+Na]+ 630.362     109   1031.470899_1121.607472_45 ## DTG
10381 0.000000e+00 653.3516 1118.80597  39.9101303  [550][M]+ [M+Na]+ 630.362     109  653.3516434_1118.805968_109 ## DTG

## NicotianosideIX  M+Na+ 739.3515
nicIXindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 739.3515))[2] ##1752
## NicotianosideX  825.3503
nicXindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 825.3503))[4] ## 1154_1
## LyciumosideII  815.4043
lycIIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 815.4043))[1] ##115
## NicotianosideXI  901.3991
nicXIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 901.3991))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 901.3991))[1:4],]
12612 8.881784e-16 901.4068 1044.463  78.10864     [M+Na]+ 878.415     120   901.406777_1044.462944_120 ## present in MSMS_mod ## no 271.24
12623 1.267031e-11 901.4068 1044.463  78.10864     [M+Na]+ 878.415     120  903.4145449_1044.230976_120 ## present in MSMS_mod ## no 271.24
12771 4.161849e-11 901.4068 1044.463  54.72529     [M+Na]+ 878.415     120 902.4113684_1042.403968_2513 ## present in MSMS_mod ## DTG
12790 5.508705e-12 901.4068 1044.463 100.00000     [M+Na]+ 878.415     120 902.4184088_1045.797992_3283 ## present in MSMS_mod ## no 271.24
## NicotianosideXII  987.4037
nicXIIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 987.4037))[2] ##79
## NicotianosideXIII 1074.4042
nicXIIIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 1074.4042))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 1074.4042))[1:5],]
213  7.051642e-05 1074.412 1099.74 63.74526             102   1075.414552_1098.896464_56 ## no 271.24
777  1.274196e-06 1074.412 1099.74 62.74598             102  1076.418973_1099.739952_102 ## no 271.24
811  1.465494e-14 1074.412 1099.74 62.74598             102 1075.404548_1099.232488_2284 ## no 271.24
1179 4.585665e-08 1074.412 1099.74 47.81034             102 1095.383146_1100.705968_2423 ## DTG
1206 9.578231e-06 1074.412 1099.74 47.81034             102      1095.391127_1101.358_73 ## DTG

## LyciumosideIV  799.4091
lycIVindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 799.4091))[1] ##87
## NicotianosideIa  885.4084
nicIiso1indMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 885.4084))[1] ##114_1
nicIiso2indMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 885.4084))[3] ##48_1
## NicotianosideII  971.4074
nicIIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 971.4074))[1] ##42_1
## NicotianosideIII  945.4653
nicIIIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 945.4653))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 945.4653))[1:4],]
9405  0.000000e+00 945.4704 1083.69  94.216     [M+Na]+ 922.482     123  945.4703568_1083.689968_123 ## present in MSMS_mod ## no 271.24
13472 3.687890e-04 945.4704 1083.69 100.000     [M+Na]+ 922.482     123 988.5029762_1081.392968_3209 ## no 271.24
13499 4.613779e-05 945.4704 1083.69  94.216     [M+Na]+ 922.482     123  989.506952_1082.036944_2851 ## present in MSMS_mod ## no 271.24
13508 1.971224e-05 945.4704 1083.69  94.216     [M+Na]+ 922.482     123 989.5153475_1085.597968_3928 ## no 271.24
## NicotianosideIV 1031.4645
nicIVindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 1031.4645))[1] ## 87
## NicotianosideV 1117.4681
nicVindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 1117.4681))[1] ## 38_1
## Attenoside (or DTG956) 961.4601
attenoindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 961.4601))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 961.4601))[1:2],]
13050 3.785861e-12 961.4644  996.929  68.85763 [867][M]+ [M+Na]+ 938.476     171   961.4644333_996.928976_171 ## no DTG
13054 3.853116e-02 959.5774 2181.320 100.00000                              3291 959.5774264_2181.320488_3291 ## no DTG ## to high dm/z
## DTG1042/Nicotianoside VI 1047.4525
DTG1042indMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 1047.4525))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 1047.4525))[1:2],]
587 3.096274e-03 1047.466 1036.690  44.81004 [938][M]+        3442 1047.466066_1036.689968_3442 ## DTG
600 3.788418e-02 1047.466 1036.690 100.00000 [938][M]+        3442 1047.473278_1038.044992_3182 ## no 271.24
## NicotianosideVII 1133.4624
nicVIIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 1133.4624))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 1133.4624))[1:5],]
1497 3.344880e-12 1133.467 1061.895 54.31944     [M+Na]+ 1110.47     116  1133.466791_1061.895456_116 ## no 271.24 
1503 1.762812e-12 1133.467 1061.895 54.31944     [M+Na]+ 1110.47     116  1134.476656_1061.620456_116 ## no 271.24 
1510 2.486900e-14 1133.467 1061.895 54.31944     [M+Na]+ 1110.47     116  1134.484524_1062.292472_116 ## no 271.24 
1522 8.881784e-15 1133.467 1061.895 54.31944     [M+Na]+ 1110.47     116 1133.472698_1063.210992_2770 ## no 271.24 
1528 1.629930e-02 1133.467 1061.895 81.29460     [M+Na]+ 1110.47     116 1134.467407_1061.293952_2765 ## no 271.24 
## NicotianosideVIII 1219.4619
nicVIIIindMJ <- order(abs(as.numeric(peaklistDTG[, "mz"]) - 1219.4619))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 1219.4619))[1:5],] ## too high dm/z
@

<<identificationPhenylpropanoids>>=

## phenylpropanoid pathway
peaklistPhenylProp <- peaklist_mapped[which(as.numeric(peaklist_mapped[, "rt"]) < 333),]


## N-coumaroylputrescine [M+H+]+ 235.143 RT 195.13
peaklist[order(abs(as.numeric(peaklist[, "mz"]) - 235.143))[1],]
coumPutindMJ <- order(abs(as.numeric(peaklistPhenylProp[, "mz"]) - 235.143))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 235.143))[1:9],]
3847 0.000000e+00 235.1149 418.03598 3.612507          [M+H-CH4]+ 250.132       1 237.1225998_420.44296_86 ## no 147.04 ## no 89.15
6804 0.000000e+00 235.1149 418.03598 3.125774          [M+H-CH4]+ 250.132       1 472.2442911_418.746944_1 ## no 147.04 ## no 89.15
6845 8.097187e-10 235.1149 418.03598 3.125774          [M+H-CH4]+ 250.132       1 943.4805962_417.609992_1 ## no 147.04 ## no 89.15
1974 0.000000e+00 235.1148 176.68797 4.866784             [M+Na]+ 212.126       5    249.1222376_178.556_5 ## no 147.04 ## no 89.15
1990 0.000000e+00 235.1148 176.68797 4.866784             [M+Na]+ 212.126       5 251.1380423_176.760976_5 ## no 147.04 ## no 89.15
2010 0.000000e+00 235.1148 176.68797 4.866784             [M+Na]+ 212.126       5  502.2736153_176.30896_5 ## no 147.04 ## no 89.15
2403 0.000000e+00 235.1147 445.11650 4.405993 [60][M]+                        978 308.1961308_445.508976_2 ## no 147.04 ## no 89.15
2437 1.874056e-13 235.1147 445.11650 2.095381 [60][M]+                        978  470.228995_445.711984_2 ## no 147.04 ## no 89.15
2471 2.220446e-16 235.1147 445.11650 2.095381 [60][M]+                        978  939.450789_445.491984_2 ## no 147.04 ## no 89.15
## N-coumaroylspermidine [M+H+]+ 292.2
## not found only 292.1006 -> dev 0.1

## N',N''-coumaroyl,caffeoylspermidine [M+H+]+ 454.23 RT 263.62
peaklist[order(abs(as.numeric(peaklist[, "mz"]) - 454.23))[1],]
coumCaffSperindMJ <- order(abs(as.numeric(peaklistPhenylProp[, "mz"]) - 454.23))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 454.23))[1:7],]
6790 0.000000e+00 454.2324 417.9255   3.279711     [M+H-H20]+ 471.238       1   472.2442911_418.746944_1 ## no 146.25 ## no 147.04 ## no 163.03
6832 1.426561e-10 454.2324 417.9255   3.279711     [M+H-H20]+ 471.238       1   943.4805962_417.609992_1 ## no 146.25 ## no 147.04 ## no 163.03
6875 0.000000e+00 454.2333 388.8170   1.569719                           1037   472.2445026_389.691984_4 ## no 146.25 ## no 147.04 ## no 163.03
7378 0.000000e+00 454.2334 493.3200 100.000000                            193 454.2333533_493.319952_193 ## no 146.25 ## no 147.04 ## no 163.03
7390 3.226727e-07 454.2334 493.3200 100.000000                            193    455.236226_495.342_2950 ## no 146.25 ## no 147.04 ## no 163.03
7380 0.000000e+00 454.2335 507.2920 100.000000         [M+H]+ 453.226     106    454.2334821_507.292_106 ## no 146.25 ## no 147.04 ## no 163.03
7384 2.220446e-16 454.2336 464.5685 100.000000                           3652 454.2336411_464.56848_3652 ## no 146.25 ## no 147.04 ## no 163.03

## N-caffeoylputrescine [M+H+]+ 251.14 RT RT 108.72
peaklist[order(abs(as.numeric(peaklist[, "mz"]) - 251.14))[1], ]
caffPutindMJ <- order(abs(as.numeric(peaklistPhenylProp[, "mz"]) - 251.14))[1] ## 821
## N-caffeoylspermidine [M+H+]+ 308.2 RT 246.96
peaklist[order(abs(as.numeric(peaklist[, "mz"]) - 308.2))[2], ]
caffSperindMJ <- order(abs(as.numeric(peaklistPhenylProp[, "mz"]) - 308.2))[1:10] ## not found 
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 308.2))[1:7],]
2352 1.863115e-02 308.1962 393.8720  76.07373 [119][M]+         [M+H]+ 307.191      14    355.1020798_393.97148_14 ## 163.03 present ## no 146.25
2372 1.287293e-03 308.1962 393.8720  76.07373 [119][M]+         [M+H]+ 307.191      14    377.0844229_393.85496_14 ## 163.03 present ## no 146.25
2383 2.220446e-16 308.1962 393.8720  30.93133 [119][M]+         [M+H]+ 307.191      14   470.2287831_393.866456_14 ## no 163.03 present ## no 146.25
2397 0.000000e+00 308.1961 445.5090  62.22514 [118][M]+         [M+H+NH3]+ 290.159       2    308.1961308_445.508976_2 ## 163.03 present ## no 146.25
2430 1.092459e-12 308.1961 445.5090  29.59274 [118][M]+         [M+H+NH3]+ 290.159       2     470.228995_445.711984_2 ## 163.03 present ## no 146.25
2466 7.327472e-14 308.1961 445.5090  29.59274 [118][M]+         [M+H+NH3]+ 290.159       2     939.450789_445.491984_2 ## 163.03 present ## no 146.25
2332 6.305356e-11 308.1961 423.6095  87.23752                   [M+H]+ 307.191       8     308.1960639_423.60948_8 ## 163.03 present ## no 146.25
2341 6.505907e-14 308.1961 423.6095  32.09472                   [M+H]+ 307.191       8     470.2287116_423.60948_8 ## 163.03 present ## no 146.25
7463 8.940230e-04 308.1961 423.6095  34.92345                   [M+H]+ 307.191       8 468.2134552_425.810976_3750 ## 163.03 present ## no 146.25
7381 8.275531e-04 308.1960 506.2490  31.78098                   2685     454.2334821_507.292_106 ## no 163.03 ## no 146.25
2217 1.148945e-06 308.1960 102.8450 100.00000 [120][M]+ [M+K+NH3]+ 252.206 [M+Na+NH3]+ 268.18 [M+H+NH3]+ 290.162      21   308.1959895_102.844992_21 ## 163.03 present ## no 146.25
6604 0.000000e+00 308.1959  77.3200 100.00000                   1007      308.1959011_77.32_1007 ## no 163.03 ## no 149.25
6784 2.220446e-15 308.1959  77.3200 100.00000                   1007  309.1991679_77.706976_1008 ## no 163.09 ## no 149.25
7722 0.000000e+00 308.1956 530.8070  13.84268                   2903  485.247569_530.438456_2894 ## no 163.03 ## no 149.25

## N-feruloylputrescine [M+H+]+ 265.153 Rt 192.05
peaklist[order(abs(as.numeric(peaklist[, "mz"]) - 265.153))[1], ]
ferPutindMJ <- order(abs(as.numeric(peaklistPhenylProp[, "mz"]) - 265.153))[1:10] ## not found
MSMS_raw[order( abs(MSMS_raw[, "mz"] - 365.153))[1:7],] ## not found

## N-feruloyl-spermidine [M+H+]+ 322.212 RT 104.63
peaklist[order(abs(as.numeric(peaklist[, "mz"]) - 322.212))[1], ]
ferSperindMJ <- order(abs(as.numeric(peaklistPhenylProp[, "mz"]) - 322.212))[1] ## 5274
## N'-N''-dicaffeoyl -spermidine [M+H+]+ 470.23 RT 247.434
peaklist[order(abs(as.numeric(peaklist[, "mz"]) - 470.23))[6], ]
diCaffSperindMJ <- order(abs(as.numeric(peaklistPhenylProp[, "mz"]) - 470.23))[1] ## rt180 73
## N'-N''-diferuloyl-spermidine [M+H+]+ 498.260, RT 289.12
DiFerSperindMJ <- order(abs(mzPhenolamidMJ - 498.260))[1] 
## N'-N''-dihydrated-diferuloyl-spermidine [M+H+]+ 502.25 RT 243.1352
diHydrDiFerSperindMJ <- order(abs(mzPhenolamidMJ - 502.25))[1] 
## unknown conjugate [M+H+]+ 411.2012, rt = 211.52897
unknownConjindMJ <- order(abs(mzPhenolamidMJ - 410.194 - 1.0072))[1]
## N'-N''-caffeoyl,feruloyl spermidine 484.245 RT 265.6723
caffFerSperindMJ <- order(abs(mzPhenolamidMJ - 484.245))[1] 
## N-feruloyl spermidine isomer 2 [M+H+]+ 322.212 Rt 149.2268
ferSper2indMJ <- order(abs(mzPhenolamidMJ - 322.212))[2] 
## caffeoyl putrescine isomer 2 [M+H+]+ 251.138 rt: 144.1216
caffPut2indMJ <- order(abs(mzPhenolamidMJ - 251.14))[2] ## 1 or 2?
## O -Coumaroylquinic acid isomer 1 [M+H+]+  338.102 RT: 249.477
coumQuinic1indMJ <- order(abs(mzPhenolamidMJ - 338.102 - 1.007))[1] ## 1 or 2?
## 3O -Coumaroylquinic acid isomer 2 [M+H+]+  338.102 RT: 269.477
coumQuinic2indMJ <- order(abs(mzPhenolamidMJ - 338.102 - 1.007))[2] ## 1 or 2?
## O-caffeoylquinic acid isomer 1 [M+H+]+ 355.1014 rt 176.5318
caffQuinic1indMJ <- order(abs(mzPhenolamidMJ - 355.1014))[1] ## 1 or 2 or 3
## O-caffeoylquinic acid isomer 2 [M+H+]+ 355.1014 rt 216.56
caffQuinic2indMJ <- order(abs(mzPhenolamidMJ - 355.1014))[2] ## 1 or 2 or 3
## O-caffeoylquinic acid isomer 3 [M+H+]+ 355.1014 rt 241.3897
caffQuinic3indMJ <- order(abs(mzPhenolamidMJ - 355.1014))[3] ## 1 or 2 or 3


@

<<MSMS_shinyCircos, eval=FALSE,echo=FALSE,fig.show='hide',warning=FALSE,message=FALSE,results='hide'>>=
library (MetCirc)

## change that it is compatible with convert2MSP
MSMS_att <- MSMS_mod[which(MSMS_mod[, "att72WOS"] == 1),]
finalMSMS_att <- convert2MSP(MSMS_att, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, rt = TRUE)
MSMS_obt <- MSMS_mod[which(MSMS_mod[, "obt72WOS"] == 1),]
finalMSMS_obt <- convert2MSP(MSMS_obt, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, rt = TRUE)
MSMS_clev <- MSMS_mod[which(MSMS_mod[, "clev72WOS"] == 1),]
finalMSMS_clev <- convert2MSP(MSMS_clev, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, rt = TRUE)
MSMS_quad <- MSMS_mod[which(MSMS_mod[, "quad72WOS"] == 1),]
finalMSMS_quad <- convert2MSP(MSMS_quad, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, rt = TRUE)
MSMS_x1027 <- MSMS_mod[which(MSMS_mod[, "x102772WOS"] == 1),]
finalMSMS_x1027 <- convert2MSP(MSMS_x1027, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, rt = TRUE)
MSMS_x57126 <- MSMS_mod[which(MSMS_mod[, "x5712672WOS"] == 1),]
finalMSMS_x57126 <- convert2MSP(MSMS_x57126, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, rt = TRUE)

## create object finalMSP
finalMSP <- combine(finalMSMS_att, finalMSMS_obt)
finalMSP <- combine(finalMSP, finalMSMS_clev)
finalMSP <- combine(finalMSP, finalMSMS_quad)
finalMSP <- combine(finalMSP, finalMSMS_x1027)
finalMSP <- combine(finalMSP, finalMSMS_x57126)
 
save(MSMS_mod, MSMS_att, MSMS_obt, MSMS_clev, MSMS_quad, MSMS_x1027, MSMS_x57126, 
     finalMSMS_att, finalMSMS_obt, finalMSMS_clev, finalMSMS_quad, finalMSMS_x1027, finalMSMS_x57126,
     finalMSP, file = "MSMS_aftermapping.RData")
load("MSMS_aftermapping.RData")
##finalMSPNL <- msp2FunctionalLossesMSP(finalMSP)

species <- c(rep("att", length = length(finalMSMS_att)), rep("obt", length = length(finalMSMS_obt)), 
             rep("clev", length = length(finalMSMS_clev)), rep("quad", length = length(finalMSMS_quad)), 
             rep("x1027", length(finalMSMS_x1027)), rep("x57126", length(finalMSMS_x57126)))
binnedMSP <- binning(msp = finalMSP, tol = 0.02, group = species, method = "median")
##binnedMSPNL <- binning(msp = finalMSPNL, tol = 0.1, group = species, method = "median")
similarityMat <- createSimilarityMatrix(binnedMSP, m = 0.5, n = 2)
##similarityMatNL <- createSimilarityMatrix(binnedMSPNL)

#####hClustMSPd <- hcluster(similarityMat, method = "spearman")
hClustMSPd <- hclust(dist(similarityMat), method = "ward.D")
plot(hClustMSPd, labels = FALSE)
shinyCircos(similarityMat, finalMSP)
cutTreeMSP <- cutree(hClustMSPd, k = 5)
group1 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "1"] 
group2 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "2"] 

inds_group <- which(colnames(similarityMat) %in% group1)
similarityMat_group <- similarityMat[inds_group, inds_group]
finalMSP_group <- finalMSP[inds_group]
shinyCircos(similarityMat_group, finalMSP_group)
##group3 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "3"] ## DTGs
##group4 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "4"] ## DTGs
##group5 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "5"] 
##group6 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "6"] 
##group7 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "7"] ## DTGs?
##group8 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "8"] 
##group9 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "9"] ## phenolamids
##group10 <- names(cutTreeMSP)[as.vector(cutTreeMSP) == "10"] 

##save(finalMSP, binnedMSP, similarityMat, hClustMSPd, cutTreeMSP,
##     group1, group2, group3, group4, group5, group6, group7,
##     group8, group9, group10, file = "Metcirc_Objects.RData")
load("Metcirc_Objects.RData")
plot(hClustMSPd, labels = FALSE, hang = -0.03,
     xlab = "", sub  =" ", ylim = c(100, 2.5e+07), main = "MS/MS features")
abline(h = 1.05e+07)
rect(38,0,352,1.05e+07 ,col= alpha("black", 0.3))
rect(445, 0, 485, 1.05e+07, col = alpha("black", 0.6))

## shinyCircos for DTGs
groupDTG <- c(group1[c(1,2)],group2, group3, group4, group7[c(1,6:13)])
MZRT_groupDTG <- unlist(lapply(strsplit(groupDTG, "_"), function(x) x[2]))

MSMS_groupDTG <- MSMS[which(MZRT_MSMS %in% MZRT_groupDTG),]
MSMS_groupDTG <- cbind.data.frame(MSMS_groupDTG, "names" = rep("Unknown", dim(MSMS_groupDTG)[1]), stringsAsFactors = FALSE)
MSMS_groupDTG <- cbind.data.frame(MSMS_groupDTG, "metNames" = rep("Unknown", dim(MSMS_groupDTG)[1]), stringsAsFactors = FALSE)
MSMS_groupDTG <- cbind.data.frame(MSMS_groupDTG, "class" = rep("putative DTG", dim(MSMS_groupDTG)[1]), stringsAsFactors = FALSE)

uniqPCGroup_groupDTG <- unique(cutUniquePreMZ(MSMS_groupDTG[,"pcgroup_precursorMZ"], splitPattern = "_", splitInd = 3))
precursor_groupDTG <- as.character(MSMS_groupDTG[, "pcgroup_precursorMZ"])
uniquePrecursor_groupDTG <- unique(precursor_groupDTG)


## attenoside 961.4601, is not DTG 956 since we have fragment 147.0675
MSMS_groupDTG[which( "961.4644333" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 4)
MSMS_groupDTG[which( "961.4644333" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Attenoside", 4)
MSMS_groupDTG[which( "961.4644333" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 4)
## 1047.4525 Nicotianoside VI, cannot distinguish isomers
MSMS_groupDTG[which( "1047.466066" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metabolitename"] <- rep("Nicotianoside VI [M+Na+]+", 13)
## 1133.466791 Nicotianoside VII
MSMS_groupDTG[which( "1133.466791" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 5)
MSMS_groupDTG[which( "1133.466791" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Nicotianoside VI", 5)
MSMS_groupDTG[which( "1133.466791" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 5)
## 1219.4619 Nicotianoside VIII --> not found
## lyciumoside IV 799.4091
MSMS_groupDTG[which( "799.4113577" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 11)
MSMS_groupDTG[which( "799.4113577" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Lyciumoside IV", 11)
MSMS_groupDTG[which( "799.4113577" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 11)
## Nicotianoside I 885.4097
MSMS_groupDTG[which( "885.4119913" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 66)
MSMS_groupDTG[which( "885.4119913" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Nicotianoside I", 66)
MSMS_groupDTG[which( "885.4119913" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 66)
## Nicotianoside II 971.4074
MSMS_groupDTG[which( "971.412515" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 120)
MSMS_groupDTG[which( "971.412515" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Nicotianoside II", 120)
MSMS_groupDTG[which( "971.412515" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 120)
## Nicotianoside IV 1031.4645
MSMS_groupDTG[which( "1031.470899" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 79)
MSMS_groupDTG[which( "1031.470899" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Nicotianoside IV", 79)
MSMS_groupDTG[which( "1031.470899" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 79)
## Nicotianoside V 1117.4681
MSMS_groupDTG[which( "1117.471765" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 62)
MSMS_groupDTG[which( "1117.471765" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Nicotianoside V", 62)
MSMS_groupDTG[which( "1117.471765" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 62)
## Nicotianoside III 945.4653
MSMS_groupDTG[which( "945.4703568" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 6)
MSMS_groupDTG[which( "945.4703568" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Nicotianoside V", 6)
MSMS_groupDTG[which( "945.4703568" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 6)
## Lyciumoside II 815.4043
MSMS_groupDTG[which( "815.4067952" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 10)
MSMS_groupDTG[which( "815.4067952" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Lyciumoside V", 10)
MSMS_groupDTG[which( "815.4067952" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 10)
## Nicotianoside XI 901.3997
MSMS_groupDTG[which( "901.406777" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 9)
MSMS_groupDTG[which( "901.406777" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Nicotianoside XI", 9)
MSMS_groupDTG[which( "901.406777" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 9)
## Nicotianoside XII 987.4037 -_> not found: "987.3851224_1177.707984_30" is not Nicotianoside XIII?
## Nicotianoside XIII 1074.4042 --> 1073.4042
MSMS_groupDTG[which( "1073.412785" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 26)
MSMS_groupDTG[which( "1073.412785" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("Nicotianoside XIII", 26)
MSMS_groupDTG[which( "1073.412785" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 26)
## Lyciumoside I 653.3497
MSMS_groupDTG[which( "653.3516434" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 30)
MSMS_groupDTG[which( "653.3516434" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("putative Lyciumoside I", 30)
MSMS_groupDTG[which( "653.3516434" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 30)
## Nicotianoside IX 739.3513
MSMS_groupDTG[which( "739.3536942" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 6)
MSMS_groupDTG[which( "739.3536942" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("putative Nicotianoside IX", 6)
MSMS_groupDTG[which( "739.3536942" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 6)
## Nicotianoside X 825.3503
MSMS_groupDTG[which( "825.3533062" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 8)
MSMS_groupDTG[which( "825.3533062" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "metNames"] <- rep("putative Nicotianoside X", 8)
MSMS_groupDTG[which( "825.3533062" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), "class"] <- rep("DTG", 8)

## remove double entries [M+1+H+]+: 
## 971.4164692/1178.059968 double entry of 971.412515/1177.227952
MSMS_groupDTG <- MSMS_groupDTG[-which("971.4164692" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]

## 968.4514627/1176.398992 and 968.4620216/1177.227952 double entry of 967.4611793/1177.129984
MSMS_groupDTG <- MSMS_groupDTG[-which("968.4514627" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]
MSMS_groupDTG <- MSMS_groupDTG[-which("968.4620216" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]

## 967.4611793/1177.129984 and 968.9005278/1177.72948 double entry of 966.4566754/1177.221952
MSMS_groupDTG <- MSMS_groupDTG[-which("967.4611793" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]
MSMS_groupDTG <- MSMS_groupDTG[-which("968.9005278" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]

## 1134.476656/1061.620456 double entry of 1134.484524/1062.292472
MSMS_groupDTG <- MSMS_groupDTG[-which("1134.476656" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]
 
## 987.3851224/1177.707984 double entry of 971.412515/1177.227952
MSMS_groupDTG <- MSMS_groupDTG[-which("987.3851224" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]

## 325.1130709/1009.253976 double entry of of 451.3036561/1009.253464
MSMS_groupDTG <- MSMS_groupDTG[-which("325.1130709" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]

## remove in source fragmentation object
MSMS_groupDTG <- MSMS_groupDTG[-which("271.2409748" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),]

##uniquePrecursor_groupDTG[which.min(abs(as.numeric(unlist(lapply(strsplit(unique(as.character(MSMS_groupDTG[, 4])), "_"), "[", 1))) - 825.3503))]

## cut peaklistMSMS2
peaklistMSMS2_groupDTG <- peaklistMSMS2[which(peaklistMSMS2[, "rt"] > 800 & peaklistMSMS2[, "rt"] < 1300), ]
##peaktable <- read.csv("Peaktable_fill0.csv")

## write for each species to binary table mm72WOS
mm72WOS_groupDTG <- matrix(nrow = length(uniquePrecursor_groupDTG), ncol = 6)
rownames(mm72WOS_groupDTG) <- uniquePrecursor_groupDTG

for (i in 1:length(uniquePrecursor_groupDTG)) {
    mzrt <- as.numeric(strsplit(MZRT_groupDTG, "/")[i][[1]])
    objective <- 1000 * (mzrt[1] - peaklistMSMS2_groupDTG[, "mz"]) + (mzrt[2] - peaklistMSMS2_groupDTG[, "rt"])
    objective <- abs(objective)
    indObjective <- which.min(objective)
    mm72WOS_groupDTG[i,] <- as.numeric(peaklistMSMS2_groupDTG[indObjective,c("attMSWOS72", "obtMSWOS72", "clevMSWOS72", "quadMSWOS72", "x1027MSWOS72", "x57126MSWOS72")])
}

## remove precursors rt < 800 s
mm72WOS_groupDTG <- mm72WOS_groupDTG[-c( which(as.numeric(unlist(lapply(strsplit(rownames(mm72WOS_groupDTG), "_"), "[[", 2))) < 800)),]

## change that it is compatible with convert2MSP
MSMS_att_groupDTG <- MSMS_groupDTG[MSMS_groupDTG[, "pcgroup_precursorMZ"] %in% names(mm72WOS_groupDTG[mm72WOS_groupDTG[, 1] == 1, 1]), ]
finalMSMS_att_groupDTG <- convert2MSP(MSMS_att_groupDTG, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_obt_groupDTG <- MSMS_groupDTG[MSMS_groupDTG[, "pcgroup_precursorMZ"] %in% names(mm72WOS_groupDTG[mm72WOS_groupDTG[, 2] == 1, 1]), ]
finalMSMS_obt_groupDTG <- convert2MSP(MSMS_obt_groupDTG, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_clev_groupDTG <- MSMS_groupDTG[MSMS_groupDTG[, "pcgroup_precursorMZ"] %in% names(mm72WOS_groupDTG[mm72WOS_groupDTG[, 3] == 1, 1]), ]
finalMSMS_clev_groupDTG <- convert2MSP(MSMS_clev_groupDTG, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_quad_groupDTG <- MSMS_groupDTG[MSMS_groupDTG[, "pcgroup_precursorMZ"] %in% names(mm72WOS_groupDTG[mm72WOS_groupDTG[, 4] == 1, 1]), ]
finalMSMS_quad_groupDTG <- convert2MSP(MSMS_quad_groupDTG, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_X1027_groupDTG <- MSMS_groupDTG[MSMS_groupDTG[, "pcgroup_precursorMZ"] %in% names(mm72WOS_groupDTG[mm72WOS_groupDTG[, 5] == 1, 1]), ]
finalMSMS_x1027_groupDTG <- convert2MSP(MSMS_X1027_groupDTG, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_X57126_groupDTG <- MSMS_groupDTG[MSMS_groupDTG[, "pcgroup_precursorMZ"] %in% names(mm72WOS_groupDTG[mm72WOS_groupDTG[, 6] == 1, 1]), ]
finalMSMS_x57126_groupDTG <- convert2MSP(MSMS_X57126_groupDTG, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)

## create object finalMSP
finalMSP_groupDTG <- combine(finalMSMS_att_groupDTG, finalMSMS_obt_groupDTG)
finalMSP_groupDTG <- combine(finalMSP_groupDTG, finalMSMS_clev_groupDTG)
finalMSP_groupDTG <- combine(finalMSP_groupDTG, finalMSMS_quad_groupDTG)
finalMSP_groupDTG <- combine(finalMSP_groupDTG, finalMSMS_x1027_groupDTG)
finalMSP_groupDTG <- combine(finalMSP_groupDTG, finalMSMS_x57126_groupDTG)

species_groupDTG <- c(rep("att", length = length(finalMSMS_att_groupDTG)), 
                        rep("obt", length = length(finalMSMS_obt_groupDTG)), 
                        rep("clev", length = length(finalMSMS_clev_groupDTG)), 
                        rep("quad", length = length(finalMSMS_quad_groupDTG)), 
                        rep("x1027", length(finalMSMS_x1027_groupDTG)), 
                        rep("x57126", length(finalMSMS_x57126_groupDTG)))

binnedMSP_groupDTG <- binning(msp = finalMSP_groupDTG, tol = 0.01, group = species_groupDTG, method = "median")
similarityMat_groupDTG <- createSimilarityMatrix(binnedMSP_groupDTG)
## shinyCircos(similarityMat_groupDTG, finalMSP_groupDTG)
similarityMatRT_groupDTG <- createOrderedSimMat(similarityMat_groupDTG, order = "retentionTime")
groupname_groupDTG <- rownames(similarityMatRT_groupDTG)
linkMat <- createLinkMatrix(similarityMatrix = similarityMatRT_groupDTG, threshold_low=0.99,threshold_high=1)
linkMat_cut <- cutLinkMatrix(linkMat, type = "inter") 
circos.par(gap.degree = 0, cell.padding = c(0, 0, 0, 0), track.margin = c(0, 0))
## att_971.412515/1177.227952 Nicotianoside II att_825.3565633/1187.377464 Nicotianoside X
## Nicotianoside II

plotCircos(groupname_groupDTG, linkMat_cut, initialize = TRUE, featureNames = TRUE,
    cexFeatureNames = 0.2, groupSector = TRUE, groupName = FALSE,
    links = FALSE, highlight = TRUE, colour = colours[c(1,3,2,4:6)],
    transparency = 0.45)
highlight(groupname = groupname_groupDTG, ind = 36, LinkMatrix = linkMat_cut,
          colour = colours[c(1,3,2,4:6)], transparency = 0.5)
## nicotianoside X
plotCircos(groupname_groupDTG, linkMat_cut, initialize = TRUE, featureNames = TRUE,
    cexFeatureNames = 0.2, groupSector = TRUE, groupName = FALSE,
    links = FALSE, highlight = TRUE, colour = colours[c(1,3,2,4:6)], transparency = 0.45)
highlight(groupname = groupname_groupDTG, ind = 40, LinkMatrix = linkMat_cut, colour = colours[c(1,3,2,4:6)], transparency = 0.5)




## group 9 (phenolamides)
MZRT_group9 <- unlist(lapply(strsplit(group9, "_"), function(x) x[2]))
MSMS_group9 <- MSMS[which(MZRT_MSMS %in% MZRT_group9),]

uniqPCGroup_group9 <- unique(cutUniquePreMZ(MSMS_group9[,"pcgroup_precursorMZ"], splitPattern = "_", splitInd = 3))
precursor_group9 <- as.character(MSMS_group9[, "pcgroup_precursorMZ"])
uniquePrecursor_group9 <- unique(precursor_group9)

MSMS_group9 <- cbind.data.frame(MSMS_group9, "names" = rep("Unknown", dim(MSMS_group9)[1]), stringsAsFactors = FALSE)
MSMS_group9 <- cbind.data.frame(MSMS_group9, "metNames" = rep("Unknown", dim(MSMS_group9)[1]), stringsAsFactors = FALSE)
MSMS_group9 <- cbind.data.frame(MSMS_group9, "class" = rep("phenylprop pathway met", dim(MSMS_group9)[1]), stringsAsFactors = FALSE)



## N caffeoyl putrescine 251.1382064 isomer 1
MSMS_group9[which( "251.1382064" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 10)
MSMS_group9[which( "251.1382064" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N-caffeoyl putrescine isomer 1", 10)
MSMS_group9[which( "251.1382064" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 10)
## N caffeoyl putrescine 252.0719499 isomer 1 [M+1+H+]
MSMS_group9[which( "252.0719499" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+1+H+]+", 11)
MSMS_group9[which( "252.0719499" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N-caffeoyl putrescine isomer 1", 11)
MSMS_group9[which( "252.0719499" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 11)
## N caffeoyl putrescine 251.1380423 isomer 2
MSMS_group9[which( "251.1380423" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 16)
MSMS_group9[which( "251.1380423" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N-caffeoyl putrescine isomer 2", 16)
MSMS_group9[which( "251.1380423" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 16)
## N caffeoyl putrescine 252.1411109 isomer 2 [M+1+H+]
MSMS_group9[which( "252.1411109" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+1+H+]+", 12)
MSMS_group9[which( "252.1411109" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N-caffeoyl putrescine isomer 2", 12)
MSMS_group9[which( "252.1411109" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 12)
## N coumaroyl putrescine 235.143 --> not found
## N feruloyl putrescine 265.153 --> not found
## N coumaroyl spermidine 292.2 --> not found 
## N caffeoyl spermidine 308.2
## 1.) ret time 423.60948
MSMS_group9[which( "308.1960639" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 5)
MSMS_group9[which( "308.1960639" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N-caffeoyl spermidine", 5)
MSMS_group9[which( "308.1960639" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 5)
## 2.) ret time 77.32
MSMS_group9[which( "308.1959011" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("unknown putative caffeoyl containing metabolite", 4)
## 3.) ret time 102.84 --> isomer 2
MSMS_group9[which( "308.1959895" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 11)
MSMS_group9[which( "308.1959895" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N-caffeoyl spermidine isomer?", 11)
MSMS_group9[which( "308.1959895" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide?", 11)
## N feruloyl spermidine isomer 1 322.212
MSMS_group9[which( "322.2118106" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 4)
MSMS_group9[which( "322.2118106" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N-feruloyl spermidine", 4)
MSMS_group9[which( "322.2118106" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 4)
## N'-N''-coumeroyl,caffeoyl-spermidine isomer 1 454.23
MSMS_group9[which( "454.2334821" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 4)
MSMS_group9[which( "454.2334821" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N'-N''-coumeroyl,caffeoyl-spermidine", 4)
MSMS_group9[which( "454.2334821" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 4)
## N'-N''-dicaffeoyl-spermidine isomer 1 470.23
MSMS_group9[which( "470.228995" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 34)
MSMS_group9[which( "470.228995" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N'-N''-dicaffeoyl-spermidine isomer 1", 34)
MSMS_group9[which( "470.228995" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 34)
## N'-N''-dicaffeoyl-spermidine isomer 2 470.23
MSMS_group9[which( "470.2287116" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 9)
MSMS_group9[which( "470.2287116" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N'-N''-dicaffeoyl-spermidine isomer 2", 9)
MSMS_group9[which( "470.2287116" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 9)
## N'-N''-dicaffeoyl-spermidine isomer 3 470.23
MSMS_group9[which( "470.2287831" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 9)
MSMS_group9[which( "470.2287831" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N'-N''-dicaffeoyl-spermidine isomer 3?", 9)
MSMS_group9[which( "470.2287831" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 9)
## N'-N''-diferuloyl-spermidine 498.26
MSMS_group9[which( "498.2600283" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 3)
MSMS_group9[which( "498.2600283" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("unknown caffeoyl containing metabolit", 3)
MSMS_group9[which( "498.2600283" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 3)
## N'-N''-diferuloyl-spermidine 498.26
MSMS_group9[which( "498.2600691" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 3)
MSMS_group9[which( "498.2600691" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N'-N''-diferuloyl-spermidine", 3)
MSMS_group9[which( "498.2600691" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 3)
## N'-N''-dihydrated-diferuloyl spermidine 502.25 --> not found
## N'-N''-caffeoyl, feruloyl spermidine 484.25
MSMS_group9[which( "485.2471613" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+1+H+]+", 4)
MSMS_group9[which( "485.2471613" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("putative N'-N''-caffeoyl,feruloyl-spermidine", 4)
MSMS_group9[which( "485.2471613" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("putative phenolamide", 4)
## N'-N''-caffeoyl, feruloyl spermidine 484.25
MSMS_group9[which( "485.247569" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+1+H+]+", 7)
MSMS_group9[which( "485.247569" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N'-N''-caffeoyl,feruloyl-spermidine", 7)
MSMS_group9[which( "485.247569" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 7)
##  O-coumaroyl quinic acid isomer 1 and 2 --> not found 
## O-caffeoyl quinic acid isomer 1 rt 313 
MSMS_group9[which( "355.1020716" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <-     rep("[M+H+]+", 14)
MSMS_group9[which( "355.1020716" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("O-caffeoyl quinic acid isomer 1", 14)
MSMS_group9[which( "355.1020716" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenol ester", 14)
## O-caffeoyl quinic acid isomer 2 rt 393 
MSMS_group9[which( "355.1020798" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 11)
MSMS_group9[which( "355.1020798" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("O-caffeoyl quinic acid isomer 2", 11)
MSMS_group9[which( "355.1020798" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenol ester", 11)
## O-caffeoyl quinic acid isomer 3 rt 334
MSMS_group9[which( "355.1020906" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 9)
MSMS_group9[which( "355.1020906" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("O-caffeoyl quinic acid isomer 3", 9)
MSMS_group9[which( "355.1020906" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenol ester", 9)

## assign with shinyCircos
## 377.084087 --> [M+Na+] of O-caffeoylquinic acid isomer 1 rt 313
MSMS_group9[which( "377.084087" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 16)
MSMS_group9[which( "377.084087" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("O-caffeoyl quinic acid isomer 2", 16)
MSMS_group9[which( "377.084087" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenol ester", 16)
## 377.0844229 --> [M+Na+] of O-caffeoylquinic acid isomer 2 rt 393
MSMS_group9[which( "377.0844229" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 11)
MSMS_group9[which( "377.0844229" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("O-caffeoyl quinic acid isomer 2", 11)
MSMS_group9[which( "377.0844229" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenol ester", 11)
## 377.0842713 --> [M+Na+] of O.caffeoylquinic acid isomer 3 rt 334
MSMS_group9[which( "377.0842713" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 11)
MSMS_group9[which( "377.0842713" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("O-caffeoyl quinic acid isomer 3", 11)
MSMS_group9[which( "377.0842713" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenol ester", 11)


## 350.2066139/248.005968 present in Natt, Nclev, Nxobt1027, Nxobt57126
MSMS_group9[which( "350.2066139" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("unknwon caffeoyl containing metabolite", 4)
## 472.2445026/389.691984 present in Natt, Nclev, Nxobt1027, Nxobt57126
MSMS_group9[which( "472.2445026" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), ]
## 472.2442911/418.746944 present in Natt, Nclev, Nxobt1027, Nxobt57126 --> putative [M+Na+]+ adduct of N'-N''-coumaroyl,caffeoyl spermidine
MSMS_group9[which( "472.2442911" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 37)
MSMS_group9[which( "472.2442911" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("putative N'-N''-coumaroyl,caffeoyl-spermidine", 37)
MSMS_group9[which( "472.2442911" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("putative phenolester", 37)
## 539.1162839/640.079952 present in Natt, Nx1027, Nx57126 --> putative dicaffeoyl quinate [M+Na+]+??
MSMS_group9[which( "539.1162839" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+Na+]+", 4)
MSMS_group9[which( "539.1162839" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("putative dicaffeoyl quinate", 4)
MSMS_group9[which( "539.1162839" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolester", 4)
## 308.1961308/445.508976 found in Natt, Nx1027, Nx57126
MSMS_group9[which( "308.1961308" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "names"] <- rep("[M+H+]+", 23)
MSMS_group9[which( "308.1961308" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("N-caffeoyl-spermidine", 23)
MSMS_group9[which( "308.1961308" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "class"] <- rep("phenolamide", 23)
## 240.100036/310.747968 found in Natt, Nobt, Nquad
MSMS_group9[which( "240.100036" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), "metNames"] <- rep("unknown caffeoyl containing metabolite", 10)



## remove from MSMS_group9 M+Na+ adducts of O-caffeoylquinic acid isomers
MSMS_group9 <- MSMS_group9[-which( "377.084087" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), ] 
MSMS_group9 <- MSMS_group9[-which( "377.0844229" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), ] 
MSMS_group9 <- MSMS_group9[-which( "377.0842713" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), ] 


##uniquePrecursor_group9[order(abs(as.numeric(unlist(lapply(strsplit(unique(as.character(MSMS_group9[, 4])), "_"), "[", 1))) - 377.08))[1:4]]

## cut peaklistMSMS2, only include features which have retention time less than 700
peaklistMSMS2_group9 <- peaklistMSMS2[which(peaklistMSMS2[, "rt"] < 700), ]
##peaktable <- read.csv("Peaktable_fill0.csv")

## write for each species to binary table mm72WOS
mm72WOS_group9 <- matrix(nrow = length(uniquePrecursor_group9), ncol = 6)
rownames(mm72WOS_group9) <- uniquePrecursor_group9

for (i in 1:length(uniquePrecursor_group9)) {
    mzrt <- as.numeric(strsplit(MZRT_group9, "/")[i][[1]])
    objective <- 1000 * (mzrt[1] - peaklistMSMS2_group9[, "mz"]) + (mzrt[2] - peaklistMSMS2_group9[, "rt"])
    objective <- abs(objective)
    indObjective <- which.min(objective)
    mm72WOS_group9[i,] <- as.numeric(peaklistMSMS2_group9[indObjective,c("attMSWOS72", "obtMSWOS72", "clevMSWOS72", "quadMSWOS72", "x1027MSWOS72", "x57126MSWOS72")])
}

## remove precursors < 164 m/z
mm72WOS_group9 <- mm72WOS_group9[-c( which(as.numeric(unlist(lapply(strsplit(MZRT_group9, "/"), "[", 1))) < 164)),]

## change that it is compatible with convert2MSP
MSMS_att_group9 <- MSMS_group9[MSMS_group9[, "pcgroup_precursorMZ"] %in% names(mm72WOS_group9[mm72WOS_group9[, 1] == 1, 1]), ]
finalMSMS_att_group9 <- convert2MSP(MSMS_att_group9, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_obt_group9 <- MSMS_group9[MSMS_group9[, "pcgroup_precursorMZ"] %in% names(mm72WOS_group9[mm72WOS_group9[, 2] == 1, 1]), ]
finalMSMS_obt_group9 <- convert2MSP(MSMS_obt_group9, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_clev_group9 <- MSMS_group9[MSMS_group9[, "pcgroup_precursorMZ"] %in% names(mm72WOS_group9[mm72WOS_group9[, 3] == 1, 1]), ]
finalMSMS_clev_group9 <- convert2MSP(MSMS_clev_group9, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_quad_group9 <- MSMS_group9[MSMS_group9[, "pcgroup_precursorMZ"] %in% names(mm72WOS_group9[mm72WOS_group9[, 4] == 1, 1]), ]
finalMSMS_quad_group9 <- convert2MSP(MSMS_quad_group9, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_X1027_group9 <- MSMS_group9[MSMS_group9[, "pcgroup_precursorMZ"] %in% names(mm72WOS_group9[mm72WOS_group9[, 5] == 1, 1]), ]
finalMSMS_x1027_group9 <- convert2MSP(MSMS_X1027_group9, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)
MSMS_X57126_group9 <- MSMS_group9[MSMS_group9[, "pcgroup_precursorMZ"] %in% names(mm72WOS_group9[mm72WOS_group9[, 6] == 1, 1]), ]
finalMSMS_x57126_group9 <- convert2MSP(MSMS_X57126_group9, splitPattern = "_", splitIndMZ = 1, splitIndRT = 2, names = T, metNames = T, class = T)

## create object finalMSP
finalMSP_group9 <- combine(finalMSMS_att_group9, finalMSMS_obt_group9)
finalMSP_group9 <- combine(finalMSP_group9, finalMSMS_clev_group9)
finalMSP_group9 <- combine(finalMSP_group9, finalMSMS_quad_group9)
finalMSP_group9 <- combine(finalMSP_group9, finalMSMS_x1027_group9)
finalMSP_group9 <- combine(finalMSP_group9, finalMSMS_x57126_group9)

species_group9 <- c(rep("att", length = length(finalMSMS_att_group9)), rep("obt", length = length(finalMSMS_obt_group9)), 
             rep("clev", length = length(finalMSMS_clev_group9)), rep("quad", length = length(finalMSMS_quad_group9)), 
             rep("x1027", length(finalMSMS_x1027_group9)), rep("x57126", length(finalMSMS_x57126_group9)))

binnedMSP_group9 <- binning(msp = finalMSP_group9, tol = 0.05, group = species_group9, method = "median")
similarityMat_group9 <- createSimilarityMatrix(binnedMSP_group9)
##shinyCircos(similarityMat_group9, finalMSP_group9)


similarityMatMZ_group9 <- createOrderedSimMat(similarityMat_group9, order = "mz")
groupname_group9 <- rownames(similarityMatMZ_group9)
linkMat <- createLinkMatrix(similarityMatrix = similarityMatMZ_group9, threshold_low=0.95,threshold_high = 1)
linkMat_cut <- cutLinkMatrix(linkMat, type = "inter") 
circos.par(gap.degree = 0, cell.padding = c(0, 0, 0, 0), track.margin = c(0, 0))

## "att_498.2600691/595.748992" diferuloyl spermidine
plotCircos(groupname_group9, linkMat_cut, initialize = TRUE, featureNames = TRUE,
    cexFeatureNames = 0.3, groupSector = TRUE, groupName = FALSE,
    links = FALSE, highlight = TRUE, colour = colours[c(1,3,2,4:6)], transparency = 0.45)
highlight(groupname = groupname_group9, ind = 25, LinkMatrix = linkMat_cut, colour = colours[c(1,3,2,4:6)], transparency = 0.55) 

## att_470.228995/445.711984 dicaffeoyl spermidine isomer 1 shared with obt
plotCircos(groupname_group9, linkMat_cut, initialize = TRUE, featureNames = TRUE,
    cexFeatureNames = 0.3, groupSector = TRUE, groupName = FALSE,
    links = FALSE, highlight = TRUE, colour = colours[c(1,3,2,4:6)], transparency = 0.45)
highlight(groupname = groupname_group9, ind = c(19), LinkMatrix = linkMat_cut, colour = colours[c(1,3,2,4:6)], transparency = 0.55)

## att_470.2287116/423.60948 att_470.2287831/393.866456 dicaffeoyl spermidine --> does not contain 163 fragment isomer 2 and 3
plotCircos(groupname_group9, linkMat_cut, initialize = TRUE, featureNames = TRUE,
    cexFeatureNames = 0.3, groupSector = TRUE, groupName = FALSE,
    links = FALSE, highlight = TRUE, colour = colours[c(1,3,2,4:6)], transparency = 0.45)
highlight(groupname = groupname_group9, ind = c(17), LinkMatrix = linkMat_cut, colour = colours[c(1,3,2,4:6)], transparency = 0.55,links=T)

## N feruloyl spermidine att_322.2118106/133.303968
plotCircos(groupname_group9, linkMat_cut, initialize = TRUE, featureNames = TRUE,
    cexFeatureNames = 0.3, groupSector = TRUE, groupName = FALSE,
    links = FALSE, highlight = TRUE, colour = colours[c(1,3,2,4:6)], transparency = 0.45)
highlight(groupname = groupname_group9, ind = c(7), LinkMatrix = linkMat_cut, colour = colours[c(1,3,2,4:6)], transparency = 0.55,links=T)



## 350.2066139/248.005968 present in Natt, Nclev, Nxobt1027, Nxobt57126
MSMS_group9[which( "350.2066139" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), ]
## 472.2445026/389.691984 present in Natt, Nclev, Nxobt1027, Nxobt57126
MSMS_group9[which( "472.2445026" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), ]
## 472.2442911/418.746944 present in Natt, Nclev, Nxobt1027, Nxobt57126 --> putative [M+Na+]+ adduct of N'-N''-coumaroyl,caffeoyl spermidine
MSMS_group9[which( "472.2442911" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), ]
## 539.1162839/640.079952 present in Natt, Nquad --> putative dicaffeoyl quinate [M+Na+]+??
MSMS_group9[which( "539.1162839" == unlist(lapply(strsplit(as.character(MSMS_group9[, 4]),  "_"), "[", 1))), ]
## shinyCircos(similarityMat_group9, msp = finalMSP_group9, size = 600)

plot.new()
legend(x = c(0, 1), y = c(1, 0), legend = c(expression(italic("N. attenuata")), 
    expression(italic("N. obtusifolia")), expression(italic("N. clevelandii")),
    expression(italic("N. quadrivalvis")), expression(italic("N. x obtusiata 10/27")), 
    expression(italic("N. x obtusiata 57/126"))), 
    bty = "n", fill = alpha(colours, 0.3), border = alpha(colours, 0.3))


nicIVint <- MSMS_groupDTG[which( "1031.470899" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))),] 
## Nicotianoside V 1117.4681
nicVint <- MSMS_groupDTG[which( "1117.471765" == unlist(lapply(strsplit(as.character(MSMS_groupDTG[, 4]),  "_"), "[", 1))), ]

##lines(nicVint[,"mz"], - nicVint[, "intensity"], type = "h") 50, 64
binnedV_IV <- data.frame(x= as.numeric(rep(colnames(binnedMSP_groupDTG),2)), y = c(binnedMSP_groupDTG[c(50),], - binnedMSP_groupDTG[c(64),]), metabolite = c(rep("Nicotianoside IV", 293), rep("Nicotianoside V", 293)))
ggplot(data = binnedV_IV, aes(x = x, xend=x, y = 0, yend=y, color = metabolite)) + geom_segment() +
    scale_x_continuous(name = "m/z", limits = c(0, 1200), breaks = seq(0, 1250, 250)) + theme_bw() + 
    scale_y_continuous( name = "intensity (%)", limits = c(-100, 100), labels = c(100, 50, 0, 50, 100)) +
    theme(legend.title = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.text.y = element_text(size=12), axis.title = element_text(size=16), axis.text.x = element_text(size = 12)) 

setwd("~/Documents/University/Master/MScArbeit/Report/")
@



<<EF1,echo=FALSE>>=
##setwd("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/")
## calculate mean values from all ELF1 values of all species
## N. attenuata
NattGGPPSEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_1_EF1_Ct.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NattUDPGlu41285EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPGluTF41285_1_2nd_EF1_Ct.csv",skip=8,sep=",",row.names=2,header=T,dec=".",stringsAsFactors = F)
NattUDPRhaTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPRhaTF_1_EF1_Ct.csv",skip=8,sep=",", row.names = 2, header = T,dec = ".",stringsAsFactors  = F)
NattAT1EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/AT1_1_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NattMYB8EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_1_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NattCV86EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_DH29_1__EF1_Ct.csv", skip=8, sep=",", row.names=2, header=T, dec=".", stringsAsFactors = F)
## standard
concOld <- log10(c(10000, 10000, 1000, 1000, 100, 100, 10, 10))
concNew <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENattGGPPSEF1 <- 10^(-1 / lm(NattGGPPSEF1[1:8,"Ct"] ~ concOld)$coefficients[[2]])
ENattGluTFEF1 <- 10^(-1 / lm(NattUDPGlu41285EF1[1:8,"Ct"] ~ concNew)$coefficients[[2]])
ENattRhaTFEF1 <- 10^(-1 / lm(NattUDPRhaTFEF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENattAT1EF1 <- 10^(-1 / lm(NattAT1EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENattMYB8EF1 <- 10^(-1 / lm(NattMYB8EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENattCV86EF1 <- 10^(-1 /lm(NattCV86EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENattEF1 <- median(c(ENattGGPPSEF1, ENattGluTFEF1, ENattRhaTFEF1,  ENattMYB8EF1))
ENattEF1_55 <- median(c(ENattCV86EF1, ENattAT1EF1)) ## for CV86, AT1, DH29

## Ct's for conditions
attEF1 <- list(NattGGPPSEF1[9:23,"Ct"], NattUDPGlu41285EF1[9:23,"Ct"], NattUDPRhaTFEF1[9:23,"Ct"],
               NattAT1EF1[9:23,"Ct"], NattMYB8EF1[9:23, "Ct"], NattCV86EF1[9:23,"Ct"])
medAttEF1 <- unlist(lapply(1:15, function(x) median(c(attEF1[[1]][x], attEF1[[2]][x], attEF1[[3]][x], attEF1[[5]][x]))))
medAttEF1_55 <- unlist(lapply(1:15, function(x) median(c(attEF1[[4]][x], attEF1[[6]][x])))) ## 4 is AT1, 6 is CV86

## N. obtusifolia
NobtGGPPSEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_2_EF1_Ct.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NobtUDPGlu41285EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPGluTF41285_2_EF1_Ct.csv",skip=8,sep=",",row.names=2,header=T,dec=".",stringsAsFactors = F)
NobtUDPRhaTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPRhaTF_2_EF1_Ct.csv",skip=8,sep=",", row.names = 2, header = T,dec = ".",stringsAsFactors  = F)
NobtAT1EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/AT1_2_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NobtMYB8EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_2_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NobtCV86EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_DH29_2__EF1_Ct.csv", skip=8, sep=",", row.names=2, header=T, dec=".", stringsAsFactors = F)
## standard
ENobtGGPPSEF1 <- 10^(-1 / lm(NobtGGPPSEF1[1:8,"Ct"] ~ concOld)$coefficients[[2]])
ENobtGluTFEF1 <- 10^(-1 / lm(NobtUDPGlu41285EF1[1:8,"Ct"] ~ concNew)$coefficients[[2]])
ENobtRhaTFEF1 <- 10^(-1 / lm(NobtUDPRhaTFEF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENobtAT1EF1 <- 10^(-1 / lm(NobtAT1EF1[1:7, "Ct"] ~ concNew[2:8])$coefficients[[2]]) ## one bad
ENobtMYB8EF1 <- 10^(-1 / lm(NobtMYB8EF1[1:8, "Ct"][-3] ~ concNew[-3])$coefficients[[2]]) ## one bad
ENobtCV86EF1 <- 10^(-1 /lm(NobtCV86EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENobtEF1 <- median(c(ENobtGGPPSEF1, ENobtGluTFEF1, ENobtRhaTFEF1, ENobtMYB8EF1))
ENobtEF1_55 <- median(c(ENobtAT1EF1, ENobtCV86EF1))
## Ct's for conditions
obtEF1 <- list(NobtGGPPSEF1[9:23,"Ct"], NobtUDPGlu41285EF1[9:23,"Ct"], NobtUDPRhaTFEF1[9:23,"Ct"],
               NobtAT1EF1[8:22,"Ct"], NobtMYB8EF1[9:23, "Ct"], NobtCV86EF1[9:23,"Ct"])
medObtEF1 <- unlist(lapply(1:15, function(x) median(c(obtEF1[[1]][x], obtEF1[[2]][x], obtEF1[[3]][x], obtEF1[[5]][x]))))
medObtEF1_55 <- unlist(lapply(1:15, function(x) median(c(obtEF1[[4]][x],  obtEF1[[6]][x]))))

## N. clevelandii
NclevGGPPSEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_3_EF1_Ct.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NclevGluTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPGluTF41285_3_EF1_Ct.csv",skip=8,sep=",",row.names=2,header=T,dec=".",stringsAsFactors = F)
NclevRhaTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPRhaTF_3_EF1_Ct.csv",skip=8,sep=",", row.names = 2, header = T,dec = ".",stringsAsFactors  = F)
NclevAT1EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/AT1_3_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NclevMYB8EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_3_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NclevCV86EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_DH29_3_EF1_Ct.csv", skip=8, sep=",", row.names=2, header=T, dec=".", stringsAsFactors = F)
## standard
ENclevGGPPSEF1 <- 10^(-1 / lm(NclevGGPPSEF1[1:8,"Ct"] ~ concOld)$coefficients[[2]])
ENclevGluTFEF1 <- 10^(-1 / lm(NclevGluTFEF1[1:8,"Ct"] ~ concNew)$coefficients[[2]])
ENclevRhaTFEF1 <- 10^(-1 / lm(NclevRhaTFEF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENclevAT1EF1 <- 10^(-1 / lm(NclevAT1EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENclevMYB8EF1 <- 10^(-1 / lm(NclevMYB8EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENclevCV86EF1 <- 10^(-1 /lm(NclevCV86EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENclevEF1 <- median(c(ENclevGGPPSEF1, ENclevGluTFEF1, ENclevRhaTFEF1, ENclevMYB8EF1))
ENclevEF1_55 <- median(c(ENclevAT1EF1, ENclevCV86EF1))
## Ct's for conditions
clevEF1 <- list(NclevGGPPSEF1[9:23,"Ct"], NclevGluTFEF1[9:23,"Ct"], NclevRhaTFEF1[9:23,"Ct"],
               NclevAT1EF1[9:23,"Ct"], NclevMYB8EF1[9:23,"Ct"], NclevCV86EF1[9:23,"Ct"])
medClevEF1 <- unlist(lapply(1:15, function(x) median(c(clevEF1[[1]][x], clevEF1[[2]][x], clevEF1[[3]][x], clevEF1[[5]][x]))))
medClevEF1_55 <- unlist(lapply(1:15, function(x) median(c(clevEF1[[4]][x], clevEF1[[6]][x]))))

## N. quadrivalvis
NquadGGPPSEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_4_EF1_Ct.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NquadGluTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPGluTF41285_4_EF1_Ct.csv",skip=8,sep=",",row.names=2,header=T,dec=".",stringsAsFactors = F)
NquadRhaTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPRhaTF_4_EF1_Ct.csv",skip=8,sep=",", row.names = 2, header = T,dec = ".",stringsAsFactors  = F)
NquadAT1EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/AT1_4_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NquadMYB8EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_4_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
NquadCV86EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_DH29_4_EF1_Ct.csv", skip=8, sep=",", row.names=2, header=T, dec=".", stringsAsFactors = F)
## standard
ENquadGGPPSEF1 <- 10^(-1 / lm(NquadGGPPSEF1[1:8,"Ct"] ~ concOld)$coefficients[[2]])
ENquadGluTFEF1 <- 10^(-1 / lm(NquadGluTFEF1[1:8,"Ct"] ~ concNew[1:8])$coefficients[[2]])
ENquadRhaTFEF1 <- 10^(-1 / lm(NquadRhaTFEF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENquadAT1EF1 <- 10^(-1 / lm(NquadAT1EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENquadMYB8EF1 <- 10^(-1 / lm(NquadMYB8EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENquadCV86EF1 <- 10^(-1 /lm(NquadCV86EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENquadEF1 <- median(c(ENquadGGPPSEF1, ENquadGluTFEF1, ENquadRhaTFEF1, ENquadMYB8EF1))
ENquadEF1_55 <- median(c(ENquadAT1EF1, ENquadCV86EF1))
## Ct's for conditions
quadEF1 <- list(NquadGGPPSEF1[9:23,"Ct"], NquadGluTFEF1[9:23,"Ct"], NquadRhaTFEF1[9:23,"Ct"],
               NquadAT1EF1[9:23,"Ct"], NquadMYB8EF1[9:23, "Ct"], NquadCV86EF1[9:23,"Ct"])
medQuadEF1 <- unlist(lapply(1:15, function(x) median(c(quadEF1[[1]][x], quadEF1[[2]][x], quadEF1[[3]][x], quadEF1[[5]][x]))))
medQuadEF1_55 <- unlist(lapply(1:15, function(x) median(c(quadEF1[[4]][x], quadEF1[[6]][x]))))

## N. x obtusiata 10/27
Nx1027GGPPSEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_5_EF1_Ct.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
Nx1027GluTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPGluTF41285_5_EF1_Ct.csv",skip=8,sep=",",row.names=2,header=T,dec=".",stringsAsFactors = F)
Nx1027RhaTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPRhaTF_5_EF1_Ct.csv",skip=8,sep=",", row.names = 2, header = T,dec = ".",stringsAsFactors  = F)
Nx1027AT1EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/AT1_5_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
Nx1027MYB8EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_5_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
Nx1027CV86EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_DH29_5_EF1_Ct.csv", skip=8, sep=",", row.names=2, header=T, dec=".", stringsAsFactors = F)
## standard
ENx1027GGPPSEF1 <- 10^(-1 / lm(Nx1027GGPPSEF1[1:8,"Ct"] ~ concOld)$coefficients[[2]])
ENx1027GluTFEF1 <- 10^(-1 / lm(Nx1027GluTFEF1[1:7,"Ct"] ~ concNew[1:7])$coefficients[[2]])
ENx1027RhaTFEF1 <- 10^(-1 / lm(Nx1027RhaTFEF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENx1027AT1EF1 <- 10^(-1 / lm(Nx1027AT1EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENx1027MYB8EF1 <- 10^(-1 / lm(Nx1027MYB8EF1[1:8, "Ct"][-6] ~ concNew[-6])$coefficients[[2]]) ## one bad
ENx1027CV86EF1 <- 10^(-1 /lm(Nx1027CV86EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENx1027EF1 <- median(c(ENx1027GGPPSEF1, ENx1027GluTFEF1, ENx1027RhaTFEF1, ENx1027MYB8EF1))
ENx1027EF1_55 <- median(c(ENx1027AT1EF1, ENx1027CV86EF1))
## Ct's for conditions
x1027EF1 <- list(Nx1027GGPPSEF1[9:23,"Ct"], Nx1027GluTFEF1[8:22,"Ct"], Nx1027RhaTFEF1[9:23,"Ct"],
               Nx1027AT1EF1[9:23,"Ct"], Nx1027MYB8EF1[9:23, "Ct"], Nx1027CV86EF1[9:23,"Ct"])
medX1027EF1 <- unlist(lapply(1:15, function(x) median(c(x1027EF1[[1]][x], x1027EF1[[2]][x], x1027EF1[[3]][x], x1027EF1[[5]][x]))))
medX1027EF1_55 <- unlist(lapply(1:15, function(x) median(c(x1027EF1[[4]][x], x1027EF1[[6]][x]))))

## N. x obtusiata 57/126
Nx57126GGPPSEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_6_EF1_Ct.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
Nx57126GluTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPGluTF41285_6_EF1_Ct.csv",skip=8,sep=",",row.names=2,header=T,dec=".",stringsAsFactors = F)
Nx57126RhaTFEF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/UDPRhaTF_6_EF1_Ct.csv",skip=8,sep=",", row.names = 2, header = T,dec = ".",stringsAsFactors  = F)
Nx57126AT1EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/AT1_6_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
Nx57126MYB8EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_6_EF1.csv", skip = 8, sep=",", row.names = 2,header =T,dec=".",stringsAsFactors = F)
Nx57126CV86EF1 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_DH29_6_EF1_Ct.csv", skip=8, sep=",", row.names=2, header=T, dec=".", stringsAsFactors = F)
## standard
ENx57126GGPPSEF1 <- 10^(-1 / lm(Nx57126GGPPSEF1[1:8,"Ct"] ~ concOld)$coefficients[[2]])
ENx57126GluTFEF1 <- 10^(-1 / lm(Nx57126GluTFEF1[1:8,"Ct"] ~ concNew)$coefficients[[2]])
ENx57126RhaTFEF1 <- 10^(-1 / lm(Nx57126RhaTFEF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENx57126AT1EF1 <- 10^(-1 / lm(Nx57126AT1EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENx57126MYB8EF1 <- 10^(-1 / lm(Nx57126MYB8EF1[1:8, "Ct"][-6] ~ concNew[-6])$coefficients[[2]])
ENx57126CV86EF1 <- 10^(-1 /lm(Nx57126CV86EF1[1:8, "Ct"] ~ concNew)$coefficients[[2]])
ENx57126EF1 <- median(c(ENx57126GGPPSEF1, ENx57126GluTFEF1, ENx57126RhaTFEF1, ENx57126MYB8EF1))
ENx57126EF1_55 <- median(c(ENx57126AT1EF1, ENx57126CV86EF1))

## Ct's for conditions
x57126EF1 <- list(Nx57126GGPPSEF1[9:23,"Ct"], Nx57126GluTFEF1[9:23,"Ct"], 
                  c(Nx57126RhaTFEF1[9:18,"Ct"], NA, Nx57126RhaTFEF1[19:21,"Ct"], NA),
               Nx57126AT1EF1[9:23,"Ct"], Nx57126MYB8EF1[9:23, "Ct"], Nx57126CV86EF1[9:23,"Ct"])
medX57126EF1 <- unlist(lapply(1:15, function(x) median(c(x57126EF1[[1]][x], x57126EF1[[2]][x], x57126EF1[[3]][x], x57126EF1[[5]][x]), na.rm = T)))
medX57126EF1_55 <- unlist(lapply(1:15, function(x) median(c(x57126EF1[[4]][x], x57126EF1[[6]][x]), na.rm = T)))

setwd("/home/thomas/Documents/University/Master/MScArbeit/Report")
@

<<GGPPS,fig.show='hide',eval=TRUE,show=FALSE,echo=FALSE,message=FALSE>>=
## N. attenuata
NattGGPPSatt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_1_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattGGPPSobt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_1_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattGGPPSattCt <- NattGGPPSatt[9:23,"Ct"]
NattGGPPSobtCt <- NattGGPPSobt[9:23,"Ct"]
conc <- log10(c(10000, 10000, 1000, 1000, 100, 100, 10, 10))
ENattatt <- 10^(-1 / lm(NattGGPPSatt[1:5,"Ct"] ~ conc[1:5])$coefficients[[2]]) ## use only 1:5 since 1:1000 dilutions seems not accurate
ENattobt <- 10^(-1 / lm(NattGGPPSobt[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]])
foldChangeAttattGGPPS <-  ENattEF1 ^ (medAttEF1) / ENattatt^(NattGGPPSattCt) ## was ENattEF1 ^ (NattGGPPSEF1Ct)
foldChangeAttobtGGPPS <- ENattEF1 ^  (medAttEF1) / ENattobt ^ (NattGGPPSobtCt)
ind <- c(rep(1, 5), rep(2, 5), rep(3,5))
meanAttattGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeAttattGGPPS[x == ind])))
meanAttobtGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeAttobtGGPPS[x == ind])))
matAttGGPPS <- matrix(c(meanAttattGGPPS / (meanAttattGGPPS + meanAttobtGGPPS), meanAttobtGGPPS / (meanAttattGGPPS + meanAttobtGGPPS)), nrow = 2, byrow = T)

## N. obtusifolia
NobtGGPPSatt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_2_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtGGPPSobt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_2_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtGGPPSattCt <- NobtGGPPSatt[9:23,"Ct"]
NobtGGPPSobtCt <- NobtGGPPSobt[9:23,"Ct"]
NobtGGPPSEF1Ct <- NobtGGPPSEF1[9:23,"Ct"]
conc <- log10(c(10000, 10000, 1000, 1000, 100, 100, 10, 10))
ENobtatt <- 10^(-1 / lm(NobtGGPPSatt[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) ## use only 1:6 since 1:1000 dilutions seems not accurate
ENobtobt <- 10^(-1 / lm(NobtGGPPSobt[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]])
ENobtGGPPSEF1 <- 10^(-1 / lm(NobtGGPPSEF1[1:8,"Ct"] ~ conc)$coefficients[[2]])
foldChangeObtattGGPPS <-  ENobtGGPPSEF1 ^ (NobtGGPPSEF1Ct) / ENobtatt^(NobtGGPPSattCt)
foldChangeObtobtGGPPS <- ENobtGGPPSEF1 ^  (NobtGGPPSEF1Ct) / ENobtobt ^ (NobtGGPPSobtCt)
ind <- c(rep(1, 5), rep(2, 5), rep(3,5))
meanObtattGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeObtattGGPPS[x == ind])))
meanObtobtGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeObtobtGGPPS[x == ind])))
matObt <- matrix(c(meanObtattGGPPS / (meanObtattGGPPS + meanObtobtGGPPS), meanObtobtGGPPS / (meanObtattGGPPS + meanObtobtGGPPS)), nrow = 2, byrow = T)


## N.clevelandii
NclevGGPPSatt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_3_2nd_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevGGPPSobt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_3_2nd_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevGGPPSattCt <- NclevGGPPSatt[9:23,"Ct"]
NclevGGPPSobtCt <- NclevGGPPSobt[9:23,"Ct"]
NclevGGPPSEF1Ct <- NclevGGPPSEF1[9:23, "Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENclevatt <- 10^(-1 / lm(NclevGGPPSatt[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENclevobt <- 10^(-1 / lm(NclevGGPPSobt[1:8,"Ct"][-c(3:4)] ~ conc[-c(3:4)])$coefficients[[2]])
foldChangeClevattGGPPS <-  ENclevEF1 ^ (NclevGGPPSEF1Ct) / ENclevatt^(NclevGGPPSattCt)
foldChangeClevobtGGPPS <- ENclevEF1 ^  (NclevGGPPSEF1Ct) / ENclevobt ^ (NclevGGPPSobtCt)
ind <- c(rep(1, 5), rep(2, 5), rep(3,5))
meanClevattGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeClevattGGPPS[x == ind])))
meanClevobtGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeClevobtGGPPS[x == ind])))
matClevGGPPS <- matrix(c(meanClevattGGPPS / (meanClevattGGPPS + meanClevobtGGPPS), meanClevobtGGPPS / (meanClevattGGPPS + meanClevobtGGPPS)), nrow = 2, byrow = T)

## N. quadrivalvis
NquadGGPPSatt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_4_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadGGPPSobt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_4_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadGGPPSattCt <- NquadGGPPSatt[9:23,"Ct"]
NquadGGPPSobtCt <- NquadGGPPSobt[9:23,"Ct"]
conc <- log10(c(10000, 10000, 1000, 1000, 100, 100, 10, 10))
ENquadatt <- 10^(-1 / lm(NquadGGPPSatt[1:6,"Ct"][-5] ~ conc[1:5])$coefficients[[2]]) ## use only 1:6 since 1:1000 dilutions seems not accurate
ENquadobt <- 10^(-1 / lm(NquadGGPPSobt[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]])
foldChangeQuadattGGPPS <-  ENquadEF1 ^ (medQuadEF1) / ENquadatt^(NquadGGPPSattCt)
foldChangeQuadobtGGPPS <- ENquadEF1 ^  (medQuadEF1) / ENquadobt ^ (NquadGGPPSobtCt)
ind <- c(rep(1, 5), rep(2, 5), rep(3,5))
meanQuadattGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeQuadattGGPPS[x == ind], na.rm=TRUE)))
meanQuadobtGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeQuadobtGGPPS[x == ind], na.rm=TRUE)))
matQuadGGPPS <- matrix(c(meanQuadattGGPPS / (meanQuadattGGPPS + meanQuadobtGGPPS), meanQuadobtGGPPS / (meanQuadattGGPPS + meanQuadobtGGPPS)), nrow = 2, byrow = T)

## N.x obtusifolia 10/27
Nx1027GGPPSatt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_5_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027GGPPSobt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_5_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027GGPPSattCt <- Nx1027GGPPSatt[9:23,"Ct"]
Nx1027GGPPSobtCt <- Nx1027GGPPSobt[9:23,"Ct"]
conc <- log10(c(10000, 10000, 1000, 1000, 100, 100, 10, 10))
ENx1027att <- 10^(-1 / lm(Nx1027GGPPSatt[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENx1027obt <- 10^(-1 / lm(Nx1027GGPPSobt[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]])
foldChangeX1027attGGPPS <-  ENx1027EF1 ^ (medX1027EF1) / ENx1027att^(Nx1027GGPPSattCt)
foldChangeX1027obtGGPPS <- ENx1027EF1 ^  (medX1027EF1) / ENx1027obt ^ (Nx1027GGPPSobtCt)
ind <- c(rep(1, 5), rep(2, 5), rep(3,5))
meanX1027attGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeX1027attGGPPS[x == ind])))
meanX1027obtGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeX1027obtGGPPS[x == ind])))
matX1027GGPPS <- matrix(c(meanX1027attGGPPS / (meanX1027attGGPPS + meanX1027obtGGPPS), meanX1027obtGGPPS / (meanX1027attGGPPS + meanX1027obtGGPPS)), nrow = 2, byrow = T)

## N x obtusifolia 57/126
Nx57126GGPPSatt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_6_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126GGPPSobt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/GGPPS_6_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126GGPPSattCt <- Nx57126GGPPSatt[9:23,"Ct"]
Nx57126GGPPSobtCt <- Nx57126GGPPSobt[9:23,"Ct"]
conc <- log10(c(10000, 10000, 1000, 1000, 100, 100, 10, 10))
ENx57126att <- 10^(-1 / lm(Nx57126GGPPSatt[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENx57126obt <- 10^(-1 / lm(Nx57126GGPPSobt[3:8,"Ct"] ~ conc[3:8])$coefficients[[2]])
foldChangeX57126attGGPPS <- ENx57126EF1 ^ (medX57126EF1) / ENx57126att^(Nx57126GGPPSattCt)
foldChangeX57126obtGGPPS <- ENx57126EF1 ^  (medX57126EF1) / ENx57126obt ^ (Nx57126GGPPSobtCt)
ind <- c(rep(1, 5), rep(2, 5), rep(3,5))
meanX57126attGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeX57126attGGPPS[x == ind])))
meanX57126obtGGPPS <- unlist(lapply(1:3, function(x) mean(foldChangeX57126obtGGPPS[x == ind])))
matX57126GGPPS <- matrix(c(meanX57126attGGPPS / (meanX57126attGGPPS + meanX57126obtGGPPS), meanX57126obtGGPPS / (meanX57126attGGPPS + meanX57126obtGGPPS)), nrow = 2, byrow = T)
GGPPSttest <- list(
    Attatt01 =  t.test(foldChangeAttattGGPPS[1:5], foldChangeAttattGGPPS[6:10], "less"),
    Attatt05 = t.test(foldChangeAttattGGPPS[1:5], foldChangeAttattGGPPS[11:15], "less"),
    Obtobt01 = t.test(foldChangeObtobtGGPPS[1:5], foldChangeObtobtGGPPS[6:10], "less"),
    Obtobt05 = t.test(foldChangeObtobtGGPPS[1:5], foldChangeObtobtGGPPS[11:15], "less"), 
    Clevatt01 = t.test(foldChangeClevattGGPPS[1:5], foldChangeClevattGGPPS[6:10], "less"),
    Clevobt01 = t.test(foldChangeClevobtGGPPS[1:5], foldChangeClevobtGGPPS[6:10], "less"),
    Clevatt05 = t.test(foldChangeClevattGGPPS[1:5], foldChangeClevattGGPPS[11:15], "less"),
    Clevobt05 = t.test(foldChangeClevobtGGPPS[1:5], foldChangeClevobtGGPPS[11:15], "less"),
    Quadatt01 = t.test(foldChangeQuadattGGPPS[1:5], foldChangeQuadattGGPPS[6:10], "less"),
    Quadobt01 = t.test(foldChangeQuadobtGGPPS[1:5], foldChangeQuadobtGGPPS[6:10], "less"),
    Quadatt05 = t.test(foldChangeQuadattGGPPS[1:5], foldChangeQuadattGGPPS[11:15], "less"),
    Quadobt05 = t.test(foldChangeQuadobtGGPPS[1:5], foldChangeQuadobtGGPPS[11:15], "less"),
    X1027att01 = t.test(foldChangeX1027attGGPPS[1:5], foldChangeX1027attGGPPS[6:10], "less"),
    X1027obt01 = t.test(foldChangeX1027obtGGPPS[1:5], foldChangeX1027obtGGPPS[6:10], "less"),
    X1027att05 = t.test(foldChangeX1027attGGPPS[1:5], foldChangeX1027attGGPPS[11:15], "less"),
    X1027obt05 = t.test(foldChangeX1027obtGGPPS[1:5], foldChangeX1027obtGGPPS[11:15], "less"),
    X57126att01  = t.test(foldChangeX57126attGGPPS[1:5], foldChangeX57126attGGPPS[6:10], "less"),
    X57126obt01 = t.test(foldChangeX57126obtGGPPS[1:5], foldChangeX57126obtGGPPS[6:10], "less"),
    X57126att05 = t.test(foldChangeX57126attGGPPS[1:5], foldChangeX57126attGGPPS[11:15], "less"),
    X57126obt05 = t.test(foldChangeX57126obtGGPPS[1:5], foldChangeX57126obtGGPPS[11:15], "less"))

## get pvalues
pvaluesGGPPS_l <- lapply(GGPPSttest, function(x) x$p.value)
## FDR is 0.05
## declare the tests of rank 1,2, ...j as signiciant 
alphaadjusted <- p.adjust(unlist(pvaluesGGPPS_l), method = "fdr") ##0.05 * (1:length(GGPPSttest)) / length(GGPPSttest)
## store alpha adjusted in GGPPSttest
for(i in names(alphaadjusted)) {
    GGPPSttest[[i]]$alphaadj <- alphaadjusted[i]
}

## build final data.frame
DFGGPPS <- data.frame(species = c(rep("N. attenuata", 30), rep("N. obtusifolia", 30), rep("N. clevelandii", 30),
                             rep("N. quadrivalvis", 30), rep("N. x obtusiata 10/27", 30), rep("N. x obtusiata 57/126", 30)),
        allele = c(rep("N. attenuata", 15), rep("N. obtusifolia", 15)),
        time = c(rep("C", 5), rep("1 h", 5), rep("5 h", 5)),
        relativeExp = c(foldChangeAttattGGPPS, foldChangeAttobtGGPPS,
            foldChangeObtattGGPPS, foldChangeObtobtGGPPS,
            foldChangeClevattGGPPS, foldChangeClevobtGGPPS,
            foldChangeQuadattGGPPS, foldChangeQuadobtGGPPS,
            foldChangeX1027attGGPPS, foldChangeX1027obtGGPPS,
            foldChangeX57126attGGPPS, foldChangeX57126obtGGPPS)
)

## define colours
myblue <- rgb(red=0, green=0, blue=1, alpha=0.6)
myred <- rgb(red=1, green=0, blue=0, alpha=0.6)

library(ggplot2)
DFGGPPS$time <- factor(DFGGPPS$time, levels = c("C", "1 h", "5 h"))
DFGGPPS$species <- factor(DFGGPPS$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
update_geom_defaults("point", list(colour = NULL))
p <- ggplot(DFGGPPS, aes(x=time, y=relativeExp)) +
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    geom_boxplot(aes(fill=allele, y = relativeExp, col = allele), position="identity" ) +
    scale_fill_manual(values = c(myred,  myblue)) + scale_color_manual(values = c(myred, myblue)) + 
    labs(x = "", y = expression(paste(italic("GGPPS"), " / ", italic("ELF1"), alpha))) +
    #geom_errorbar(aes(ymin= ci_l, ymax= ci_u), width=.2,  # Width of the error bars
    #            position="identity") + theme(legend.text = element_text(face = "italic")) +
    theme(axis.text=element_text(size=12), axis.title=element_text(size=16)) + 
    scale_y_continuous(trans="sqrt", breaks = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5), labels = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5))

# Define arc coordinates
r1 <- 0.5; r2 <- 1; t <- seq(0, 180, by = 1) * pi / 180
x1 <- r1 * cos(t); x2 <- r2 * cos(t)
y1 <- r1*0.03 * sin(t); y2 <- r2*0.03 * sin(t)
y1[20:162] <- y1[20]; y2[20:162] <- y2[20]

## data.frame for asterisks
label.df <- data.frame(species = c("N. attenuata", "N. attenuata", "N. clevelandii", rep("N. x obtusiata 10/27", 4),
                                   rep("N. x obtusiata 57/126", 4)),
                       time = c(1.5, 2, 2, 1.5, 2, 1.5, 2, 1.5, 2, 1.5, 2),
                       relativeExp = c(0.02, 0.05, 0.1, 0.07, 0.135, 0.08, 0.145, 0.105, 0.165, 0.115, 0.175))

arc.df1 <- data.frame(Group = x1, Value = y1)
arc.df2 <- data.frame(Group = x2, Value = y2)
arc.dfNatt1h <- cbind(arc.df1, species = "N. attenuata")
arc.dfNatt5h <- cbind(arc.df2, species = "N. attenuata")
arc.dfNclev5h <- cbind(arc.df2, species = "N. clevelandii")
arc.dfNx10271h <- cbind(arc.df1, species = "N. x obtusiata 10/27")
arc.dfNx10275h <- cbind(arc.df2, species = "N. x obtusiata 10/27")
arc.dfNx571261h <- cbind(arc.df1, species = "N. x obtusiata 57/126")
arc.dfNx571265h <- cbind(arc.df2, species = "N. x obtusiata 57/126")
## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
p <- p + geom_text(data = label.df, size = 10, label = c("**", "*", "*", "*", "*", "**", "***", "*", "*", "*", "*"), 
    colour = c(myred, myred, myblue, myred, myred, myblue, myblue, myred, myred, myblue, myblue)) +
    geom_line(data = arc.dfNatt1h, aes(Group+1.5, Value+0.01, species), lty = 1) +
    geom_line(data = arc.dfNatt5h, aes(Group+2, Value+0.03, species), lty=1) +
    geom_line(data = arc.dfNclev5h, aes(Group+2, Value+0.08, species), lty=1) +
    geom_line(data = arc.dfNx10271h, aes(Group + 1.5, Value + 0.06), lty = 1) + 
    geom_line(data = arc.dfNx10275h, aes(Group + 2, Value + 0.11), lty = 1) +
    geom_line(data = arc.dfNx571265h, aes(Group + 2, Value + 0.15), lty = 1) + 
    geom_line(data = arc.dfNx571261h, aes(Group + 1.5, Value + 0.09), lty = 1)  

ggsave("~/Documents/Publikationen/paper_allotetraploid/expression_ggpps.pdf", p, device = "pdf",
       width = 10, height = 8.36)
@

<<GluTF41285,fig.show='hide',eval=TRUE,show=FALSE,echo=FALSE,message=FALSE>>=
setwd("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/")
## N. attenuata
NattGluTF41285att <- read.csv("UDPGluTF41285_1_2nd_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattGluTF41285obt <- read.csv("UDPGluTF41285_1_2nd_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattGluTF41285attCt <- NattGluTF41285att[9:23,"Ct"]
NattGluTF41285obtCt <- NattGluTF41285obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENattatt <- 10^(-1 / lm(NattGluTF41285att[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENattobt <- 10^(-1 / lm(NattGluTF41285obt[1:8,"Ct"][-7] ~ conc[-8])$coefficients[[2]])
foldChangeAttattGluTF <-  ENattEF1 ^ (medAttEF1) / ENattatt^(NattGluTF41285attCt)
foldChangeAttobtGluTF <- ENattEF1 ^  (medAttEF1) / ENattobt ^ (NattGluTF41285obtCt)

## N. obtusifolia
NobtGluTF41285att <- read.csv("UDPGluTF41285_2_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtGluTF41285obt <- read.csv("UDPGluTF41285_2_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtGluTF41285attCt <- NobtGluTF41285att[9:23,"Ct"]
NobtGluTF41285obtCt <- NobtGluTF41285obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENobtatt <- 2.0 ## 10^(-1 / lm(NobtGluTF41285att[1:8,"Ct"] ~ conc)$coefficients[[2]]) ## experimental data result in unrealistic value
ENobtobt <- 10^(-1 / lm(NobtGluTF41285obt[1:8,"Ct"] ~ conc)$coefficients[[2]])
foldChangeObtattGluTF <-  ENobtEF1 ^ (medObtEF1) / ENobtatt^(NobtGluTF41285attCt)
foldChangeObtattGluTF[is.na(foldChangeObtattGluTF)] <- 0
foldChangeObtobtGluTF <- ENobtEF1 ^  (medObtEF1) / ENobtobt ^ (NobtGluTF41285obtCt)

## N. clevelandii
NclevGluTF41285att <- read.csv("UDPGluTF41285_3_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevGluTF41285obt <- read.csv("UDPGluTF41285_3_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevGluTF41285attCt <- NclevGluTF41285att[9:23,"Ct"]
NclevGluTF41285obtCt <- NclevGluTF41285obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENclevatt <-  10^(-1 / lm(NclevGluTF41285att[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]])
ENclevobt <- 10^(-1 / lm(NclevGluTF41285obt[1:8,"Ct"] ~ conc)$coefficients[[2]])
foldChangeClevattGluTF <-  ENclevEF1 ^ (medClevEF1) / ENclevatt^(NclevGluTF41285attCt)
foldChangeClevobtGluTF <- ENclevEF1 ^  (medClevEF1) / ENclevobt ^ (NclevGluTF41285obtCt)

## N. quadrivalvis
NquadGluTF41285att <- read.csv("UDPGluTF41285_4_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadGluTF41285obt <- read.csv("UDPGluTF41285_4_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadGluTF41285attCt <- NquadGluTF41285att[9:23,"Ct"]
NquadGluTF41285obtCt <- NquadGluTF41285obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENquadatt <-  10^(-1 / lm(NquadGluTF41285att[1:8,"Ct"] ~ conc)$coefficients[[2]])
ENquadobt <- 10^(-1 / lm(NquadGluTF41285obt[1:7,"Ct"] ~ conc[1:7])$coefficients[[2]]) ## last element is not accurate
foldChangeQuadattGluTF <-  ENquadEF1 ^ (medQuadEF1) / ENquadatt^(NquadGluTF41285attCt)
foldChangeQuadobtGluTF <- ENquadEF1 ^  (medQuadEF1) / ENquadobt ^ (NquadGluTF41285obtCt)

## N. x obtusiata 10/27
Nx1027GluTF41285att <- read.csv("UDPGluTF41285_5_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027GluTF41285obt <- read.csv("UDPGluTF41285_5_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027GluTF41285attCt <- Nx1027GluTF41285att[9:23,"Ct"]
Nx1027GluTF41285obtCt <- Nx1027GluTF41285obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx1027att <-  10^(-1 / lm(Nx1027GluTF41285att[1:7,"Ct"] ~ conc[-8])$coefficients[[2]])
ENx1027obt <- 10^(-1 / lm(Nx1027GluTF41285obt[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeX1027attGluTF <-  ENx1027EF1 ^ (medX1027EF1) / ENx1027att^(Nx1027GluTF41285attCt)
foldChangeX1027obtGluTF <- ENx1027EF1 ^  (medX1027EF1) / ENx1027obt ^ (Nx1027GluTF41285obtCt)

## N. x obtusiata 57/126
Nx57126GluTF41285att <- read.csv("UDPGluTF41285_6_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126GluTF41285obt <- read.csv("UDPGluTF41285_6_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126GluTF41285attCt <- Nx57126GluTF41285att[9:23,"Ct"]
Nx57126GluTF41285obtCt <- Nx57126GluTF41285obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx57126att <-  10^(-1 / lm(Nx57126GluTF41285att[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) ## last two elements are not accurate
ENx57126obt <- 10^(-1 / lm(Nx57126GluTF41285obt[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeX57126attGluTF <-  ENx57126EF1 ^ (medX57126EF1) / ENx57126att^(Nx57126GluTF41285attCt)
foldChangeX57126attGluTF[2] <- NA; foldChangeX57126attGluTF[13] <- NA;
foldChangeX57126obtGluTF <- ENx57126EF1 ^  (medX57126EF1) / ENx57126obt ^ (Nx57126GluTF41285obtCt)

GluTFttest <- list(
    Attatt01 =  t.test(foldChangeAttattGluTF[1:5], foldChangeAttattGluTF[6:10], "less"),
    Attatt05 = t.test(foldChangeAttattGluTF[1:5], foldChangeAttattGluTF[11:15], "less"),
    Obtobt01 = t.test(foldChangeObtobtGluTF[1:5], foldChangeObtobtGluTF[6:10], "less"),
    Obtobt05 = t.test(foldChangeObtobtGluTF[1:5], foldChangeObtobtGluTF[11:15], "less"), 
    Clevatt01 = t.test(foldChangeClevattGluTF[1:5], foldChangeClevattGluTF[6:10], "less"),
    Clevobt01 = t.test(foldChangeClevobtGluTF[1:5], foldChangeClevobtGluTF[6:10], "less"), 
    Clevatt05 = t.test(foldChangeClevattGluTF[1:5], foldChangeClevattGluTF[11:15], "less"),
    Clevobt05 = t.test(foldChangeClevobtGluTF[1:5], foldChangeClevobtGluTF[11:15], "less"),
    Quadatt01 = t.test(foldChangeQuadattGluTF[1:5], foldChangeQuadattGluTF[6:10], "less"),
    Quadobt01 = t.test(foldChangeQuadobtGluTF[1:5], foldChangeQuadobtGluTF[6:10], "less"),
    Quadatt05 = t.test(foldChangeQuadattGluTF[1:5], foldChangeQuadattGluTF[11:15], "less"),
    Quadobt05 = t.test(foldChangeQuadobtGluTF[1:5], foldChangeQuadobtGluTF[11:15], "less"),
    X1027att01 = t.test(foldChangeX1027attGluTF[1:5], foldChangeX1027attGluTF[6:10], "less"),
    X1027obt01 = t.test(foldChangeX1027obtGluTF[1:5], foldChangeX1027obtGluTF[6:10], "less"),
    X1027att05 = t.test(foldChangeX1027attGluTF[1:5], foldChangeX1027attGluTF[11:15], "less"),
    X1027obt05 = t.test(foldChangeX1027obtGluTF[1:5], foldChangeX1027obtGluTF[11:15], "less"),
    X57126att01  = t.test(foldChangeX57126attGluTF[1:5], foldChangeX57126attGluTF[6:10], "less"),
    X57126obt01 = t.test(foldChangeX57126obtGluTF[1:5], foldChangeX57126obtGluTF[6:10], "less"),
    X57126att05 = t.test(foldChangeX57126attGluTF[1:5], foldChangeX57126attGluTF[11:15], "less"),
    X57126obt05 = t.test(foldChangeX57126obtGluTF[1:5], foldChangeX57126obtGluTF[11:15], "less"))

## get pvalues
pvaluesGluTF_l <- lapply(GluTFttest, function(x) x$p.value)
## FDR is 0.05
## declare the tests of rank 1,2, ...j as signiciant 
alphaadjusted <- p.adjust(unlist(pvaluesGluTF_l), method = "fdr") ## 0.05 * (1:length(GluTFttest)) / length(GluTFttest)
##alphaadjusted[order(unlist(pvaluesGluTF_l))] <- alphaadjusted
## store alpha adjusted in GluTFttest
for(i in names(alphaadjusted)) {
    GluTFttest[[i]]$alphaadj <- alphaadjusted[i]
}

## build final data.frame
DFGluTF <- data.frame(species = c(rep("N. attenuata", 30), rep("N. obtusifolia", 30), rep("N. clevelandii", 30),
                             rep("N. quadrivalvis", 30), rep("N. x obtusiata 10/27", 30), rep("N. x obtusiata 57/126", 30)),
        allele = c(rep("N. attenuata", 15), rep("N. obtusifolia", 15)),
        time = c(rep("C", 5), rep("1 h", 5), rep("5 h", 5)),
        relativeExp = c(foldChangeAttattGluTF, foldChangeAttobtGluTF,
            foldChangeObtattGluTF, foldChangeObtobtGluTF,
            foldChangeClevattGluTF, foldChangeClevobtGluTF,
            foldChangeQuadattGluTF, foldChangeQuadobtGluTF,
            foldChangeX1027attGluTF, foldChangeX1027obtGluTF,
            foldChangeX57126attGluTF, foldChangeX57126obtGluTF)
)

## define colours
myblue <- rgb(red=0, green=0, blue=1, alpha=0.6)
myred <- rgb(red=1, green=0, blue=0, alpha=0.6)

library(ggplot2)
DFGluTF$time <- factor(DFGluTF$time, levels = c("C", "1 h", "5 h"))
DFGluTF$species <- factor(DFGluTF$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
update_geom_defaults("point", list(colour = NULL))
p <- ggplot(DFGluTF, aes(x=time, y=relativeExp)) +
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    geom_boxplot(aes(fill=allele, y = relativeExp, col = allele), position="identity" ) +
    scale_fill_manual(values = c(myred,  myblue)) + scale_color_manual(values = c(myred, myblue)) + 
    labs(x = "", y = expression(paste(italic("GluTF41285"), " / ", italic("ELF1"), alpha))) +
    #geom_errorbar(aes(ymin= ci_l, ymax= ci_u), width=.2,  # Width of the error bars
    #            position="identity") + theme(legend.text = element_text(face = "italic")) +
    theme(axis.text=element_text(size=12), axis.title=element_text(size=16)) 
   # scale_y_continuous(trans="sqrt", breaks = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5), labels = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5))

## set asterisks
label.df <- data.frame(species = c("N. attenuata",  "N. obtusifolia", "N. clevelandii", "N. quadrivalvis","N. x obtusiata 10/27", "N. x obtusiata 10/27", "N. x obtusiata 10/27", "N. x obtusiata 57/126", "N. x obtusiata 57/126"),
                       time = c(1.5, 1.5, 2, 1.5, 1.5, 1.5, 2, 1.5, 1.5),
                       relativeExp = c(0.215, 0.085, 0.11, 0.04, 0.45, 0.455, 0.51, 0.405, 0.435))

# Define arc coordinates
r1 <- 0.5
r2 <- 1
t <- seq(0, 180, by = 1) * pi / 180
x1 <- r1 * cos(t)
x2 <- r2 * cos(t)
y1 <- r1*0.03 * sin(t)
y2 <- r2*0.015 * sin(t)
y1[20:162] <- y1[20]
y2[20:162] <- y2[20]

arc.df1 <- data.frame(Group = x1, Value = y1)
arc.df2 <- data.frame(Group = x2, Value = y2)
arc.dfNatt1h <- cbind(arc.df1, species = "N. attenuata")
arc.dfNobt1h <- cbind(arc.df1, species = "N. obtusifolia")
arc.dfNclev1h <- cbind(arc.df1, species = "N. clevelandii")
arc.dfNclev5h <- cbind(arc.df2, species = "N. clevelandii")
arc.dfNquad1h <- cbind(arc.df1, species = "N. quadrivalvis")
arc.dfNx10271h <- cbind(arc.df1, species = "N. x obtusiata 10/27")
arc.dfNx10275h <- cbind(arc.df2, species = "N. x obtusiata 10/27")
arc.dfNx571261h <- cbind(arc.df1, species = "N. x obtusiata 57/126")

## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
p <- p + geom_text(data = label.df, size = 10, label = c("**", "*", "**", "*",".", "*", "**", "*", "*"), colour = c(myred, myblue, myred, myred, myred, myblue, myblue, myred, myblue)) +
    geom_line(data = arc.dfNatt1h, aes(Group+1.5, Value+0.2, species), lty = 1) +
    geom_line(data = arc.dfNobt1h, aes(Group+1.5, Value+0.07, species), lty=1) +
    #geom_line(data = arc.dfNclev1h, aes(Group+1.5, Value+0.07, species), lty=1) + 
    geom_line(data = arc.dfNclev5h, aes(Group+2, Value+0.09, species), lty=1) +
    geom_line(data = arc.dfNquad1h, aes(Group+1.5, Value+0.03, species), lty=1) +
    geom_line(data = arc.dfNx10271h, aes(Group + 1.5, Value + 0.41), lty = 1) +
    geom_line(data = arc.dfNx10275h, aes(Group + 2, Value + 0.48), lty = 1) + 
    geom_line(data = arc.dfNx571261h, aes(Group + 1.5, Value + 0.387), lty = 1)

ggsave("~/Documents/Publikationen/paper_allotetraploid/expression_glutf41285.pdf", p, device = "pdf",
       width = 10, height = 8.36)
@

<<RhaTF,eval=TRUE,echo=FALSE,fig.show='hide'>>=
setwd("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/")
## N. attenuata
NattRhaTFatt <- read.csv("UDPRhaTF_1_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattRhaTFobt <- read.csv("UDPRhaTF_1_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattRhaTFattCt <- NattRhaTFatt[9:23,"Ct"]
NattRhaTFobtCt <- NattRhaTFobt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENattatt <-  10^(-1 / lm(NattRhaTFatt[1:8,"Ct"] ~ conc)$coefficients[[2]])
ENattobt <- 2 ## 10^(-1 / lm(NattRhaTFobt[1:4,"Ct"] ~ conc[1:4])$coefficients[[2]]) ## last four are NA
foldChangeAttattRhaTF <-  ENattEF1 ^ (medAttEF1) / ENattatt^(NattRhaTFattCt)
foldChangeAttobtRhaTF <- ENattEF1 ^  (medAttEF1) / ENattobt ^ (NattRhaTFobtCt)
foldChangeAttobtRhaTF[is.na(foldChangeAttobtRhaTF)] <- 0

## N. obtusifolia
NobtRhaTFatt <- read.csv("UDPRhaTF_2_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtRhaTFobt <- read.csv("UDPRhaTF_2_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtRhaTFattCt <- NobtRhaTFatt[9:23,"Ct"]
NobtRhaTFobtCt <- NobtRhaTFobt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENobtatt <- 2 ## 10^(-1 / lm(NobtRhaTFatt[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]]) ## looks that N.att doesn't work
ENobtobt <- 10^(-1 / lm(NobtRhaTFobt[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeObtattRhaTF <-  ENobtEF1 ^ (medObtEF1) / ENobtatt^(NobtRhaTFattCt)
foldChangeObtobtRhaTF <- ENobtEF1 ^  (medObtEF1) / ENobtobt ^ (NobtRhaTFobtCt)

## N. clevelandii
NclevRhaTFatt <- read.csv("UDPRhaTF_3_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevRhaTFobt <- read.csv("UDPRhaTF_3_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevRhaTFattCt <- c(NclevRhaTFatt[7:9,"Ct"] , NA, NclevRhaTFatt[10:13,"Ct"], NA, NA, NclevRhaTFatt[14:16,"Ct"], NA, NclevRhaTFatt[18,"Ct"])
NclevRhaTFobtCt <- NclevRhaTFobt[8:22,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENclevatt <- 10^(-1 / lm(NclevRhaTFatt[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) ## last two are not accurate
ENclevobt <- 10^(-1 / lm(NclevRhaTFobt[1:7,"Ct"] ~ conc[1:7])$coefficients[[2]]) 
foldChangeClevattRhaTF <-  ENclevEF1 ^ (medClevEF1) / ENclevatt^(NclevRhaTFattCt)
foldChangeClevobtRhaTF <- ENclevEF1 ^  (medClevEF1) / ENclevobt ^ (NclevRhaTFobtCt)
## 14th element seems to be an outlier
foldChangeClevattRhaTF[which(is.na(foldChangeClevattRhaTF))] <- NA
foldChangeClevobtRhaTF[which(is.na(foldChangeClevobtRhaTF))] <- NA

## N. quadrivalvis
NquadRhaTFatt <- read.csv("UDPRhaTF_4_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadRhaTFobt <- read.csv("UDPRhaTF_4_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadRhaTFattCt <- c(NquadRhaTFatt[6:10, "Ct"], NA, NA, NquadRhaTFatt[11:16, "Ct"], NA, NquadRhaTFatt[17, "Ct"]) 
NquadRhaTFobtCt <- c(NA, NquadRhaTFobt[4:12, "Ct"], NA, NA, NquadRhaTFobt[13:15,"Ct"])
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENquadatt <- 10^(-1 / lm(NquadRhaTFatt[2:5,"Ct"] ~ conc[2:6][-3])$coefficients[[2]]) 
ENquadobt <- 2 ## 10^(-1 / lm(NquadRhaTFobt[1:3,"Ct"] ~ conc[1:3])$coefficients[[2]]) 
foldChangeQuadattRhaTF <-  ENquadEF1 ^ (medQuadEF1) / ENquadatt^(NquadRhaTFattCt)
foldChangeQuadobtRhaTF <- ENquadEF1 ^  (medQuadEF1) / ENquadobt ^ (NquadRhaTFobtCt)

## N. x obt 10/27
Nx1027RhaTFatt <- read.csv("UDPRhaTF_5_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027RhaTFobt <- read.csv("UDPRhaTF_5_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027RhaTFattCt <- Nx1027RhaTFatt[9:23,"Ct"] 
Nx1027RhaTFobtCt <- Nx1027RhaTFobt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx1027att <- 10^(-1 / lm(Nx1027RhaTFatt[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENx1027obt <- 10^(-1 / lm(Nx1027RhaTFobt[1:8,"Ct"] ~ conc)$coefficients[[2]])
foldChangeX1027attRhaTF <-  ENx1027EF1 ^ (medX1027EF1) / ENx1027att ^ (Nx1027RhaTFattCt)
foldChangeX1027obtRhaTF <- ENx1027EF1 ^  (medX1027EF1) / ENx1027obt ^ (Nx1027RhaTFobtCt)

## N. x obt 57/126
Nx57126RhaTFatt <- read.csv("UDPRhaTF_6_att_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126RhaTFobt <- read.csv("UDPRhaTF_6_obt_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126RhaTFattCt <- Nx57126RhaTFatt[9:23,"Ct"] 
Nx57126RhaTFobtCt <- c(Nx57126RhaTFobt[9,"Ct"], NA, Nx57126RhaTFobt[10:17,"Ct"], NA, Nx57126RhaTFobt[18:21,"Ct"])
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx57126att <- 10^(-1 / lm(Nx57126RhaTFatt[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENx57126obt <- 10^(-1 / lm(Nx57126RhaTFobt[1:8,"Ct"] ~ conc)$coefficients[[2]])
foldChangeX57126attRhaTF <- ENx57126EF1 ^ (medX57126EF1) / ENx57126att^(Nx57126RhaTFattCt)
foldChangeX57126obtRhaTF <- ENx57126EF1 ^  (medX57126EF1) / ENx57126obt ^ (Nx57126RhaTFobtCt)

RhaTFttest <- list(
    Attatt01 =  t.test(foldChangeAttattRhaTF[1:5], foldChangeAttattRhaTF[6:10], "less"),
    Attatt05 = t.test(foldChangeAttattRhaTF[1:5], foldChangeAttattRhaTF[11:15], "less"),
    Obtobt01 = t.test(foldChangeObtobtRhaTF[1:5], foldChangeObtobtRhaTF[6:10], "less"),
    Obtobt05 = t.test(foldChangeObtobtRhaTF[1:5], foldChangeObtobtRhaTF[11:15], "less"), 
    Clevatt01 = t.test(foldChangeClevattRhaTF[1:5], foldChangeClevattRhaTF[6:10], "less"),
    Clevobt01 = t.test(foldChangeClevobtRhaTF[1:5], foldChangeClevobtRhaTF[6:10], "greater"), ## alternative = "greater"
    Clevatt05 = t.test(foldChangeClevattRhaTF[1:5], foldChangeClevattRhaTF[11:15], "less"),
    Clevobt05 = t.test(foldChangeClevobtRhaTF[1:5], foldChangeClevobtRhaTF[11:15], "less"),
    Quadatt01 = t.test(foldChangeQuadattRhaTF[1:5], foldChangeQuadattRhaTF[6:10], "less"),
    Quadobt01 = t.test(foldChangeQuadobtRhaTF[1:5], foldChangeQuadobtRhaTF[6:10], "less"),
    Quadatt05 = t.test(foldChangeQuadattRhaTF[1:5], foldChangeQuadattRhaTF[11:15], "less"),
    Quadobt05 = t.test(foldChangeQuadobtRhaTF[1:5], foldChangeQuadobtRhaTF[11:15], "less"),
    X1027att01 = t.test(foldChangeX1027attRhaTF[1:5], foldChangeX1027attRhaTF[6:10], "less"),
    X1027obt01 = t.test(foldChangeX1027obtRhaTF[1:5], foldChangeX1027obtRhaTF[6:10], "less"),
    X1027att05 = t.test(foldChangeX1027attRhaTF[1:5], foldChangeX1027attRhaTF[11:15], "less"),
    X1027obt05 = t.test(foldChangeX1027obtRhaTF[1:5], foldChangeX1027obtRhaTF[11:15], "less"),
    X57126att01  = t.test(foldChangeX57126attRhaTF[1:5], foldChangeX57126attRhaTF[6:10], "less"),
    X57126obt01 = t.test(foldChangeX57126obtRhaTF[1:5], foldChangeX57126obtRhaTF[6:10], "less"),
    X57126att05 = t.test(foldChangeX57126attRhaTF[1:5], foldChangeX57126attRhaTF[11:15], "less"),
    X57126obt05 = t.test(foldChangeX57126obtRhaTF[1:5], foldChangeX57126obtRhaTF[11:15], "less"))

## get pvalues
pvaluesRhaTF_l <- lapply(RhaTFttest, function(x) x$p.value)
## FDR is 0.05
## declare the tests of rank 1,2, ...j as signiciant 
alphaadjusted <- p.adjust(unlist(pvaluesRhaTF_l), method = "fdr") ##0.05 * (1:length(RhaTFttest)) / length(RhaTFttest)
## store alpha adjusted in RhaTFttest
for(i in names(alphaadjusted)) {
    RhaTFttest[[i]]$alphaadj <- alphaadjusted[i]
}

## build final data.frame
DFRhaTF <- data.frame(species = c(rep("N. attenuata", 30), rep("N. obtusifolia", 30), rep("N. clevelandii", 30),
                             rep("N. quadrivalvis", 30), rep("N. x obtusiata 10/27", 30), rep("N. x obtusiata 57/126", 30)),
        allele = c(rep("N. attenuata", 15), rep("N. obtusifolia", 15)),
        time = c(rep("C", 5), rep("1 h", 5), rep("5 h", 5)),
        relativeExp = c(foldChangeAttattRhaTF, foldChangeAttobtRhaTF,
            foldChangeObtattRhaTF, foldChangeObtobtRhaTF,
            foldChangeClevattRhaTF, foldChangeClevobtRhaTF,
            foldChangeQuadattRhaTF, foldChangeQuadobtRhaTF,
            foldChangeX1027attRhaTF, foldChangeX1027obtRhaTF,
            foldChangeX57126attRhaTF, foldChangeX57126obtRhaTF)
)

## define colours
myblue <- rgb(red=0, green=0, blue=1, alpha=0.6)
myred <- rgb(red=1, green=0, blue=0, alpha=0.6)

library(ggplot2)
DFRhaTF$time <- factor(DFRhaTF$time, levels = c("C", "1 h", "5 h"))
DFRhaTF$species <- factor(DFRhaTF$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
update_geom_defaults("point", list(colour = NULL))
p <- ggplot(DFRhaTF, aes(x=time, y=relativeExp)) +
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    geom_boxplot(aes(fill=allele, y = relativeExp, col = allele), position="identity" ) +
    scale_fill_manual(values = c(myred,  myblue)) + scale_color_manual(values = c(myred, myblue)) + 
    labs(x = "", y = expression(paste(italic("RhaTF"), " / ", italic("ELF1"), alpha))) +
    #geom_errorbar(aes(ymin= ci_l, ymax= ci_u), width=.2,  # Width of the error bars
    #            position="identity") + theme(legend.text = element_text(face = "italic")) +
    theme(axis.text=element_text(size=12), axis.title=element_text(size=16)) +
    scale_y_continuous(trans="sqrt", breaks = c(0.001, 0.01, 0.05, 0.1), labels = c(0.001, 0.01, 0.05, 0.1))

label.df <- data.frame(species = c("N. attenuata", "N. obtusifolia", "N. clevelandii", rep("N. x obtusiata 10/27", 4),
                                   rep("N. x obtusiata 57/126", 3)),
                        time = c(1.5, 1.5, 2, 1.5, 2, 1.5, 2, 1.5, 2, 1.5),
                        relativeExp = c(0.112, 0.083, 0.0112, 0.039, 0.05, 0.041, 0.052, 0.068, 0.08, 0.071))

# Define arc coordinates
r1 <- 0.5
r2 <- 1
t <- seq(0, 180, by = 1) * pi / 180
x1 <- r1 * cos(t)
x2 <- r2 * cos(t)
y1 <- r1*0.008 * sin(t)
y2 <- r2*0.004 * sin(t)
y1[20:162] <- y1[20]
y2[20:162] <- y2[20]
 
arc.df1 <- data.frame(Group = x1, Value = y1)
arc.df2 <- data.frame(Group = x2, Value = y2)
arc.dfNatt1h <- cbind(arc.df1, species = "N. attenuata")
arc.dfNobt1h <- cbind(arc.df1, species = "N. obtusifolia")
arc.dfNclev5h <- cbind(arc.df2, species = "N. clevelandii")
arc.dfNx10271h <- cbind(arc.df1, species = "N. x obtusiata 10/27")
arc.dfNx10275h <- cbind(arc.df2, species = "N. x obtusiata 10/27")
arc.dfNx571261h <- cbind(arc.df1, species = "N. x obtusiata 57/126")
arc.dfNx571265h <- cbind(arc.df2, species = "N. x obtusiata 57/126")

# ## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
p <- p + geom_text(data = label.df, size = 10, label = c(".", ".", ".", ".", ".", ".", ".", ".", ".", "."), colour = c(myred, myblue, myred, myred, myred, myblue, myblue, myred, myred, myblue)) +
    geom_line(data = arc.dfNatt1h, aes(Group+1.5, Value+0.103, species), lty = 1) +
    geom_line(data = arc.dfNobt1h, aes(Group+1.5, Value+0.075, species), lty=1) +
    geom_line(data = arc.dfNclev5h, aes(Group+2, Value+0.006, species), lty=1) +
    geom_line(data = arc.dfNx10271h, aes(Group + 1.5, Value + 0.034), lty = 1) +
    geom_line(data = arc.dfNx10275h, aes(Group + 2, Value + 0.043), lty = 1) + 
    geom_line(data = arc.dfNx571261h, aes(Group + 1.5, Value + 0.06), lty = 1) + 
    geom_line(data = arc.dfNx571265h, aes(Group + 2, Value + 0.07), lty = 1)

ggsave("~/Documents/Publikationen/paper_allotetraploid/expression_rhatf.pdf", p, device = "pdf",
       width = 10, height = 8.36)
@

<<MYB8,eval=TRUE,show=FALSE,echo=FALSE,message=FALSE,fig.show='hide'>>=
## N. attenuata
NattMYB8att <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_1_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F) 
NattMYB8obt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_1_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattMYB8attCt <- NattMYB8att[9:23, "Ct"]
NattMYB8obtCt <- NattMYB8obt[3:17,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENattatt <- 10^(-1 / lm(NattMYB8att[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENattobt <- 2 ## 10^(-1 / lm(NattMYB8obt[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) ## doesn't work 
foldChangeAttattMYB8 <-  ENattEF1 ^ (medAttEF1) / ENattatt ^ (NattMYB8attCt)
foldChangeAttobtMYB8 <- ENobtEF1 ^  (medAttEF1) / ENattobt ^ (NattMYB8obtCt)
foldChangeAttobtMYB8[is.na(foldChangeAttobtMYB8)] <- 0

## N. obtusifolia
NobtMYB8att <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_2_att_excluded.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F) 
NobtMYB8obt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_2_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F) 
NobtMYB8attCt <- c(rep(NA, 5), NobtMYB8att[4:12,"Ct"], NA)
NobtMYB8obtCt <- NobtMYB8obt[7:21,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENobtatt <- 2 ## 10^(-1 / lm(NobtMYB8att[1:3,"Ct"] ~ conc[1:3])$coefficients[[2]]) seems not to work
ENobtobt <- 10^(-1 / lm(NobtMYB8obt[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) 
foldChangeObtattMYB8 <- ENobtEF1 ^ (medObtEF1) / ENobtatt ^ (NobtMYB8attCt)
foldChangeObtattMYB8[is.na(foldChangeObtattMYB8)] <- 0
foldChangeObtobtMYB8 <- ENobtEF1 ^  (medObtEF1) / ENobtobt ^ (NobtMYB8obtCt)
foldChangeObtobtMYB8[is.na(foldChangeObtobtMYB8)] <- 0

## N. clevelandii
NclevMYB8att <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_3_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F) 
## for NclevMYB8 there was no expression from the Nobt allele at all
NclevMYB8attCt <- NclevMYB8att[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENclevatt <- 10^(-1 / lm(NclevMYB8att[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeClevattMYB8 <- ENclevEF1 ^ (medClevEF1) / ENclevatt ^ (NclevMYB8attCt)
foldChangeClevattMYB8[is.na(foldChangeClevattMYB8)] <- 0

## N. quadrivalvis
NquadMYB8att <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_4_att_excluded.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F) 
## for NquadMYB8 there was no expression from the Nobt allele at all
NquadMYB8attCt <- NclevMYB8att[6:20,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENquadatt <- 10^(-1 / lm(NquadMYB8att[1:5,"Ct"] ~ conc[1:5])$coefficients[[2]]) ## only 5 measurement
foldChangeQuadattMYB8 <- ENquadEF1 ^ (medQuadEF1) / ENquadatt ^ (NquadMYB8attCt)
foldChangeQuadattMYB8[is.na(foldChangeQuadattMYB8)] <- 0

## N. x obtusiata 10/27
Nx1027MYB8att <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_5_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F) 
Nx1027MYB8obt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_5_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027MYB8attCt <- Nx1027MYB8att[9:23, "Ct"]
Nx1027MYB8obtCt <- c(NA, Nx1027MYB8obt[8,"Ct"], NA, NA, Nx1027MYB8obt[9:14,"Ct"], NA, Nx1027MYB8obt[15:18, "Ct"])
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx1027att <- 10^(-1 / lm(Nx1027MYB8att[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENx1027obt <- 10^(-1 / lm(Nx1027MYB8obt[1:7,"Ct"] ~ conc[1:7])$coefficients[[2]]) ## last seems to be outlier
foldChangeX1027attMYB8 <- ENx1027EF1 ^ (medX1027EF1) / ENx1027att ^ (Nx1027MYB8attCt)
foldChangeX1027attMYB8[is.na(foldChangeX1027attMYB8)] <- 0
foldChangeX1027obtMYB8 <- ENx1027EF1 ^  (medX1027EF1) / ENx1027obt ^ (Nx1027MYB8obtCt)
foldChangeX1027obtMYB8[is.na(foldChangeX1027obtMYB8)] <- 0

## N. x obtusiata 57/126
Nx57126MYB8att <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_6_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F) 
Nx57126MYB8obt <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/MYB8_6_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126MYB8attCt <- Nx57126MYB8att[9:23, "Ct"]
Nx57126MYB8obtCt <- Nx57126MYB8att[8:22, "Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx57126att <- 10^(-1 / lm(Nx57126MYB8att[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
ENx57126obt <- 10^(-1 / lm(Nx57126MYB8obt[1:7,"Ct"] ~ conc[-6])$coefficients[[2]]) 
foldChangeX57126attMYB8 <- ENx57126EF1 ^ (medX57126EF1) / ENx57126att ^ (Nx57126MYB8attCt)
foldChangeX57126attMYB8[is.na(foldChangeX57126attMYB8)] <- 0
foldChangeX57126obtMYB8 <- ENx57126EF1 ^ (medX57126EF1) / ENx57126obt ^ (Nx57126MYB8obtCt)
foldChangeX57126obtMYB8[is.na(foldChangeX57126obtMYB8)] <- 0

MYB8ttest <- list(
    Attatt01 =  t.test(foldChangeAttattMYB8[1:5], foldChangeAttattMYB8[6:10], "less"),
    Attatt05 = t.test(foldChangeAttattMYB8[1:5], foldChangeAttattMYB8[11:15], "less"),
    Attobt05 = t.test(foldChangeAttobtMYB8[1:5], foldChangeAttobtMYB8[11:15], "less"), ## too little observations for AttobtMYB8[1:6]
    Obtobt01 = t.test(foldChangeObtobtMYB8[1:5], foldChangeObtobtMYB8[6:10], "less"),
    Obtatt01 =  t.test(foldChangeObtattMYB8[1:5], foldChangeObtattMYB8[6:10], "less"),
    Obtobt05 = t.test(foldChangeObtobtMYB8[1:5], foldChangeObtobtMYB8[11:15], "less"), 
    Obtatt05 = t.test(foldChangeObtattMYB8[1:5], foldChangeObtattMYB8[11:15], "less"),
    Clevatt01 = t.test(foldChangeClevattMYB8[1:5], foldChangeClevattMYB8[6:10], "less"),
    Clevatt05 = t.test(foldChangeClevattMYB8[1:5], foldChangeClevattMYB8[11:15], "less"),
    Quadatt01 = t.test(foldChangeQuadattMYB8[1:5], foldChangeQuadattMYB8[6:10], "less"),
    Quadatt05 = t.test(foldChangeQuadattMYB8[1:5], foldChangeQuadattMYB8[11:15], "less"),
    X1027att01 = t.test(foldChangeX1027attMYB8[1:5], foldChangeX1027attMYB8[6:10], "less"),
    X1027obt01 = t.test(foldChangeX1027obtMYB8[1:5], foldChangeX1027obtMYB8[6:10], "less"),
    X1027att05 = t.test(foldChangeX1027attMYB8[1:5], foldChangeX1027attMYB8[11:15], "less"),
    X1027obt05 = t.test(foldChangeX1027obtMYB8[1:5], foldChangeX1027obtMYB8[11:15], "less"),
    X57126att01  = t.test(foldChangeX57126attMYB8[1:5], foldChangeX57126attMYB8[6:10], "less"),
    X57126obt01 = t.test(foldChangeX57126obtMYB8[1:5], foldChangeX57126obtMYB8[6:10], "less"),
    X57126att05 = t.test(foldChangeX57126attMYB8[1:5], foldChangeX57126attMYB8[11:15], "less"),
    X57126obt05 = t.test(foldChangeX57126obtMYB8[1:5], foldChangeX57126obtMYB8[11:15], "less"))

## get pvalues
pvaluesMYB8_l <- lapply(MYB8ttest, function(x) x$p.value)
## FDR is 0.05
## declare the tests of rank 1,2, ...j as signiciant 
alphaadjusted <- p.adjust(unlist(pvaluesMYB8_l), method = "fdr") ##0.05 * (1:length(MYB8ttest)) / length(MYB8ttest)
#alphaadjusted[order(unlist(pvaluesMYB8_l))] <- alphaadjusted
## store alpha adjusted in MYB8ttest
for(i in names(alphaadjusted)) {
    MYB8ttest[[i]]$alphaadj <- alphaadjusted[i]
}

## build final data.frame
DFMYB8 <- data.frame(species = c(rep("N. attenuata", 30), rep("N. obtusifolia", 30), rep("N. clevelandii", 15),
                             rep("N. quadrivalvis", 15), rep("N. x obtusiata 10/27", 30), rep("N. x obtusiata 57/126", 30)),
        allele = c(rep("N. attenuata", 15), rep("N. obtusifolia", 15), 
                   rep("N. attenuata", 15), rep("N. obtusifolia", 15),
                   rep("N. attenuata", 30),
                   rep("N. attenuata", 15), rep("N. obtusifolia", 15),
                   rep("N. attenuata", 15), rep("N. obtusifolia", 15)),
        time = c(rep("C", 5), rep("1 h", 5), rep("5 h", 5)),
        relativeExp = c(foldChangeAttattMYB8, foldChangeAttobtMYB8,
                foldChangeObtattMYB8, foldChangeObtobtMYB8, 
                foldChangeClevattMYB8, foldChangeQuadattMYB8,
                foldChangeX1027attMYB8, foldChangeX1027obtMYB8,
                foldChangeX57126attMYB8, foldChangeX57126obtMYB8))

DFMYB8$time <- factor(DFMYB8$time, levels = c("C", "1 h", "5 h"))
DFMYB8$species <- factor(DFMYB8$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
update_geom_defaults("point", list(colour = NULL))
p <- ggplot(DFMYB8, aes(x=time, y=relativeExp)) +
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    geom_boxplot(aes(fill=allele, y = relativeExp, col = allele), position="identity" ) +
    scale_fill_manual(values = c(myred,  myblue)) + scale_color_manual(values = c(myred, myblue)) + 
    labs(x = "", y = expression(paste(italic("MYB8"), " / ", italic("ELF1"), alpha))) +
    #geom_errorbar(aes(ymin= ci_l, ymax= ci_u), width=.2,  # Width of the error bars
    #            position="identity") + theme(legend.text = element_text(face = "italic")) +
    theme(axis.text=element_text(size=12), axis.title=element_text(size=16)) +
    scale_y_continuous(trans="sqrt", breaks = c(0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.5, 0.75, 1, 1.25), labels = c(0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.5, 0.75, 1, 1.25))

## set asterisks
label.df <- data.frame(species = c("N. attenuata", "N. obtusifolia", "N. obtusifolia", "N. clevelandii", "N. x obtusiata 10/27",  "N. x obtusiata 57/126"),
                       time = c(1.5, 1.5, 2, 2, 1.5, 1.5),
                        relativeExp = c(1.38, 0.055, 0.09, 0.23, 0.65, 0.12))
 
# Define arc coordinates
r1 <- 0.5
r2 <- 1
t <- seq(0, 180, by = 1) * pi / 180
x1 <- r1 * cos(t)
x2 <- r2 * cos(t)
y1 <- r1*0.06 * sin(t)
y2 <- r2*0.035 * sin(t)
y1[20:162] <- y1[20]
y2[20:162] <- y2[20]
 
arc.df1 <- data.frame(Group = x1, Value = y1)
arc.df2 <- data.frame(Group = x2, Value = y2)
arc.dfNatt1h <- cbind(arc.df1, species = "N. attenuata")
arc.dfNobt1h <- cbind(arc.df1, species = "N. obtusifolia")
arc.dfNobt5h <- cbind(arc.df2, species = "N. obtusifolia")
arc.dfNclev5h <- cbind(arc.df2, species = "N. clevelandii")
arc.dfNx10271h <- cbind(arc.df1, species = "N. x obtusiata 10/27")
arc.dfNx571261h <- cbind(arc.df1, species = "N. x obtusiata 57/126")

# ## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
p <- p + geom_text(data = label.df, label = c(".", ".", ".", ".", ".", "."), size = 10, colour = c(myred, myblue, myred, myred, myred, myred)) +
    geom_line(data = arc.dfNatt1h, aes(Group+1.5, Value+1.28, species), lty = 1) +
    geom_line(data = arc.dfNobt1h, aes(Group+1.5, Value+0.025, species), lty=1) +
    geom_line(data = arc.dfNobt5h, aes(Group+2, Value+0.05, species), lty=1) +
    geom_line(data = arc.dfNclev5h, aes(Group+2, Value + 0.18, species), lty = 1) +
    geom_line(data = arc.dfNx10271h, aes(Group + 1.5, Value + 0.57), lty = 1) +
    geom_line(data = arc.dfNx571261h, aes(Group + 1.5, Value + 0.08), lty = 1) 

ggsave("~/Documents/Publikationen/paper_allotetraploid/expression_myb8.pdf", p, device = "pdf",
       width = 10, height = 8.36)
@

<<AT1,eval=TRUE,show=FALSE,echo=FALSE,message=FALSE,fig.show='hide'>>=
setwd("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/")
## N. attenuata
NattAT1att <- read.csv("AT1_1_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattAT1obt <- read.csv("AT1_1_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattAT1attCt <- NattAT1att[8:22,"Ct"]
NattAT1obtCt <- NattAT1obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENattatt <- 10^(-1 / lm(NattAT1att[1:7,"Ct"] ~ conc[1:7])$coefficients[[2]]) ## only one observation for the last element
ENattobt <- 2 ## 10^(-1 / lm(NattAT1obt[1:8,"Ct"] ~ conc)$coefficients[[2]]) ## does not work
foldChangeAttattAT1 <-  ENattEF1_55 ^ (medAttEF1_55) / ENattatt^(NattAT1attCt)
foldChangeAttobtAT1 <- ENattEF1_55 ^  (medAttEF1_55) / ENattobt ^ (NattAT1obtCt)
foldChangeAttobtAT1[is.na(foldChangeAttobtAT1)] <- 0

## N. obtusifolia
NobtAT1att <- read.csv("AT1_2_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtAT1obt <- read.csv("AT1_2_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtAT1attCt <- NobtAT1att[9:23,"Ct"]
NobtAT1obtCt <- NobtAT1obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENobtatt <- 10^(-1 / lm(NobtAT1att[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]]) 
ENobtobt <- 10^(-1 / lm(NobtAT1obt[1:8,"Ct"][-7] ~ conc[-7])$coefficients[[2]]) ## 7 is NA
foldChangeObtattAT1 <-  ENobtEF1_55 ^ (medObtEF1_55) / ENobtatt^(NobtAT1attCt)
foldChangeObtattAT1[is.na(foldChangeObtattAT1)] <- 0
foldChangeObtobtAT1 <- ENobtEF1_55 ^  (medObtEF1_55) / ENobtobt ^ (NobtAT1obtCt)
foldChangeObtobtAT1[is.na(foldChangeObtobtAT1)] <- 0

## N. clevelandii
NclevAT1att <- read.csv("AT1_3_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevAT1obt <- read.csv("AT1_3_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevAT1attCt <- NclevAT1att[9:23,"Ct"]
NclevAT1obtCt <- NclevAT1obt[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENclevatt <- 10^(-1 / lm(NclevAT1att[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]]) 
ENclevobt <- 10^(-1 / lm(NclevAT1obt[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]]) 
foldChangeClevattAT1 <-  ENclevEF1_55 ^ (medClevEF1_55) / ENclevatt ^ (NclevAT1attCt)
foldChangeClevattAT1[is.na(foldChangeClevattAT1)] <- 0
foldChangeClevobtAT1 <- ENclevAT1EF1 ^  (medClevEF1_55) / ENclevobt ^ (NclevAT1obtCt)
foldChangeClevobtAT1[is.na(foldChangeClevobtAT1)] <- 0

## N. quadrivalvis
NquadAT1att <- read.csv("AT1_4_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadAT1obt <- read.csv("AT1_4_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadAT1attCt <- NquadAT1att[7:21,"Ct"]
NquadAT1obtCt <- NquadAT1obt[7:21,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENquadatt <- 10^(-1 / lm(NquadAT1att[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) 
ENquadobt <- 10^(-1 / lm(NquadAT1obt[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) 
foldChangeQuadattAT1 <- ENquadEF1_55 ^ (medQuadEF1_55) / ENquadatt^(NquadAT1attCt)
foldChangeQuadattAT1[is.na(foldChangeQuadattAT1)] <- 0
foldChangeQuadobtAT1 <- ENquadEF1_55 ^  (medQuadEF1_55) / ENquadobt ^ (NquadAT1obtCt)
foldChangeQuadobtAT1[is.na(foldChangeQuadobtAT1)] <- 0

## N. x obtusiata 10/27
Nx1027AT1att <- read.csv("AT1_5_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027AT1obt <- read.csv("AT1_5_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027AT1attCt <- Nx1027AT1att[9:23,"Ct"]
Nx1027AT1obtCt <- Nx1027AT1obt[7:21,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx1027att <- 10^(-1 / lm(NquadAT1att[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) 
ENx1027obt <- 10^(-1 / lm(NquadAT1obt[1:6,"Ct"][-4] ~ conc[1:6][-4])$coefficients[[2]]) 
foldChangeX1027attAT1 <- ENx1027EF1_55 ^ (medX1027EF1_55) / ENx1027att^(Nx1027AT1attCt)
foldChangeX1027attAT1[is.na(foldChangeX1027attAT1)] <- 0
foldChangeX1027obtAT1 <- ENx1027EF1_55 ^  (medX1027EF1_55) / ENx1027obt ^ (Nx1027AT1obtCt)
foldChangeX1027obtAT1[is.na(foldChangeX1027obtAT1)] <- 0

## N. x obtusiata 57/126
Nx57126AT1att <- read.csv("AT1_6_att.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126AT1obt <- read.csv("AT1_6_obt.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126AT1attCt <- Nx57126AT1att[9:23,"Ct"]
Nx57126AT1obtCt <- Nx57126AT1obt[6:20,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx57126att <- 10^(-1 / lm(Nx57126AT1att[1:8,"Ct"][-5] ~ conc[-5])$coefficients[[2]]) 
ENx57126obt <- 10^(-1 / lm(Nx57126AT1obt[1:5,"Ct"] ~ conc[3:7])$coefficients[[2]]) 
foldChangeX57126attAT1 <- ENx57126EF1_55 ^ (medX57126EF1_55) / ENx57126att^(Nx57126AT1attCt)
foldChangeX57126attAT1[is.na(foldChangeX57126attAT1)] <- 0
foldChangeX57126obtAT1 <- ENx57126EF1_55 ^  (medX57126EF1_55) / ENx57126obt ^ (Nx57126AT1obtCt)
foldChangeX57126obtAT1[is.na(foldChangeX57126obtAT1)] <- 0

AT1ttest <- list(
    Attatt01 =  t.test(foldChangeAttattAT1[1:5], foldChangeAttattAT1[6:10], "less"),
    Attobt01 = t.test(foldChangeAttobtAT1[1:5], foldChangeAttobtAT1[6:10], "less"),
    Attatt05 = t.test(foldChangeAttattAT1[1:5], foldChangeAttattAT1[11:15], "less"),
    Attobt05 = t.test(foldChangeAttobtAT1[1:5], foldChangeAttobtAT1[11:15], "less"),
    Obtatt01 = t.test(foldChangeObtattAT1[1:5], foldChangeObtattAT1[6:10], "less"),
    Obtobt01 = t.test(foldChangeObtobtAT1[1:5], foldChangeObtobtAT1[6:10], "less"),
    Obtatt05 = t.test(foldChangeObtattAT1[1:5], foldChangeObtattAT1[11:15], "less"),
    Obtobt05 = t.test(foldChangeObtobtAT1[1:5], foldChangeObtobtAT1[11:15], "less"), 
    Clevatt01 = t.test(foldChangeClevattAT1[1:5], foldChangeClevattAT1[6:10], "less"),
    Clevobt01 = t.test(foldChangeClevobtAT1[1:5], foldChangeClevobtAT1[6:10], "less"),
    Clevatt05 = t.test(foldChangeClevattAT1[1:5], foldChangeClevattAT1[11:15], "less"),
    Clevobt05 = t.test(foldChangeClevobtAT1[1:5], foldChangeClevobtAT1[11:15], "less"),
    Quadatt01 = t.test(foldChangeQuadattAT1[1:5], foldChangeQuadattAT1[6:10], "less"),
    Quadobt01 = t.test(foldChangeQuadobtAT1[1:5], foldChangeQuadobtAT1[6:10], "less"),
    Quadatt05 = t.test(foldChangeQuadattAT1[1:5], foldChangeQuadattAT1[11:15], "less"),
    Quadobt05 = t.test(foldChangeQuadobtAT1[1:5], foldChangeQuadobtAT1[11:15], "less"),
    X1027att01 = t.test(foldChangeX1027attAT1[1:5], foldChangeX1027attAT1[6:10], "less"),
    X1027obt01 = t.test(foldChangeX1027obtAT1[1:5], foldChangeX1027obtAT1[6:10], "less"),
    X1027att05 = t.test(foldChangeX1027attAT1[1:5], foldChangeX1027attAT1[11:15], "less"),
    X1027obt05 = t.test(foldChangeX1027obtAT1[1:5], foldChangeX1027obtAT1[11:15], "less"),
    X57126att01  = t.test(foldChangeX57126attAT1[1:5], foldChangeX57126attAT1[6:10], "less"),
    X57126obt01 = t.test(foldChangeX57126obtAT1[1:5], foldChangeX57126obtAT1[6:10], "less"),
    X57126att05 = t.test(foldChangeX57126attAT1[1:5], foldChangeX57126attAT1[11:15], "less"),
    X57126obt05 = t.test(foldChangeX57126obtAT1[1:5], foldChangeX57126obtAT1[11:15], "less"))

## get pvalues
pvaluesAT1_l <- lapply(AT1ttest, function(x) x$p.value)
## FDR is 0.05
## declare the tests of rank 1,2, ...j as signiciant 
alphaadjusted <- p.adjust(unlist(pvaluesAT1_l), method = "fdr") ## 0.05 * (1:length(AT1ttest)) / length(AT1ttest)
#alphaadjusted[order(unlist(pvaluesAT1_l))] <- alphaadjusted
## store alpha adjusted in AT1ttest
for(i in names(alphaadjusted)) {
    AT1ttest[[i]]$alphaadj <- alphaadjusted[i]
}

## build final data.frame
DFAT1 <- data.frame(species = c(rep("N. attenuata", 30), rep("N. obtusifolia", 30), 
            rep("N. clevelandii", 30), rep("N. quadrivalvis", 30), 
            rep("N. x obtusiata 10/27", 30), rep("N. x obtusiata 57/126", 30)),
        allele = c(rep("N. attenuata", 15), rep("N. obtusifolia", 15), 
                   rep("N. attenuata", 15), rep("N. obtusifolia", 15),
                   rep("N. attenuata", 15), rep("N. obtusifolia", 15),
                   rep("N. attenuata", 15), rep("N. obtusifolia", 15),
                   rep("N. attenuata", 15), rep("N. obtusifolia", 15),
                   rep("N. attenuata", 15), rep("N. obtusifolia", 15)),
        time = c(rep("C", 5), rep("1 h", 5), rep("5 h", 5)),
        relativeExp = c(foldChangeAttattAT1, foldChangeAttobtAT1,
                foldChangeObtattAT1, foldChangeObtobtAT1, 
                foldChangeClevattAT1, foldChangeClevobtAT1,
                foldChangeQuadattAT1, foldChangeQuadobtAT1,
                foldChangeX1027attAT1, foldChangeX1027obtAT1,
                foldChangeX57126attAT1, foldChangeX57126obtAT1))

DFAT1$time <- factor(DFAT1$time, levels = c("C", "1 h", "5 h"))
DFAT1$species <- factor(DFAT1$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
update_geom_defaults("point", list(colour = NULL))
p <- ggplot(DFAT1, aes(x=time, y=relativeExp)) +
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    geom_boxplot(aes(fill=allele, y = relativeExp, col = allele), position="identity" ) +
    scale_fill_manual(values = c(myred,  myblue)) + scale_color_manual(values = c(myred, myblue)) + 
    labs(x = "", y = expression(paste(italic("AT1"), " / ", italic("ELF1"), alpha))) +
    #geom_errorbar(aes(ymin= ci_l, ymax= ci_u), width=.2,  # Width of the error bars
    #            position="identity") + theme(legend.text = element_text(face = "italic")) +
    theme(axis.text=element_text(size=12), axis.title=element_text(size=16)) +
    scale_y_continuous(trans="sqrt", breaks = c(0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.5,  1, 1.5, 2, 3), labels = c(0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.5, 1, 1.5, 2, 3))

label.df <- data.frame(species = c("N. attenuata", "N. obtusifolia", "N. clevelandii", "N. quadrivalvis", rep("N. x obtusiata 10/27", 3)),
                time = c(1.5, 1.5, 2, 1.5, 1.5, 1.5, 2),
                relativeExp = c(0.33, 0.095, 3.25, 0.39, 0.085, 0.085, 0.2))## natt, nobt
                                
# 
# # Define arc coordinates
r1 <- 0.5
r2 <- 1
t <- seq(0, 180, by = 1) * pi / 180
x1 <- r1 * cos(t)
x2 <- r2 * cos(t)
y1 <- r1*0.1 * sin(t)
y2 <- r2*0.05 * sin(t)
y1[20:162] <- y1[20]
y2[20:162] <- y2[20]
 
arc.df1 <- data.frame(Group = x1, Value = y1)
arc.df2 <- data.frame(Group = x2, Value = y2)
arc.dfNatt1h <- cbind(arc.df1, species = "N. attenuata")
arc.dfNatt5h <- cbind(arc.df2, species = "N. attenuata")
arc.dfNobt1h <- cbind(arc.df1, species = "N. obtusifolia")
arc.dfNobt5h <- cbind(arc.df2, species = "N. obtusifolia")
arc.dfNclev1h <- cbind(arc.df1, species = "N. clevelandii")
arc.dfNclev5h <- cbind(arc.df2, species = "N. clevelandii")
arc.dfNquad1h <- cbind(arc.df1, species = "N. quadrivalvis")
arc.dfNquad5h <- cbind(arc.df2, species = "N. quadrivalvis")
arc.dfNx10271h <- cbind(arc.df1, species = "N. x obtusiata 10/27")
arc.dfNx10275h <- cbind(arc.df2, species = "N. x obtusiata 10/27")

# ## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
p <- p + geom_text(data = label.df, size = 10, label = c(".", ".", ".", ".", ".", "*", "."), colour = c(myred, myblue, myred, myred, myred, myblue, myred)) +
    geom_line(data = arc.dfNatt1h, aes(Group+1.5, Value+0.25, species), lty = 1) +
    geom_line(data = arc.dfNobt1h, aes(Group+1.5, Value+0.04, species), lty=1) +
    geom_line(data = arc.dfNclev5h, aes(Group + 2, Value + 3), lty = 1) +
    geom_line(data = arc.dfNquad1h, aes(Group + 1.5, Value + 0.3), lty = 1) +
    geom_line(data = arc.dfNx10271h, aes(Group + 1.5, Value + 0.035), lty = 1) +
    geom_line(data = arc.dfNx10275h, aes(Group + 2, Value + 0.12), lty = 1)

ggsave("~/Documents/Publikationen/paper_allotetraploid/expression_at1.pdf", p, device = "pdf",
       width = 10, height = 8.36)
@


<<DH29,eval=TRUE, fig.show='hide',show=FALSE,echo=FALSE,message=FALSE>>=
setwd("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/")
## N. attenuata
NattDH29 <- read.csv("DH29_1_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattDH29Ct <- NattDH29[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENatt <- 10^(-1 / lm(NattDH29[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeAttDH29 <-  ENattEF1_55 ^ (medAttEF1_55) / ENatt^(NattDH29Ct)
foldChangeAttDH29[is.na(foldChangeAttDH29)] <- 0

## N. obtusifolia
NobtDH29 <- read.csv("DH29_2_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtDH29Ct <- NobtDH29[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENobt <- 10^(-1 / lm(NobtDH29[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]]) 
foldChangeObtDH29 <-  ENobtEF1_55 ^ (medObtEF1_55) / ENobt^(NobtDH29Ct)
foldChangeObtDH29[is.na(foldChangeObtDH29)] <- 0

## N. clevelandii
NclevDH29 <- read.csv("DH29_3_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevDH29Ct <- NclevDH29[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENclev <- 10^(-1 / lm(NclevDH29[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeClevDH29 <-  ENclevEF1_55 ^ (medClevEF1_55) / ENclev^(NclevDH29Ct)
foldChangeClevDH29[is.na(foldChangeClevDH29)] <- 0

## N. quadrivalvis
NquadDH29 <- read.csv("DH29_4_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadDH29Ct <- c(NquadDH29[7:9, "Ct"], NA, NquadDH29[10:19, "Ct"], NA)
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000))
ENquad <- 10^(-1 / lm(NquadDH29[1:6,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeQuadDH29 <-  ENquadEF1_55 ^ (medQuadEF1_55) / ENquad^(NquadDH29Ct)
foldChangeQuadDH29[is.na(foldChangeQuadDH29)] <- 0

## N. x obtusiata 10/27
Nx1027DH29 <- read.csv("DH29_5_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027DH29Ct <- Nx1027DH29[7:21,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx1027 <- 10^(-1 / lm(Nx1027DH29[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]]) 
foldChangeX1027DH29 <-  ENx1027EF1_55 ^ (medX1027EF1_55) / ENx1027^(Nx1027DH29Ct)
foldChangeX1027DH29[is.na(foldChangeX1027DH29)] <- 0

## N. x obtusiata 57/126
Nx57126DH29 <- read.csv("DH29_6_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126DH29Ct <- Nx57126DH29[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx57126 <- 10^(-1 / lm(Nx57126DH29[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeX57126DH29 <-  ENx57126EF1_55 ^ (medX57126EF1_55) / ENx57126^(Nx57126DH29Ct)
foldChangeX57126DH29[is.na(foldChangeX57126DH29)] <- 0

DH29ttest <- list(
    Att01 =  t.test(foldChangeAttDH29[1:5], foldChangeAttDH29[6:10], "less"),
    Att05 = t.test(foldChangeAttDH29[1:5], foldChangeAttDH29[11:15], "less"),
    Obt01 = t.test(foldChangeObtDH29[1:5], foldChangeObtDH29[6:10], "less"),
    Obt05 = t.test(foldChangeObtDH29[1:5], foldChangeObtDH29[11:15], "less"),
    Clev01 = t.test(foldChangeClevDH29[1:5], foldChangeClevDH29[6:10], "less"),
    Clev05 = t.test(foldChangeClevDH29[1:5], foldChangeClevDH29[11:15], "less"),
    Quad01 = t.test(foldChangeQuadDH29[1:5], foldChangeQuadDH29[6:10], "less"),
    Quad05 = t.test(foldChangeQuadDH29[1:5], foldChangeQuadDH29[11:15], "less"),
    X102701 = t.test(foldChangeX1027DH29[1:5], foldChangeX1027DH29[6:10], "less"),
    X102705 = t.test(foldChangeX1027DH29[1:5], foldChangeX1027DH29[11:15], "less"),
    X5712601  = t.test(foldChangeX57126DH29[1:5], foldChangeX57126DH29[6:10], "less"),
    X5712605 = t.test(foldChangeX57126DH29[1:5], foldChangeX57126DH29[11:15], "less"))

## get pvalues
pvaluesDH29_l <- lapply(DH29ttest, function(x) x$p.value)
## FDR is 0.05
## declare the tests of rank 1,2, ...j as signiciant 
alphaadjusted <- p.adjust(unlist(pvaluesDH29_l), method = "fdr") ##0.05 * (1:length(DH29ttest)) / length(DH29ttest)
##alphaadjusted[order(unlist(pvaluesDH29_l))] <- alphaadjusted
## store alpha adjusted in DH29ttest
for(i in names(alphaadjusted)) {
    DH29ttest[[i]]$alphaadj <- alphaadjusted[i]
}

## build final data.frame
DFDH29 <- data.frame(species = c(rep("N. attenuata", 15), rep("N. obtusifolia", 15), 
            rep("N. clevelandii", 15), rep("N. quadrivalvis", 15), 
            rep("N. x obtusiata 10/27", 15), rep("N. x obtusiata 57/126", 15)),
        allele = c(rep("N. attenuata", 15)),
        time = c(rep("C", 5), rep("1 h", 5), rep("5 h", 5)),
        relativeExp = c(foldChangeAttDH29, foldChangeObtDH29,  
                foldChangeClevDH29, foldChangeQuadDH29, 
                foldChangeX1027DH29, foldChangeX57126DH29))

DFDH29$time <- factor(DFDH29$time, levels = c("C", "1 h", "5 h"))
DFDH29$species <- factor(DFDH29$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
update_geom_defaults("point", list(colour = NULL))
p <- ggplot(DFDH29, aes(x=time, y=relativeExp)) +
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    geom_boxplot(aes(fill=allele, y = relativeExp, col = allele), position="identity" ) +
    scale_fill_manual(values = c(myred,  myblue)) + scale_color_manual(values = c(myred, myblue)) + 
    labs(x = "", y = expression(paste(italic("DH29"), " / ", italic("ELF1"), alpha))) +
    #geom_errorbar(aes(ymin= ci_l, ymax= ci_u), width=.2,  # Width of the error bars
    #            position="identity") + theme(legend.text = element_text(face = "italic")) +
    theme(axis.text=element_text(size=12), axis.title=element_text(size=16)) +
    scale_y_continuous(trans="sqrt", breaks = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.5,  0.75 ), labels = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.5, 0.75))

label.df <- data.frame(species = c("N. attenuata", "N. attenuata", "N. clevelandii", "N. x obtusiata 10/27", rep("N. x obtusiata 57/126", 2)),
                time = c(1.5, 2, 2, 2, 1.5, 2),
                relativeExp = c(0.41, 0.5, 0.06, 0.23, 0.6, 0.92))## natt, nobt
                                
## Define arc coordinates
r1 <- 0.5
r2 <- 1
t <- seq(0, 180, by = 1) * pi / 180
x1 <- r1 * cos(t)
x2 <- r2 * cos(t)
y1 <- r1*0.1 * sin(t)
y2 <- r2*0.05 * sin(t)
y1[20:162] <- y1[20]
y2[20:162] <- y2[20]
 
arc.df1 <- data.frame(Group = x1, Value = y1)
arc.df2 <- data.frame(Group = x2, Value = y2)
arc.dfNatt1h <- cbind(arc.df1, species = "N. attenuata")
arc.dfNatt5h <- cbind(arc.df2, species = "N. attenuata")
arc.dfNobt1h <- cbind(arc.df1, species = "N. obtusifolia")
arc.dfNobt5h <- cbind(arc.df2, species = "N. obtusifolia")
arc.dfNclev1h <- cbind(arc.df1, species = "N. clevelandii")
arc.dfNclev5h <- cbind(arc.df2, species = "N. clevelandii")
arc.dfNquad1h <- cbind(arc.df1, species = "N. quadrivalvis")
arc.dfNquad5h <- cbind(arc.df2, species = "N. quadrivalvis")
arc.dfNx10271h <- cbind(arc.df1, species = "N. x obtusiata 10/27")
arc.dfNx10275h <- cbind(arc.df2, species = "N. x obtusiata 10/27")
arc.dfNx571261h <- cbind(arc.df1, species = "N. x obtusiata 57/126")
arc.dfNx571265h <- cbind(arc.df2, species = "N. x obtusiata 57/126")

# ## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
p <- p + geom_text(data = label.df, size = 10, label = c(".", ".", ".", ".", ".", "."), colour = c(myred, myred, myred, myred, myred, myred)) +
    geom_line(data = arc.dfNatt1h, aes(Group+1.5, Value+0.35, species), lty = 1) +
    geom_line(data = arc.dfNatt5h, aes(Group+2, Value+0.43, species), lty = 1) +
    geom_line(data = arc.dfNclev5h, aes(Group + 2, Value + 0.025), lty = 1) +
    geom_line(data = arc.dfNx10275h, aes(Group + 2, Value + 0.17), lty = 1) +
    geom_line(data = arc.dfNx571261h, aes(Group + 1.5, Value + 0.53), lty = 1) +
    geom_line(data = arc.dfNx571265h, aes(Group + 2, Value + 0.82), lty = 1)

ggsave("~/Documents/Publikationen/paper_allotetraploid/expression_dh29.pdf", p, device = "pdf",
       width = 10, height = 8.36)
@

<<CV86, eval=TRUE, fig.show='hide',show=FALSE,echo=FALSE,message=FALSE>>=
## N. attenuata
NattCV86 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_1_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NattCV86Ct <- NattCV86[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENatt <- 10^(-1 / lm(NattCV86[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeAttCV86 <-  ENattCV86EF1 ^ (medAttEF1_55) / ENatt^(NattCV86Ct)
foldChangeAttCV86[is.na(foldChangeAttCV86)] <- 0

## N. obtusifolia
NobtCV86 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_2_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NobtCV86Ct <- NobtCV86[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENobt <- 10^(-1 / lm(NobtCV86[1:8,"Ct"] ~ conc)$coefficients[[2]]) 
foldChangeObtCV86 <-  ENobtEF1_55 ^ (medObtEF1_55) / ENobt^(NobtCV86Ct)
foldChangeObtCV86[is.na(foldChangeObtCV86)] <- 0

## N. clevelandii
NclevCV86 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_3_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NclevCV86Ct <- NclevCV86[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENclev <- 10^(-1 / lm(NclevCV86[1:8,"Ct"] ~ conc[1:8])$coefficients[[2]]) 
foldChangeClevCV86 <-  ENclevEF1_55 ^ (clevEF1[[6]]) / ENclev^(NclevCV86Ct)
foldChangeClevCV86[is.na(foldChangeClevCV86)] <- 0

## N. quadrivalvis
NquadCV86 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_4_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
NquadCV86Ct <- c(NA, NA, NA, NA, NquadCV86[6,"Ct"], NA, NA, NA, NquadCV86[7:8,"Ct"], NA, NquadCV86[9:12, "Ct"])
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENquad <- 2 ##10^(-1 / lm(NquadCV86[1:5,"Ct"][-2] ~ conc[1:6][-c(2,3)])$coefficients[[2]]) ## seems not to work
foldChangeQuadCV86 <-  ENquadEF1_55 ^ (quadEF1[[6]]) / ENquad^(NquadCV86Ct)
foldChangeQuadCV86[is.na(foldChangeQuadCV86)] <- 0

## N x obtusiata 10/27
Nx1027CV86 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_5_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx1027CV86Ct <- Nx1027CV86[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx1027 <- 10^(-1 / lm(Nx1027CV86[1:8,"Ct"] ~ conc)$coefficients[[2]])
foldChangeX1027CV86 <-  ENx1027CV86EF1 ^ (medX1027EF1) / ENx1027^(Nx1027CV86Ct)
foldChangeX1027CV86[is.na(foldChangeX1027CV86)] <- 0

## N x obtusiata 57/126
Nx57126CV86 <- read.csv("/home/thomas/Documents/University/Master/MScArbeit/qRT-PCR/qRT_PCR_runs/CV86_6_Ct.csv", skip = 8, sep=",", row.names = 2, header=T, stringsAsFactors = F)
Nx57126CV86Ct <- Nx57126CV86[9:23,"Ct"]
conc <- log10(c(40000, 40000, 20000, 20000, 4000, 4000, 400, 400))
ENx57126 <- 10^(-1 / lm(Nx57126CV86[1:6,"Ct"] ~ conc[1:6])$coefficients[[2]]) ## last 2 do not seem to be accurate
foldChangeX57126CV86 <-  ENx57126CV86EF1 ^ (x57126EF1[[6]]) / ENx57126^(Nx57126CV86Ct)
foldChangeX57126CV86[is.na(foldChangeX57126CV86)] <- 0

##
CV86ttest <- list(
    Att01 =  t.test(foldChangeAttCV86[1:5], foldChangeAttCV86[6:10], "less"),
    Att05 = t.test(foldChangeAttCV86[1:5], foldChangeAttCV86[11:15], "less"),
    Obt01 = t.test(foldChangeObtCV86[1:5], foldChangeObtCV86[6:10], "less"),
    Obt05 = t.test(foldChangeObtCV86[1:5], foldChangeObtCV86[11:15], "less"),
    Clev01 = t.test(foldChangeClevCV86[1:5], foldChangeClevCV86[6:10], "less"),
    Clev05 = t.test(foldChangeClevCV86[1:5], foldChangeClevCV86[11:15], "less"),
    Quad01 = t.test(foldChangeQuadCV86[1:5], foldChangeQuadCV86[6:10], "less"),
    Quad05 = t.test(foldChangeQuadCV86[1:5], foldChangeQuadCV86[11:15], "less"),
    X102701 = t.test(foldChangeX1027CV86[1:5], foldChangeX1027CV86[6:10], "less"),
    X102705 = t.test(foldChangeX1027CV86[1:5], foldChangeX1027CV86[11:15], "less"),
    X5712601  = t.test(foldChangeX57126CV86[1:5], foldChangeX57126CV86[6:10], "less"),
    X5712605 = t.test(foldChangeX57126CV86[1:5], foldChangeX57126CV86[11:15], "less"))

## get pvalues
pvaluesCV86_l <- lapply(CV86ttest, function(x) x$p.value)
## FDR is 0.05
## declare the tests of rank 1,2, ...j as signiciant 
alphaadjusted <- p.adjust(unlist(pvaluesCV86_l), method = "fdr") ## 0.05 * (1:length(CV86ttest)) / length(CV86ttest)
#alphaadjusted[order(unlist(pvaluesCV86_l))] <- alphaadjusted
## store alpha adjusted in CV86ttest
for(i in names(alphaadjusted)) {
    CV86ttest[[i]]$alphaadj <- alphaadjusted[i]
}

## build final data.frame
DFCV86 <- data.frame(species = c(rep("N. attenuata", 15), rep("N. obtusifolia", 15), 
            rep("N. clevelandii", 15), rep("N. quadrivalvis", 15), 
            rep("N. x obtusiata 10/27", 15), rep("N. x obtusiata 57/126", 15)),
        allele = c(rep("N. attenuata", 15)),
        time = c(rep("C", 5), rep("1 h", 5), rep("5 h", 5)),
        relativeExp = c(foldChangeAttCV86, foldChangeObtCV86,  
                foldChangeClevCV86, foldChangeQuadCV86, 
                foldChangeX1027CV86, foldChangeX57126CV86))

DFCV86$time <- factor(DFCV86$time, levels = c("C", "1 h", "5 h"))
DFCV86$species <- factor(DFCV86$species, 
        levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", 
            "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"))
update_geom_defaults("point", list(colour = NULL))
p <- ggplot(DFCV86, aes(x=time, y=relativeExp)) +
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    geom_boxplot(aes(fill=allele, y = relativeExp, col = allele), position="identity" ) +
    scale_fill_manual(values = c(myred,  myblue)) + scale_color_manual(values = c(myred, myblue)) + 
    labs(x = "", y = expression(paste(italic("CV86"), " / ", italic("ELF1"), alpha))) +
    #geom_errorbar(aes(ymin= ci_l, ymax= ci_u), width=.2,  # Width of the error bars
    #            position="identity") + theme(legend.text = element_text(face = "italic")) +
    theme(axis.text=element_text(size=12), axis.title=element_text(size=16))
    
## set asterisks
label.df <- data.frame(species = c("N. attenuata", "N. attenuata", "N. clevelandii", "N. x obtusiata 10/27", "N. x obtusiata 10/27", "N. x obtusiata 57/126", "N. x obtusiata 57/126"),
                        time = c(1.5, 2, 2, 1.5, 2, 1.5,  2),
                        relativeExp = c(0.014, 0.017, 0.008, 0.018, 0.022, 0.033, 0.05))

# Define arc coordinates
r1 <- 0.5
r2 <- 1
t <- seq(0, 180, by = 1) * pi / 180
x1 <- r1 * cos(t)
x2 <- r2 * cos(t)
y1 <- r1*0.004 * sin(t)
y2 <- r2*0.002 * sin(t)
y1[20:162] <- y1[20]
y2[20:162] <- y2[20]
 
arc.df1 <- data.frame(Group = x1, Value = y1)
arc.df2 <- data.frame(Group = x2, Value = y2)
arc.dfNatt1h <- cbind(arc.df1, species = "N. attenuata")
arc.dfNatt5h <- cbind(arc.df2, species = "N. attenuata")
arc.dfNclev5h <- cbind(arc.df2, species = "N. clevelandii")
arc.dfNx10271h <- cbind(arc.df1, species = "N. x obtusiata 10/27")
arc.dfNx10275h <- cbind(arc.df2, species = "N. x obtusiata 10/27")
arc.dfNx571261h <- cbind(arc.df1, species = "N. x obtusiata 57/126")
arc.dfNx571265h <- cbind(arc.df2, species = "N. x obtusiata 57/126")
# 
## Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
p <- p + geom_text(data = label.df, size = 10, label = c(".", ".", "*", "*", "*", ".","."), colour = c(myred, myred, myred, myred, myred, myred, myred)) +
    geom_line(data = arc.dfNatt1h, aes(Group+1.5, Value+0.011, species), lty = 1) +
    geom_line(data = arc.dfNatt5h, aes(Group+2, Value+0.014, species), lty=1) +
    geom_line(data = arc.dfNclev5h, aes(Group + 2, Value + 0.0068), lty = 1) +
    geom_line(data = arc.dfNx10271h, aes(Group + 1.5, Value + 0.0165), lty = 1) + 
    geom_line(data = arc.dfNx10275h, aes(Group + 2, Value + 0.0205), lty = 1) + 
    geom_line(data = arc.dfNx571261h, aes(Group + 1.5, Value + 0.0303), lty = 1) +
    geom_line(data = arc.dfNx571265h, aes(Group + 2, Value + 0.047), lty = 1)

ggsave("~/Documents/Publikationen/paper_allotetraploid/expression_cv86.pdf", p, device = "pdf",
       width = 10, height = 8.36)
@
