<<prepare>>=
library (MetCirc)
setwd("/home/thomas/Documents/University/Master/MScArbeit/MSMS/")

##xsetMSMS <- xcmsSet(file = "CDFs/MS", method="centWave", ppm=20, snthresh=10, peakwidth=c(5,18))
##classes <- c("attMSWOS72", "obtMSWOS72", "clevMSWOS72", "quadMSWOS72", "x1027MSWOS72", "x57126MSWOS72")
## classes <- c("att20evWOS72", "att30evWOS72", "att40evWOS72", "attMSWOS72",
##             "obt20evWOS72", "obt30evWOS72", "obt40evWOS72", "obtMSWOS72",
##              "clev20evWOS72", "clev30evWOS72", "clev40evWOS72", "clevMSWOS72",
##              "quad20evWOS72", "quad30evWOS72", "quad40evWOS72", "quadMSWOS72",
##              "x102720evWOS72", "x102730evWOS72", "x102740evWOS72", "x1027MSWOS72",
##              "x5712620evWOS72", "x5712630evWOS72", "x5712640evWOS72", "x57126MSWOS72",
##              "att20evCon", "att30evCon", "att40evCon", "attMSCon",
##              "att20evMJ72", "att30evMJ72", "att40evMJ72", "attMSMJ72",
##              "obt20evCon", "obt30evCon", "obt40evCon", "obtMSCon",
##              "obt20evMJ72", "obt30evMJ72", "obt40evMJ72", "obtMSMJ72",
##              "cle20evCon", "cle30evCon", "cle40evCon", "cleMSCon",
##              "cle20evMJ72", "cle30evMJ72", "cle40evMJ72", "cleMSMJ72",
##              "quad20evCon", "quad30evCon", "quad40evCon", "quadMSCon",
##              "quad20evMJ72", "quad30evMJ72", "quad40evMJ72", "quadMSMJ72",
##              "x102720evCon", "x102730evCon", "x102740evCon", "x1027MSCon",
##              "x102720evMJ72", "x102730evMJ72", "x102740evMJ72", "x1027MSMJ72",
##              "x5712620evCon", "x5712630evCon", "x5712640evCon", "x57126MSCon",
##              "x5712620evMJ72", "x5712630evMJ72", "x5712640evMJ72", "x57126MSMJ72")
## add classes
##sampclass(xsetMSMS) <- classes
## 
##xset2MSMS <- group(xsetMSMS, method="density", minfrac=0.5, minsamp=1, bw=10, mzwid=0.01)
##xset3MSMS <- retcor(xset2MSMS, family= "s", plottype= "m", missing=1, extra=1, span=1)
##xset4MSMS <- group(xset3MSMS, method="density", mzwid=0.01, minfrac=0.5, 
##               minsamp=1, bw=5)
##xset5MSMS <- fillPeaks(xset4MSMS, method = "chrom")
##save(xsetMSMS, xset2MSMS, xset3MSMS, xset4MSMS, file = "MSMS_xcms.RData")
load("MSMS_xcms.RData")

## CAMERA
load("MSMS_CAMERA.RData")
##anMSMS <- xsAnnotate(xset5MSMS)
##anFMSMS <- groupFWHM(anMSMS, perfwhm = 0.6)
##anIMSMS <- findIsotopes(anFMSMS, mzabs=0.01)
##anICMSMS <- groupCorr(anIMSMS, cor_eic_th=0.75, graphMethod = "lpc")
##anFAMSMS <- findAdducts(anICMSMS, polarity="positive")
#peaklistMSMS <- getPeaklist(anFAMSMS)

##anMSMS2 <- xsAnnotate(xset4MSMS)
##anFMSMS2 <- groupFWHM(anMSMS2, perfwhm = 0.6)
##anIMSMS2 <- findIsotopes(anFMSMS2, mzabs = 0.01)
##anICMSMS2 <- groupCorr(anIMSMS2, cor_eic_th=0.75, graphMethod = "lpc")
##anFAMSMS2 <- findAdducts(anICMSMS2, polarity="positive")
peaklistMSMS2 <- getPeaklist(anFAMSMS2)
##save(anMSMS2, anFMSMS2, anIMSMS2, anICMSMS2, anFAMSMS2, peaklistMSMS2, file = "MSMS_CAMERA.RData")


## re-create xcms combined peaklist for WOS and MeJA (shell)
setwd("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/WOS_MeJA_0h_72h/")
load("./metabolicProfiling.RData")
##xset <- xcmsSet(method="centWave", ppm=20, snthresh=10, peakwidth=c(5,18), BPPARAM = MulticoreParam(workers = 6))
##classes <- c(rep("att0", 5),  rep("att72WOS", 5),
##    rep("obt0", 5), rep("obt72WOS", 5),
##    rep("clev0", 5),  rep("clev72WOS", 5),
##    rep("quad0", 5), rep("quad72WOS", 5),
##    rep("x10270", 5),  rep("x1072WOS", 5),
##    rep("x570", 5), rep("x5772WOS", 5),
##    rep("att0", 5),  rep("att72MJ", 5),
##    rep("obt0", 5), rep("obt72MJ", 5),
##    rep("clev0", 5),  rep("clev72MJ", 5),
##    rep("quad0", 5), rep("quad72MJ", 5),
##    rep("x10270", 5),  rep("x1072MJ", 5),
##    rep("x570", 5), rep("x5772MJ", 5))
##sampclass(xset) <- classes
##xset2 <- group(xset, method="density", minfrac=0.5, minsamp=2, bw=10, mzwid=0.05) ## mzwid = 0.01
##xset3 <- retcor(xset2, family= "s", plottype= "m", missing=1, extra=1, span=1)
##xset4 <- group(xset3, method="density", bw=10, mzwid=0.05, minfrac=0.5, minsamp=2)
##xset5 <- fillPeaks(xset4, method = "chrom")
##cleanParallel()
##save(xset, xset2, xset3, xset4, xset5, file = "./metabolicProfiling.RData")

load("./CAMERA_complete.RData")
##an <- xsAnnotate(xset5)
##anF <- groupFWHM(an, perfwhm = 0.6)
##anI <- findIsotopes(anF, mzabs=0.01)
##anIC <- groupCorr(anI, cor_eic_th=0.75, graphMethod = "lpc")
##anFA <- findAdducts(anIC, polarity="positive")
peaklist <- getPeaklist(anFA)
# ## get colnames of samples (min and max ind)
colMin <- which(colnames(peaklist) == "X001_BA4_01_28001")
colMax <- which(colnames(peaklist) == "X180_RD2_01_28200")
cols <- colMin:colMax
peaklistConc <- peaklist
peaklistConc[, cols] <- apply(peaklist[, cols], 2, FUN = function(x) (x / quantile(x, 0.75)))
peaklist[, cols] <- apply(peaklist[, cols], 2, FUN = function(x) (x / quantile(x, 0.75) + 1))
# ## without peak filling (to get number of compounds)
# an2 <- xsAnnotate(xset4)
# anF2 <- groupFWHM(an2, perfwhm = 0.6)
# anI2 <- findIsotopes(anF2, mzabs = 0.01)
# anIC2 <- groupCorr(anI2, cor_eic_th = 0.75, graphMethod = "lpc")
# anFA2 <- findAdducts(anIC2, polarity = "positive")
peaklist2 <- getPeaklist(anFA2)
peaklist2[, cols] <- apply(peaklist2[, cols], 2, FUN = function(x) (x / quantile(x, 0.75, na.rm = TRUE) + 1))
## write pcgroups of peaklist to peaklist2
peaklist2[, "pcgroup"] <- peaklist[, "pcgroup"]
# save(an, anF, anI, anIC, anFA, peaklist, an2, anF2, anI2, anIC2, anFA2, peaklist2, file = "./CAMERA_complete.RData")

@


<<MSMS>>=
MSMS <- read.csv("../../MSMS/idmsms_3_3_0.8_minCor_rmv50.csv")
MSMS <- MSMS[,c(2,3,4,8)]

## how many features were created? 
length(unique(MSMS[, "precursor"])) ## 793

## remove these entries from the MSMS which do not have the precursor ions in the fragmentation
## start 
uniqPrecMZRTPC <- unique(as.character(MSMS[, "precursor"]))
PrecMZRTPC <- as.character(MSMS[, "precursor"])
 
MSMS_mod <- cbind(MSMS, "check" = numeric(dim(MSMS)[1]))
for (i in 1:length(uniqPrecMZRTPC)) {
    mzPC <- as.numeric(cutUniquePreMZ(uniqPrecMZRTPC[i], splitPattern = "_", splitInd = 1))
    inds <- which(PrecMZRTPC == uniqPrecMZRTPC[i])
    mzGROUPS <- MSMS[inds, "mz"]
    if( any(abs(mzGROUPS - mzPC) < 0.02) ) MSMS_mod[inds, "check"] <- TRUE
}
## remove lines which have check == 0
MSMS <- MSMS[MSMS_mod[, "check"] == 1, ]
## end remove

## how many features are remaining? 
length(unique(MSMS[, "precursor"])) ## 575


## rename column inten to intensity
colnames(MSMS)[which(colnames(MSMS) == "inten")] <- "intensity"
##colnames(MSMS)[which(colnames(MSMS) == "precursor")] <- "pcgroup_precursorMZ"
# 
# ## truncate MSMS (after 40 min there is only isocratic 15% A and 85% B)
# ## truncate MSMS after 41 min = 60*41 s = 2460 s
# MSMS <- MSMS[which(as.numeric(MSMS[, "rt"]) < 2460), ]
@


<<mapping>>=
precursorMZ <- unlist(lapply(strsplit(as.character(MSMS[,"precursor"]), "_"), "[", 1))
precursorMZ <- as.numeric(precursorMZ)
precursorMZ_unique <- unique(precursorMZ)
precursorRT <- unlist(lapply(strsplit(as.character(MSMS[,"precursor"]), "_"), "[", 2))
precursorRT <- as.numeric(precursorRT)
precursorRT_unique <- unique(precursorRT)
uniqueMZRTPC <- as.character(unique(MSMS[, "precursor"]))
precursorRT_minute <- precursorRT / 60 - 1 ## minimum is now 0.027 minutes (in the gradient phase)
gradientMSMS <- numeric(length = length(precursorRT_minute))
gradientMSMS[which(precursorRT_minute <= 0)] <- 0.9
gradientMSMS[which(precursorRT_minute > 0)] <- 0.90 - 0.01923077 * precursorRT_minute[which(precursorRT_minute > 0)]
gradientMSMS[which(precursorRT_minute >= 39)] <- 0.15 ## between 1min and 40min there is gradient phase

## gradient = 0.90 - 0.0727 * minute --> minute = (0.9 - gradient) / 0.0727
## +1  since 1 min isocratic 90% A

##gradient_mapped_minute <- (0.9 - gradient ) / 0.07272727272727 + 1
##gradient_mapped <- gradient_mapped_minute * 60

precursorMZ[1]
## profiling data for W+OS
##load("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/WOS_0h_72h/metabolicProfiling.RData")
##load("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/WOS_0h_72h/CAMERA_complete.RData")
peaklist <- getPeaklist(anFA)
gradientProfiling <- numeric(length = length(peaklist[,"rt"]))
precursorRT_minute_profiling <- peaklist[,"rt"] / 60 - 1 ## 1 min isocratic
gradientProfiling[which(precursorRT_minute_profiling <= 0)] <- 0.9
gradientProfiling[which(precursorRT_minute_profiling > 0)] <- 0.9 - 0.072727272727272727272727 * precursorRT_minute_profiling[which(precursorRT_minute_profiling > 0)]
## from minute 12 (11) isocratic 0.1
gradientProfiling[which(precursorRT_minute_profiling > 11)] <- 0.1


## profiling data for MJ
#load("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/MeJa_0h_72h/metabolicProfilingMJ.RData")
#load("/home/thomas/Documents/University/Master/MScArbeit/Metabolic_profiling/MeJa_0h_72h/CAMERA_completeMJ.RData")
# peaklistMJ <- getPeaklist(anFAMJ)
# gradientProfilingMJ <- numeric(length = length(peaklistMJ[,"rt"]))
# precursorRT_minute_profilingMJ <- peaklistMJ[,"rt"] / 60 - 1 ## 1 min isocratic
# gradientProfilingMJ[which(precursorRT_minute_profilingMJ <= 0)] <- 0.9
# gradientProfilingMJ[which(precursorRT_minute_profilingMJ > 0)] <- 0.9 - 0.0727272727272727 * precursorRT_minute_profilingMJ[which(precursorRT_minute_profilingMJ > 0)]
# ## from minute 12 (11) isocratic 0.1
# gradientProfilingMJ[which(precursorRT_minute_profilingMJ > 11)] <- 0.1

## prepare MSMS
## add column gradientWOS, gradientMJ and gradientMSMS
MSMS_mod <- cbind(MSMS, gradientWOS = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, gradientMJ = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, gradientMSMS = numeric(dim(MSMS)[1]))
MSMS_mod[, "gradientMSMS"] <- gradientMSMS
## add column mzWOS,rtWOS that is the mz and retention time of mapped features of peaklistWOS
MSMS_mod <- cbind(MSMS_mod, mzWOS = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, rtWOS = numeric(dim(MSMS)[1]))
## add column mzMJ,rtMJ that is the mz and retention time of mapped features of peaklistMJ
MSMS_mod <- cbind(MSMS_mod, mzMJ = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, rtMJ = numeric(dim(MSMS)[1]))
## add columns that have number of biological replicates that synthesise compound: 
## e.g. NattWOS72, NobtWOS72, ... NattMJ0, ... NattMJ72, ...
mm <- matrix(0, nrow = dim(MSMS)[1], ncol = 18)
colnames(mm) <-  c("att0", "obt0", "clev0", "quad0", "x10270", "x571260",
  "att72WOS", "obt72WOS", "clev72WOS", "quad72WOS", "x102772WOS", "x5712672WOS",
  "att72MJ", "obt72MJ", "clev72MJ", "quad72MJ", "x102772MJ", "x5712672MJ")
MSMS_mod <- cbind(MSMS_mod, mm)
## add column: mapped1WOS and mapped1MJ, i.e. was this feature mapped in the first round = mapped by deviance?
## add column: mapped2WOS and mapped2MJ, i.e. was this feature mapped in the second round = mapped by interval?
MSMS_mod <- cbind(MSMS_mod, mapped1WOS = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, mapped1MJ = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, mapped2WOS = numeric(dim(MSMS)[1]))
MSMS_mod <- cbind(MSMS_mod, mapped2MJ = numeric(dim(MSMS)[1]))
MSMS_mod[, "mapped1WOS"] <- factor(x = MSMS_mod[, "mapped1WOS"], levels = c(0,1))
MSMS_mod[, "mapped1MJ"] <- factor(x = MSMS_mod[, "mapped1MJ"], levels = c(0,1))
MSMS_mod[, "mapped2WOS"] <- factor(x = MSMS_mod[, "mapped2WOS"], levels = c(0,1))
MSMS_mod[, "mapped2MJ"] <- factor(x = MSMS_mod[, "mapped2MJ"], levels = c(0,1))

## add column pc_group_m that contains the pcgroup of the mapped feature in the peaklist
MSMS_mod <- cbind(MSMS_mod, pc_group_m = numeric(dim(MSMS)[1])) 

## W+OS
#devWOS <- numeric(length(precursorMZ))
#devMJ <- numeric(length(precursorMZ))

gradient <- 0.05 ## tolerated deviance in gradient, define greater deviance 
## since we use a "combined" peaklist of WOS and MeJA runs


## round 1: define deviance for gradient and deviance for mz and map based on
## these criteria
for (i in 1:length(precursorMZ)) {
    
    ## WOS+MJ
    ## shrink space of possible mapped features by gradient deviance
    ind <- which(abs(gradientMSMS[i] - gradientProfiling) <= gradient)
    ## get feature with minimum deviance to mz
    ind_minMZ <- ind[which.min(abs(precursorMZ[i] - peaklist[ind, "mz"] ))]
    minInPeaklist <- peaklist[ind_minMZ,]
    
    if (abs(minInPeaklist["mz"] - precursorMZ[i]) <= 0.008) { ## tolerated m/z deviance is 0.008
        ## set mapped1 to 1
        MSMS_mod[i, "mapped1WOS"] <- 1
        MSMS_mod[i, "mapped1MJ"] <- 1
        ## write gradient of profiling to column gradientWOS
        MSMS_mod[i, "gradientWOS"] <- MSMS_mod[i, "gradientMJ"] <- gradientProfiling[ind_minMZ]
        
        ## write mz of profiling to column mzWOS and mzMJ
        MSMS_mod[i, "mzWOS"] <- MSMS_mod[i, "mzMJ"] <- peaklist[ind_minMZ, "mz"]
        ## write retention time of profiling to column rtWOS and rtMJ
        MSMS_mod[i, "rtWOS"] <- MSMS_mod[i, "rtMJ"] <- peaklist[ind_minMZ, "rt"]
        
        ## write numbers of biological replicates where feature is present: C
        MSMS_mod[i, "att0"] <- peaklist[ind_minMZ, "att0"]
        MSMS_mod[i, "obt0"] <- peaklist[ind_minMZ, "obt0"]
        MSMS_mod[i, "clev0"] <- peaklist[ind_minMZ, "clev0"]
        MSMS_mod[i, "quad0"] <- peaklist[ind_minMZ, "quad0"]
        MSMS_mod[i, "x10270"] <- peaklist[ind_minMZ, "x10270"]
        MSMS_mod[i, "x571260"] <- peaklist[ind_minMZ, "x570"]
        
        ## write numbers of biological replicates where feature is present: WOS
        MSMS_mod[i, "att72WOS"] <- peaklist[ind_minMZ, "att72WOS"]
        MSMS_mod[i, "obt72WOS"] <- peaklist[ind_minMZ, "obt72WOS"]
        MSMS_mod[i, "clev72WOS"] <- peaklist[ind_minMZ, "clev72WOS"]
        MSMS_mod[i, "quad72WOS"] <- peaklist[ind_minMZ, "quad72WOS"]
        MSMS_mod[i, "x102772WOS"] <- peaklist[ind_minMZ, "x1072WOS"]
        MSMS_mod[i, "x5712672WOS"] <- peaklist[ind_minMZ, "x5772WOS"]
        
        ## write numbers of biological replicates where feature is present: MJ
        MSMS_mod[i, "att72MJ"] <- peaklist[ind_minMZ, "att72MJ"]
        MSMS_mod[i, "obt72MJ"] <- peaklist[ind_minMZ, "obt72MJ"]
        MSMS_mod[i, "clev72MJ"] <- peaklist[ind_minMZ, "clev72MJ"]
        MSMS_mod[i, "quad72MJ"] <- peaklist[ind_minMZ, "quad72MJ"]
        MSMS_mod[i, "x102772MJ"] <- peaklist[ind_minMZ, "x1072MJ"]
        MSMS_mod[i, "x5712672MJ"] <- peaklist[ind_minMZ, "x5772MJ"]
        
        ## write mapped pcgroup of peaklist
        MSMS_mod[i, "pc_group_m"] <- peaklist[ind_minMZ, "pcgroup"]
    }
}
## end of round 1

## how many features were mapped (round 1)?
length(unique(MSMS_mod[which(MSMS_mod[, "mapped1WOS"] == 1),"precursor"])) ## 201 

## round 2: use results from round 1 and define a retention time window 
## between already mapped features, check then in this window if other (not yet
## mapped) features can be mapped

for (i in 1:length(precursorMZ)) {
    
    ## for WOS
    ##mappedWOS <- which(MSMS_mod[, "mapped1WOS"] == 1 ) 
    indmapped <- which(MSMS_mod[, "mapped1WOS"] == 1)
    mappedGradients <- MSMS_mod[indmapped, "gradientMSMS"]
    mappedGradients_uni <- unique(mappedGradients)
    
    if (MSMS_mod[i,"mapped1WOS"] == 0) {
        
        ## get feature that has gradient of rank +-3 to calculated one
        devGradient <- MSMS_mod[i, "gradientMSMS"] - mappedGradients_uni
        ## upper and lower feature which is +-5
        devGradient_ind_u <- which( devGradient == sort(devGradient[devGradient > 0])[3] )
        devGradient_ind_l <- which( devGradient == sort(devGradient[devGradient < 0])[3] )
        
        ## retrieve respective mapped MSMS feature with lower and higher retention time
        ## that will use as a lower and upper bound for search space
        lower <- MSMS_mod[intersect(which(MSMS_mod[, "gradientMSMS"] ==  mappedGradients_uni[devGradient_ind_l]),indmapped), ]
        upper <- MSMS_mod[intersect(which(MSMS_mod[, "gradientMSMS"] ==  mappedGradients_uni[devGradient_ind_u]), indmapped), ]
        
        ## implement a rule for boundary values
        if (dim(upper)[1] == 0) {
            upper <- lower
            upper[,"rtWOS"] <- lower[,"rtWOS"] + 10
            upper[,"rtMJ"] <- lower[,"rtMJ"] + 10
        }
        if (dim(lower)[1] == 0) {
            lower <- upper
            lower[,"rtWOS"] <- upper[,"rtWOS"] - 10
            lower[,"rtMJ"] <- upper[,"rtMJ"] - 10
        }
        
        
        
        upperRT <- max(unique(upper[, "rtWOS"]))
        lowerRT <- min(unique(lower[, "rtWOS"]))
        
        ## implement a rule that there is a certain range of at least 20s to look into
        ## when the range between upperRT and lowerRT is low
        if (upperRT - lowerRT < 20) {
            upperRT <- upperRT + 10
            lowerRT <- lowerRT - 10
        }
        
        ind_tr <- intersect(which(peaklist[, "rt"] <= upperRT), which(peaklist[, "rt"] >= lowerRT))
        
        peaklist_tr <- peaklist[ind_tr, ]
        
        ind_mapped <- which.min(abs(peaklist_tr[, "mz"] - precursorMZ[i]))
        mapped <- peaklist_tr[ind_mapped, ]
        
        if (abs(mapped[, "mz"] - precursorMZ[i]) <= 0.008) { ## use deviance of 0.008
            
            ind_minMZ <- ind_tr[ind_mapped]
            
            ## set mapped2 to 1
            MSMS_mod[i, "mapped2WOS"] <- MSMS_mod[i, "mapped2MJ"] <- 1
            ## write gradient of profiling to column gradientWOS
            MSMS_mod[i, "gradientWOS"] <- MSMS_mod[i, "gradientMJ"] <- gradientProfiling[ind_minMZ]
            
            ## write mz of profiling to column mzWOS and mzMJ
            MSMS_mod[i, "mzWOS"] <- MSMS_mod[i, "mzMJ"] <- peaklist[ind_minMZ, "mz"]
            ## write retention time of profiling to column rtWOS and rtMJ
            MSMS_mod[i, "rtWOS"] <- MSMS_mod[i, "rtMJ"] <- peaklist[ind_minMZ, "rt"]
            
            ## write numbers of biological replicates where feature is present: C
            MSMS_mod[i, "att0"] <- peaklist[ind_minMZ, "att0"]
            MSMS_mod[i, "obt0"] <- peaklist[ind_minMZ, "obt0"]
            MSMS_mod[i, "clev0"] <- peaklist[ind_minMZ, "clev0"]
            MSMS_mod[i, "quad0"] <- peaklist[ind_minMZ, "quad0"]
            MSMS_mod[i, "x10270"] <- peaklist[ind_minMZ, "x10270"]
            MSMS_mod[i, "x571260"] <- peaklist[ind_minMZ, "x570"]
            
            ## write numbers of biological replicates where feature is present: WOS
            MSMS_mod[i, "att72WOS"] <- peaklist[ind_minMZ, "att72WOS"]
            MSMS_mod[i, "obt72WOS"] <- peaklist[ind_minMZ, "obt72WOS"]
            MSMS_mod[i, "clev72WOS"] <- peaklist[ind_minMZ, "clev72WOS"]
            MSMS_mod[i, "quad72WOS"] <- peaklist[ind_minMZ, "quad72WOS"]
            MSMS_mod[i, "x102772WOS"] <- peaklist[ind_minMZ, "x1072WOS"]
            MSMS_mod[i, "x5712672WOS"] <- peaklist[ind_minMZ, "x5772WOS"]
            
            ## write numbers of biological replicates where feature is present: MJ
            MSMS_mod[i, "att72MJ"] <- peaklist[ind_minMZ, "att72MJ"]
            MSMS_mod[i, "obt72MJ"] <- peaklist[ind_minMZ, "obt72MJ"]
            MSMS_mod[i, "clev72MJ"] <- peaklist[ind_minMZ, "clev72MJ"]
            MSMS_mod[i, "quad72MJ"] <- peaklist[ind_minMZ, "quad72MJ"]
            MSMS_mod[i, "x102772MJ"] <- peaklist[ind_minMZ, "x1072MJ"]
            MSMS_mod[i, "x5712672MJ"] <- peaklist[ind_minMZ, "x5772MJ"]
            
            ## write mapped pcgroup of peaklist
            MSMS_mod[i, "pc_group_m"] <- peaklist[ind_minMZ, "pcgroup"]
        }
    }
}

## how many features were mapped (round 2)?
length(unique(MSMS_mod[which(MSMS_mod[, "mapped2WOS"] == 1),"precursor"])) ## 156


## truncate MSMS_mod: remove entries which have sum of 0 in the mentioned columns
## i.e. remove the ones that could not be mapped
MSMS_mod <- MSMS_mod[apply(data.matrix(MSMS_mod[, c("mapped1WOS", "mapped1MJ", "mapped2WOS", "mapped2MJ")]) - 1, 1, sum) > 0,]

## how many features were mapped (round 1, round 2)?
length(unique(MSMS_mod[ ,"precursor"])) ## 338
## percentage: 
length(unique(MSMS_mod[ ,"precursor"])) / length(unique(MSMS[, "precursor"]))*100 ## 58.78%


## distribution along the chromatogramm for the mapped features
hist(as.numeric(unlist(lapply(strsplit(as.character(unique(MSMS_mod[which(MSMS_mod[, "mapped1WOS"] == 1),"precursor"])), "_"), "[", 2))), 
     ylim = c(0,120), main = "after mapping (round 1)", xlab = "retention time (s)")
hist(as.numeric(unlist(lapply(strsplit(as.character(unique(MSMS_mod[which(MSMS_mod[, "mapped2WOS"] == 1),"precursor"])), "_"), "[", 2))), 
     ylim = c(0,120), main = "after mapping (round 2)", xlab = "retention time (s)")

hist(as.numeric(unlist(lapply(strsplit(as.character(unique(MSMS_mod[,"precursor"])), "_"), "[", 2))), 
     ylim = c(0,120), main = "after mapping", xlab = "retention time (s)")
## distribution along the chromatogramm before mapping
hist(as.numeric(unlist(lapply(strsplit(as.character(unique(MSMS[,"precursor"])), "_"), "[", 2))), 
     ylim = c(0,120), main = "before mapping", xlab = "retention time (s)")

## change entries of biological replicates to binary values:
## set the entries with less than 6 replicates to 0, 
## with more or equal than 6 replicates to 1
entriesC <- MSMS_mod[,which(colnames(MSMS_mod) == "att0"):which(colnames(MSMS_mod) == "x571260")]
entriesC[entriesC < 6] <- 0
entriesC[entriesC >= 6] <- 1
## set the entries with less than 3 replicates to 0, 
## with more or equal than 3 replicates to 1
entries72 <- MSMS_mod[,which(colnames(MSMS_mod) == "att72WOS"):which(colnames(MSMS_mod) == "x5712672MJ")]
entries72[entries72 < 3] <- 0
entries72[entries72 >= 3] <- 1

## write entries to MSMS_mod: replace by binary matrix entries
MSMS_mod[,which(colnames(MSMS_mod) == "att0"):which(colnames(MSMS_mod) == "x571260")] <- entriesC
MSMS_mod[,which(colnames(MSMS_mod) == "att72WOS"):which(colnames(MSMS_mod) == "x5712672MJ")] <- entries72

## 
MSMS_mod <- cbind(MSMS_mod, pc_group = unlist(lapply(strsplit(as.character(MSMS_mod[, "precursor"]), "_"), "[", 3)))
@

<<removeRedundantFeatures>>=
###########################################################
mappedPCGROUPS <- as.numeric(as.character(unique(MSMS_mod[, "pc_group_m"])))
mappedPCGROUPS_s <- sort(mappedPCGROUPS)

mapping_l <- setNames(as.list(rep(NA, length(mappedPCGROUPS_s))), mappedPCGROUPS_s)
## write to list names (mz_rt_pcgrou) of MSMS_mod
names(mapping_l)

for (i in names(mapping_l)) {
    mapping_l[[i]] <- as.character(unique(MSMS_mod[which(MSMS_mod[, "pc_group_m"] == i), "precursor"]))
}



## to check with MeJA and WOS

## remove reduntant features:
## collapse MSMS_mod into one spectrum when they have the same pcgroup
pcgroups <- as.numeric(as.character(MSMS_mod[, "pc_group"]))
pcgroups_unique <- unique(pcgroups)
indNewFeat <- match(unique(as.character(MSMS_mod[, "precursor"])), as.character(MSMS_mod[,"precursor"]))

pcgroups <- as.character(MSMS_mod[indNewFeat, "pc_group"])
for (i in unique(pcgroups)) {
    indI <- which(pcgroups == i)
    if (length(indI) > 1) {
        indI <- which(MSMS_mod[, "pc_group"] == unique(pcgroups[indI]))
        precMZ <- lapply(strsplit(as.character(MSMS_mod[indI, "precursor"]), "_"), "[", 1)
        precMZ <- as.numeric(unlist(precMZ))
        ## take always the one with the highest precursor value and 
        ## set the other to 0
        mappedCol <- c("mapped1WOS", "mapped1MJ", "mapped2WOS", "mapped2MJ")
        MSMS_mod[indI[which(precMZ != max(precMZ))], mappedCol] <- rep(0, 4)
    }
}

MSMS_mod <- MSMS_mod[apply(cbind(MSMS_mod[,"mapped1WOS"], MSMS_mod[, "mapped2WOS"]) - 1, 1, sum) == 1,]


## after this step, there are still features that were double mapped, i.e. that
## have the same mapped mz and rt values, remove the ones which have higher
## pc group
removeDoubleMappings <- function(MSMS) {
    MSMSmzrt <- paste(MSMS[, "mzWOS"], MSMS[, "rtWOS"])
    dupMSMSmzrt <- duplicated(MSMSmzrt)
    MSMS_dup <- MSMS
    for (i in 1:length(MSMSmzrt)) {
        if (dupMSMSmzrt[i]) {
            ind <- which(MSMSmzrt == MSMSmzrt[i])
            pcgroups <- as.numeric(as.character(MSMS[ind, "pc_group"]))
            if (max(pcgroups) != min(pcgroups)) {
                MSMS_dup[ind[-which(pcgroups == min(pcgroups))],] <- rep(NA, 34)
            }
        }
    }
    narows <- apply(MSMS_dup, 1, function(x){any(is.na(x))})
    MSMS_dup <- MSMS_dup[!narows,]
    return(MSMS_dup)
}
MSMS_mod <- removeDoubleMappings(MSMS_mod)
####################################################################
@


<<barplot>>=
## how many metabolites are found in each species?
uniquePrecursor <- unique(MSMS_mod[, "precursor"])

## get first row entries with unique precursor
indsMSMS <- match(uniquePrecursor, MSMS_mod[, "precursor"])

## how many metabolites are found in each species?
apply(data.matrix(MSMS_mod[indsMSMS, c("att0", "obt0","clev0","quad0","x10270","x571260")]), 2, sum)
apply(data.matrix(MSMS_mod[indsMSMS, c("att72WOS", "obt72WOS", "clev72WOS", "quad72WOS", "x102772WOS", "x5712672WOS")]), 2, sum)
apply(data.matrix(MSMS_mod[indsMSMS, c("att72MJ", "obt72MJ", "clev72MJ", "quad72MJ", "x102772MJ", "x5712672MJ")]), 2, sum)


## get pc_group for C, WOS and MeJA
## C
att0 <- unique(MSMS_mod[which(MSMS_mod[, "att0"] == 1), "pc_group"])
obt0 <- unique(MSMS_mod[which(MSMS_mod[, "obt0"] == 1), "pc_group"])
clev0 <- unique(MSMS_mod[which(MSMS_mod[, "clev0"] == 1), "pc_group"])
quad0 <- unique(MSMS_mod[which(MSMS_mod[, "quad0"] == 1), "pc_group"])
x10270 <- unique(MSMS_mod[which(MSMS_mod[, "x10270"] == 1), "pc_group"])
x571260 <- unique(MSMS_mod[which(MSMS_mod[, "x571260"] == 1), "pc_group"])
## WOS
att72WOS <- unique(MSMS_mod[which(MSMS_mod[, "att72WOS"] == 1), "pc_group"])
obt72WOS <- unique(MSMS_mod[which(MSMS_mod[, "obt72WOS"] == 1), "pc_group"])
clev72WOS <- unique(MSMS_mod[which(MSMS_mod[, "clev72WOS"] == 1), "pc_group"])
quad72WOS <- unique(MSMS_mod[which(MSMS_mod[, "quad72WOS"] == 1), "pc_group"])
x102772WOS <- unique(MSMS_mod[which(MSMS_mod[, "x102772WOS"] == 1), "pc_group"])
x5712672WOS <- unique(MSMS_mod[which(MSMS_mod[, "x5712672WOS"] == 1), "pc_group"])
## MJ
att72MJ <- unique(MSMS_mod[which(MSMS_mod[, "att72MJ"] == 1), "pc_group"])
obt72MJ <- unique(MSMS_mod[which(MSMS_mod[, "obt72MJ"] == 1), "pc_group"])
clev72MJ <- unique(MSMS_mod[which(MSMS_mod[, "clev72MJ"] == 1), "pc_group"])
quad72MJ <- unique(MSMS_mod[which(MSMS_mod[, "quad72MJ"] == 1), "pc_group"])
x102772MJ <- unique(MSMS_mod[which(MSMS_mod[, "x102772MJ"] == 1), "pc_group"])
x5712672MJ <- unique(MSMS_mod[which(MSMS_mod[, "x5712672MJ"] == 1), "pc_group"])


library(VennDiagram)
AttObtOverlap0h <- calculate.overlap(list("N. attenuata" = att0, "N. obtusifolia" =obt0))
NaNo0 <- length(AttObtOverlap0h$a3) ## shared with Na, No
Na0 <- length(AttObtOverlap0h$a1) - NaNo0 ## total number of N. attenuata
No0 <- length(AttObtOverlap0h$a2) - NaNo0 ## total number of N. obtusifolia
AttObtOverlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                           "N. obtusifolia" = obt72WOS))
NaNo72 <- length(AttObtOverlap72h$a3) ## shared with Na, No
Na72 <- length(AttObtOverlap72h$a1) - NaNo72 ## total number of N. attenuata
No72 <- length(AttObtOverlap72h$a2) - NaNo72 ## total number of N. obtusifolia
AttObtOverlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                             "N. obtusifolia" = obt72MJ))
NaNo72MJ <- length(AttObtOverlap72hMJ$a3) ## shared with Na, No
Na72MJ <- length(AttObtOverlap72hMJ$a1) - NaNo72MJ ## total number of N. attenuata
No72MJ <- length(AttObtOverlap72hMJ$a2) - NaNo72MJ ## total number of N. obtusifolia

## N. clev
AttObtClevOverlap0h <- calculate.overlap(list("N. attenuata" = att0, 
                                              "N. obtusifolia" = obt0,
                                              "N. clevelandii" = clev0))

ClevNaNo0 <- length(AttObtClevOverlap0h$a5) ## shared with Na, No
ClevNa0 <- length(AttObtClevOverlap0h$a4) ## shared with Na
ClevNo0 <- length(AttObtClevOverlap0h$a6) ## shared with No
ClevNovel0 <- length(AttObtClevOverlap0h$a7) ## novel
AttObtClevOverlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                               "N. obtusifolia" = obt72WOS,
                                               "N. clevelandii" = clev72WOS))
ClevNaNo72 <- length(AttObtClevOverlap72h$a5) ## shared with Na, No
ClevNa72 <- length(AttObtClevOverlap72h$a4) ## shared with Na
ClevNo72 <- length(AttObtClevOverlap72h$a6) ## shared with No
ClevNovel72 <- length(AttObtClevOverlap72h$a7) ## novel
AttObtClevOverlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                                 "N. obtusifolia" = obt72MJ,
                                                 "N. clevelandii" = clev72MJ))
ClevNaNo72MJ <- length(AttObtClevOverlap72hMJ$a5) ## shared with Na, No
ClevNa72MJ <- length(AttObtClevOverlap72hMJ$a4) ## shared with Na
ClevNo72MJ <- length(AttObtClevOverlap72hMJ$a6) ## shared with No
ClevNovel72MJ <- length(AttObtClevOverlap72hMJ$a7) ## novel

## N. quad
AttObtQuadOverlap0h <- calculate.overlap(list("N. attenuata" = att0, 
                                              "N. obtusifolia" = obt0,
                                              "N. quadrivalvis" = quad0))
QuadNaNo0 <- length(AttObtQuadOverlap0h$a5) ## shared with Na, No
QuadNa0 <- length(AttObtQuadOverlap0h$a4) ## shared with Na
QuadNo0 <- length(AttObtQuadOverlap0h$a6) ## shared with No
QuadNovel0 <- length(AttObtQuadOverlap0h$a7) ## novel
AttObtQuadOverlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                               "N. obtusifolia" = obt72WOS,
                                               "N. quadrivalvis" = quad72WOS))
QuadNaNo72 <- length(AttObtQuadOverlap72h$a5) ## shared with Na, No
QuadNa72 <- length(AttObtQuadOverlap72h$a4) ## shared with Na
QuadNo72 <- length(AttObtQuadOverlap72h$a6) ## shared with No
QuadNovel72 <- length(AttObtQuadOverlap72h$a7) ## novel
AttObtQuadOverlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                                 "N. obtusifolia" = obt72MJ,
                                                 "N. quadrivalvis" = quad72MJ))
QuadNaNo72MJ <- length(AttObtQuadOverlap72hMJ$a5) ## shared with Na, No
QuadNa72MJ <- length(AttObtQuadOverlap72hMJ$a4) ## shared with Na
QuadNo72MJ <- length(AttObtQuadOverlap72hMJ$a6) ## shared with No
QuadNovel72MJ <- length(AttObtQuadOverlap72hMJ$a7) ## novel

## N. xobt1027
AttObtX1027Overlap0h <- calculate.overlap(list("N. attenuata" = att0, 
                                               "N. obtusifolia" = obt0,
                                               "N. x 1027" = x10270))
X1027NaNo0 <- length(AttObtX1027Overlap0h$a5) ## shared with Na, No
X1027Na0 <- length(AttObtX1027Overlap0h$a4) ## shared with Na
X1027No0 <- length(AttObtX1027Overlap0h$a6) ## shared with No
X1027Novel0 <- length(AttObtX1027Overlap0h$a7) ## novel
AttObtX1027Overlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                                "N. obtusifolia" = obt72WOS,
                                                "N. x 1027" = x102772WOS))
X1027NaNo72 <- length(AttObtX1027Overlap72h$a5) ## shared with Na, No
X1027Na72 <- length(AttObtX1027Overlap72h$a4) ## shared with Na
X1027No72 <- length(AttObtX1027Overlap72h$a6) ## shared with No
X1027Novel72 <- length(AttObtX1027Overlap72h$a7) ## novel
AttObtX1027Overlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                                  "N. obtusifolia" = obt72MJ,
                                                  "N. x 1027" = x102772MJ))
X1027NaNo72MJ <- length(AttObtX1027Overlap72hMJ$a5) ## shared with Na, No
X1027Na72MJ <- length(AttObtX1027Overlap72hMJ$a4) ## shared with Na
X1027No72MJ <- length(AttObtX1027Overlap72hMJ$a6) ## shared with No
X1027Novel72MJ <- length(AttObtX1027Overlap72hMJ$a7) ## novel

## N. xobt57126
AttObtX57126Overlap0h <- calculate.overlap(list("N. attenuata" = att0, 
                                                "N. obtusifolia" = obt0,
                                                "N. x 57126" = x571260))
X57126NaNo0 <- length(AttObtX57126Overlap0h$a5) ## shared with Na, No
X57126Na0 <- length(AttObtX57126Overlap0h$a4) ## shared with Na
X57126No0 <- length(AttObtX57126Overlap0h$a6) ## shared with No
X57126Novel0 <- length(AttObtX57126Overlap0h$a7) ## novel
AttObtX57126Overlap72h <- calculate.overlap(list("N. attenuata" = att72WOS, 
                                                 "N. obtusifolia" = obt72WOS,
                                                 "N. x 57126" = x5712672WOS))
X57126NaNo72 <- length(AttObtX57126Overlap72h$a5) ## shared with Na, No
X57126Na72 <- length(AttObtX57126Overlap72h$a4) ## shared with Na
X57126No72 <- length(AttObtX57126Overlap72h$a6) ## shared with No
X57126Novel72 <- length(AttObtX57126Overlap72h$a7) ## novel
AttObtX57126Overlap72hMJ <- calculate.overlap(list("N. attenuata" = att72MJ, 
                                                   "N. obtusifolia" = obt72MJ,
                                                   "N. x 57126" = x5712672MJ))
X57126NaNo72MJ <- length(AttObtX57126Overlap72hMJ$a5) ## shared with Na, No
X57126Na72MJ <- length(AttObtX57126Overlap72hMJ$a4) ## shared with Na
X57126No72MJ <- length(AttObtX57126Overlap72hMJ$a6) ## shared with No
X57126Novel72MJ <- length(AttObtX57126Overlap72hMJ$a7) ## novel

df <- data.frame(metabolites = c(Na0, NaNo0, Na72, NaNo72, Na72MJ, NaNo72MJ,
                                 No0, NaNo0, No72, NaNo72, No72MJ, NaNo72MJ,
                                 ClevNovel0, ClevNo0, ClevNa0, ClevNaNo0, 
                                 ClevNovel72, ClevNo72, ClevNa72, ClevNaNo72,
                                 ClevNovel72MJ, ClevNo72MJ, ClevNa72MJ, ClevNaNo72MJ,
                                 QuadNovel0, QuadNo0, QuadNa0, QuadNaNo0,
                                 QuadNovel72, QuadNo72, QuadNa72, QuadNaNo72,
                                 QuadNovel72MJ, QuadNo72MJ, QuadNa72MJ, QuadNaNo72MJ,
                                 X1027Novel0, X1027No0, X1027Na0, X1027NaNo0,
                                 X1027Novel72, X1027No72, X1027Na72, X1027NaNo72,
                                 X1027Novel72MJ, X1027No72MJ, X1027Na72MJ, X1027NaNo72MJ,
                                 X57126Novel0, X57126No0, X57126Na0, X57126NaNo0,
                                 X57126Novel72, X57126No72, X57126Na72, X57126NaNo72,
                                 X57126Novel72MJ, X57126No72MJ, X57126Na72MJ, X57126NaNo72MJ), 
                 groups = c(rep(c("N. attenuata", "N. attenuata / N. obtusifolia"), 3),
                            rep(c("N. obtusifolia", "N. attenuata / N. obtusifolia"), 3),
                            rep(c("N. clevelandii (novel)", "N. obtusifolia", "N. attenuata", "N. attenuata / N. obtusifolia"),3),
                            rep(c("N. quadrivalvis (novel)", "N. obtusifolia", "N. attenuata", "N. attenuata / N. obtusifolia"),3),
                            rep(c("N. x obtusiata 10/27 (novel)", "N. obtusifolia", "N. attenuata", "N. attenuata / N. obtusifolia"),3),
                            rep(c("N. x obtusiata 57/126 (novel)", "N. obtusifolia", "N. attenuata", "N. attenuata / N. obtusifolia"),3)), 
                 treatment = c(rep(c(rep("C", 2), rep("W+OS", 2), rep("MJ", 2)), 2),
                               rep(c(rep("C",4), rep("W+OS",4), rep("MJ",4)), 4)),
                 species = c(rep("N. attenuata", 6), rep("N. obtusifolia", 6), rep("N. clevelandii", 12), rep("N. quadrivalvis", 12), rep("N. x obtusiata 10/27", 12), rep("N. x obtusiata 57/126", 12)))

#df.melt <- melt(df)
df$treatment <- factor(x = df$treatment, levels = c("C", "W+OS", "MJ"), ordered  = TRUE)
#df.melt$groups <- factor(x = df.melt$groups, levels = c("N. attenuata", "N. otusifolia", "N. attenuata / N. obtusifolia","novel"), ordered = TRUE)
df$species <- factor(x = df$species, levels = c("N. attenuata", "N. obtusifolia", "N. clevelandii", "N. quadrivalvis", "N. x obtusiata 10/27", "N. x obtusiata 57/126"), ordered = TRUE)
df$groups <- factor(x = df$groups, levels = c("N. attenuata", "N. obtusifolia", "N. attenuata / N. obtusifolia", "N. clevelandii (novel)", "N. quadrivalvis (novel)", "N. x obtusiata 10/27 (novel)", "N. x obtusiata 57/126 (novel)"), ordered = TRUE)
##df <- transform(df, groups = factor(groups, levels = c("Na", "No", "NaNo","novel")))
##df$groups <- reorder(df$groups, X = sort(df$groups))#, FUN = function(x) sort(x))
##attributes(df$groups) <- list("No"= 2, "NaNo" = 3, "Na" = 1, "novel" = 4)
library(ggplot2)
library(dplyr)
ggplot(arrange(df, groups), aes(y = metabolites, x = treatment, fill = groups)) + 
    geom_bar(stat="identity") + 
    scale_fill_manual(values = c(rep(c("red", "blue", "purple1", "orange", "seagreen4", "plum2", "slateblue"), 3))) + 
    facet_grid(. ~ species) + theme(strip.text = element_text(face = "italic")) + 
    labs(x = "", y = "") + guides(fill = guide_legend(title="metabolites originating from")) + 
    theme(axis.text.y = element_text(size=12), axis.title = element_text(size=16), 
          axis.text.x = element_text(size = 8),
          legend.title = element_text(size = 12 ), strip.text=element_text(size=7), 
          legend.text = element_text(face = "italic", size = 12)) 
@

<<inducibility>>=
## get inducibility for W+OS and MeJA
Compounds_bin <- function(peaklist2, spec, time, mode, threshold) {
    ##features <- apply(peaklist2[, cols], 1, table, useNA = "always")
    features <- peaklist[, paste0(spec, time, mode)]
    features <- ifelse(features <= threshold, FALSE, TRUE)
    ##features_l <- lapply(1:length(features), function(x) as.vector(features[[x]][length(features[[x]])]))
    ##binary <- logical(dim(peaklist2)[1])
    ##indFeatures <- which(unlist(features_l) <= 2)
    ##binary[indFeatures] <- TRUE
    return(features)
}


inducibility <- function(peaklist2, MSMS, ind0 = 1:5, ind72 = 6:10, cols = 20:79, paired = TRUE, spec, mode) {
    if (length(ind0) != 5) stop("length of ind0 not 5")
    if (length(ind72) != 5) stop("length of ind72 not 5")
    
    geno_bin_0 <- Compounds_bin(peaklist2, spec, time = "0", mode = NULL, threshold = 4)
    geno_bin_72 <- Compounds_bin(peaklist2, spec, time = "72", mode = mode, threshold = 2)
    
    
    ## pc group for genotype
    pcgroupGenotype <- as.numeric(peaklist2[, "pcgroup"])
    #PCGROUP <- unique(pcgroupGenotype)
    
    
    #pcgroup0 <- MSMS[which(MSMS[, paste0(spec, "0")] == 1), "pc_group"]
    #PCGROUP_uni_0 <- unique(pcgroup0)
    #pcgroup72 <- MSMS[which(MSMS[, paste0(spec, "72", mode)] == 1), "pc_group"]
    #PCGROUP_uni_72 <- unique(pcgroup72)
    pcgroup0 <- as.numeric(peaklist2[geno_bin_0, "pcgroup"])
    PCGROUP_uni_0 <- unique(pcgroup0)
    pcgroup72 <- as.numeric(peaklist2[geno_bin_72, "pcgroup"])
    PCGROUP_uni_72 <- unique(pcgroup72)
    
    ## how many compounds does the genotype have?
    ## check first for each i how many are not filled
    #peaklist0 <- peaklist1[, cols[ ind0 ]]
    peaklist0_2 <- peaklist2[, cols[ ind0 ]]
    peaklist72_2 <- peaklist2[, cols [ind72 ]]
    #peaklist72 <- peaklist1[, cols[ ind72 ]]
    
    # pcgroupGenotype <- as.numeric(pcgroupGenotype)
    
    ## create inducibilityGenotype, a vector to store if a metabolite (i.e. pcgroup) is induced
    # inducibilityGenotype <- numeric(length(PCGROUP))
    # pvalueGenotype <- numeric(length(PCGROUP))
    # fc <- numeric(length(PCGROUP))
    inducibilityGenotype_72 <- rep(NA, max(c(as.numeric(unique(pcgroupGenotype)), PCGROUP_uni_72)))
    pvalueGenotype_72 <- rep(NA, length(inducibilityGenotype_72))
    fc <- rep(NA, length(inducibilityGenotype_72))
    
    for (i in PCGROUP_uni_72) { ## 1, 2, ... length(PCGROUP) ## was for(i in 1:length(PCGROUP))
        inds <- which(pcgroupGenotype == i) 
        ## truncate inds so that only those inds are used which actually show up in peaklist for
        ## 72 h time point
        inds <- inds[geno_bin_72[inds]] 
        
        if (length(inds) != 0) {
            pvalues <- numeric(length(inds))
            peak0 <- as.matrix(peaklist0_2[inds, ])
            peak72 <- as.matrix(peaklist72_2[inds, ])
            test <- lapply(1:length(inds), FUN = function(x) {
                ## cond 1, test if we can do shapiro.test, if not assume that data is not normally-distributed
                cond1 <- if(inherits(try(shapiro.test(peak0[x,]), silent = TRUE), "try-error")) {0.01} else{shapiro.test(peak0[x,])$p.value}
                ## cond 2, test if we can do shapiro.test, if not assume that data is not normally-distributed
                cond2 <- if(inherits(try(shapiro.test(peak72[x,]), silent= TRUE), "try-error")) {0.01} else{shapiro.test(peak72[x,])$p.value}
                if (cond1 > 0.05 & cond2 > 0.05) {
                    t.test(peak0[x,], peak72[x,], alternative = "less", paired = paired)$p.value
                } else {
                    if(inherits(try(wilcox.test(as.numeric(peak0[x,]), as.numeric(peak72[x,]), alternative = "less", paired = paired, exact = TRUE), silent = TRUE), "try-error")) {0.5} else{wilcox.test(as.numeric(peak0[x,]), as.numeric(peak72[x,]), alternative = "less", paired = paired, exact = TRUE)$p.value}}
                
            })
            
            ## fold change
            meanPeak0 <- apply(peak0, 1, mean, na.rm = TRUE)
            meanPeak72 <- apply(peak72, 1, mean, na.rm = TRUE)
            meanFoldChange <- mean(meanPeak72 / meanPeak0)
            fc[i] <- meanFoldChange
            
            test_unlist <- unlist(test)
            pvalues[test_unlist <= 0.05] <- TRUE
            if (sum(pvalues) / length(pvalues) >= 0.66) {
                inducibilityGenotype_72[i] <- TRUE
            } else {
                inducibilityGenotype_72[i] <- FALSE}
                pvalueGenotype_72[i] <- mean(test_unlist)
        }
        if (length(inds) == 0) pvalueGenotype_72[i] <- NA
        if (length(inds) == 0) inducibilityGenotype_72[i] <- NA
        if (length(inds) == 0) fc[i] <- NA
        
    }
    
    ## how many compounds are induced? -1 because of remaining NA value
    return(list(
        "percentInduced" = sum(inducibilityGenotype_72, na.rm = TRUE) / (length(unique(PCGROUP_uni_72))), 
        "pcgroupGenotype_0" = sort(PCGROUP_uni_0),
        "pcgroupGenotype_72" = sort(PCGROUP_uni_72),
        "inducibility" = inducibilityGenotype_72,
        "p_values" = pvalueGenotype_72, 
        "fold_change" = fc))
}

## remove unncessary row entries in peaklist
truncatePeaklist <- function(peaklist, MSMS_mod, mode = c("WOS", "MJ")) {
    peaklistNew <- NULL
    peaklistPC <- as.numeric(peaklist[, "pcgroup"])
    uniquePrecursor <- as.character(unique(MSMS_mod[, "precursor"]))
    for (i in 1:length(uniquePrecursor)) {
        inds <- which(MSMS_mod[, "precursor"] == as.character(uniquePrecursor[i]))
    
        if (mode == "WOS") {
            mapped1 <- "mapped1WOS"
            mapped2 <- "mapped2WOS"
            rt <- "rtWOS"
            mz <- "mzWOS"
        }
        if (mode == "MJ") {
            mapped1 <- "mapped1MJ"
            mapped2 <- "mapped2MJ"
            rt <- "rtMJ"
            mz <- "mzMJ"
        }
    
        if (any(c(as.numeric(MSMS_mod[inds, mapped1]), as.numeric(MSMS_mod[inds, mapped2])) - 1 == 1)) {
            peaklistInd <- unique(
                which(peaklist[, "rt"] == unique(MSMS_mod[inds, rt])),
                which(peaklist[, "mz"] == unique(MSMS_mod[inds,  mz])))
            peaklistPC_ind <- as.character(unique(peaklistPC[peaklistInd]))
            peaklistPC_ind <- min(as.numeric(peaklistPC_ind))
            if (length(peaklistPC_ind) > 1) {print(i); stop("")}
            
            newRowEntries <- peaklist[which(peaklistPC == peaklistPC_ind),]
            if (length(unique(newRowEntries[, "pcgroup"])) > 1) {print(i); stop("")}
            if (!(unique(newRowEntries[, "pcgroup"]) %in% peaklistNew[, "pcgroup"])) {
                peaklistNew <- rbind(peaklistNew, 
                                     newRowEntries)
            }
            
                                 ##peaklist[which(peaklistPC == peaklistPC_ind),])
        
        }
    }
    return(peaklistNew)
}

peaklistWOS <- truncatePeaklist(peaklist, MSMS_mod, mode = "WOS")
dim(peaklistWOS)

peaklistMJ <- truncatePeaklist(peaklist, MSMS_mod, mode = "MJ")
dim(peaklistMJ)

inducedAtt <- inducibility(peaklistWOS, MSMS_mod,  ind0 = 1:5, ind72 = 6:10, cols, spec = "att", mode = "WOS")
inducedAtt[[1]]
numMetAttWOS <- length(unique(inducedAtt[[3]]))
inducedObt <- inducibility(peaklistWOS, MSMS_mod, ind0 = 11:15, ind72 = 16:20, cols, spec = "obt", mode = "WOS")
inducedObt[[1]]
numMetObtWOS <- length(unique(inducedObt[[3]]))
##inducedClev <- inducibility(peaklist, peaklist2, ind0 = 21:25, ind72 = 26:30)
##inducedClev[[1]]
numMetClevWOS <- length(unique(inducedClev[[3]]))
##inducedQuad <- inducibility(peaklist, peaklist2, ind0 = 31:35, ind72 = 36:40)
##inducedQuad[[1]]
numMetQuadWOS <- length(unique(inducedQuad[[3]]))
##inducedX1027 <- inducibility(peaklist, peaklist2, ind0 = 41:45, ind72 = 46:50)
##inducedX1027[[1]]
numMetX1027WOS <- length(unique(inducedX1027[[3]]))
##inducedX57126 <- inducibility(peaklist, peaklist2, ind0 = c(51:54, 51), ind72 = c(56:59, 56)) ## last was not induced
##inducedX57126[[1]]
numMetX57126WOS <- length(unique(inducedX57126[[3]]))

## bootstrapping to check if number of metabolites correlates negatively with inducibility
##bs15 <- lapply(1:100, function (x) sample(1:5, 5, replace = T))
##bs610 <- lapply(bs15, function (x) x + 5)
##indAttbs <- lapply(1:100, function(x) inducibility(peaklist, peaklist2, ind0 = bs15[[x]], ind72 = bs610[[x]]))
##indAttbs_numInd <- unlist(lapply(indAttbs, function(x) sum(x[[4]], na.rm = TRUE)))
##indAttbs_numTot <- unlist(lapply(indAttbs, function(x) length(unique(x[[3]]))))

##bs1115 <- lapply(1:100, function (x) sample(11:15, 5, replace = T))
##bs1620 <- lapply(bs1115, function (x) x + 5)
##indObtbs <- lapply(1:100, function(x) inducibility(peaklist, peaklist2, ind0 = bs1115[[x]], ind72 = bs1620[[x]]))
##indObtbs_numInd <- unlist(lapply(indObtbs, function(x) sum(x[[4]], na.rm = TRUE)))
##indObtbs_numTot <- unlist(lapply(indObtbs, function(x) length(unique(x[[3]]))))

##bs2125 <- lapply(1:100, function (x) sample(21:25, 5, replace = T))
##bs2630 <- lapply(bs2125, function (x) x + 5)
##indClevbs <- lapply(1:100, function(x) inducibility(peaklist, peaklist2, ind0 = bs2125[[x]], ind72 = bs2630[[x]]))
##indClevbs_numInd <- unlist(lapply(indClevbs, function(x) sum(x[[4]], na.rm = TRUE)))
##indClevbs_numTot <- unlist(lapply(indClevbs, function(x) length(unique(x[[3]]))))

##bs3135 <- lapply(1:100, function (x) sample(31:35, 5, replace = T))
##bs3640 <- lapply(bs3135, function (x) x + 5)
##indQuadbs <- lapply(1:100, function(x) inducibility(peaklist, peaklist2, ind0 = bs3135[[x]], ind72 = bs3640[[x]]))
##indQuadbs_numInd <- unlist(lapply(indQuadbs, function(x) sum(x[[4]], na.rm = TRUE)))
##indQuadbs_numTot <- unlist(lapply(indQuadbs, function(x) length(unique(x[[3]]))))

##bs4145 <- lapply(1:100, function (x) sample(41:45, 5, replace = T))
##bs4650 <- lapply(bs4145, function (x) x + 5)
##indX1027bs <- lapply(1:100, function(x) inducibility(peaklist, peaklist2, ind0 = bs4145[[x]], ind72 = bs4650[[x]]))
##indX1027bs_numInd <- unlist(lapply(indX1027bs, function(x) sum(x[[4]], na.rm = TRUE)))
##indX1027bs_numTot <- unlist(lapply(indX1027bs, function(x) length(unique(x[[3]]))))

##bs5155 <- lapply(1:100, function (x) sample(51:54, 5, replace = T)) ## last not induced
##bs5660 <- lapply(bs5155, function (x) x + 5)
##indX57126bs <- lapply(1:100, function(x) inducibility(peaklist, peaklist2, ind0 = bs5155[[x]], ind72 = bs5660[[x]]))
##indX57126bs_numInd <- unlist(lapply(indX57126bs, function(x) sum(x[[4]], na.rm = TRUE)))
##indX57126bs_numTot <- unlist(lapply(indX57126bs, function(x) length(unique(x[[3]]))))

@